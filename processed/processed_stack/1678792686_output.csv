title,text
aea.configurations.manager,"aea.configurations.manager. <a id=""aea.configurations.manager""></a> # aea.configurations.manager Implementation of the AgentConfigManager. <a id=""aea.configurations.manager.VariableDoesNotExist""></a>"
aea.configurations.manager,"VariableDoesNotExist Objects. Variable does not exist in a config exception. <a id=""aea.configurations.manager.handle_dotted_path""></a> #### handledottedpath Separate the path between path to resource and json path to attribute. Allowed values: 'agent.an_attribute_name' 'protocols.my_protocol.an_attribute_name' 'connections.my_connection.an_attribute_name' 'contracts.my_contract.an_attribute_name' 'skills.my_skill.an_attribute_name' 'vendor.author.[protocols|contracts|connections|skills].package_name.attribute_name We also return the component id to retrieve the configuration of a specific component. Notice that at this point we don't know the version, so we put 'latest' as version, but later we will ignore it because we will filter with only the component prefix (i.e. the triple type, author and name). **Arguments**: - : dotted path. - : the author string. - : project path **Returns**: Tuple[list of settings dict keys, filepath, config loader, component id]. <a id=""aea.configurations.manager.find_component_directory_from_component_id""></a> #### findcomponentdirectoryfromcomponentid Find a component directory from component id. <a id=""aea.configurations.manager.AgentConfigManager""></a>"
aea.configurations.manager,"AgentConfigManager Objects. AeaConfig manager. <a id=""aea.configurations.manager.AgentConfigManager.__init__""></a> #### init Init manager. **Arguments**: - : AgentConfig to manage. - : directory where project for agent_config placed. - : whether or not it is env vars friendly <a id=""aea.configurations.manager.AgentConfigManager.load_component_configuration""></a> #### loadcomponentconfiguration Load component configuration from the project directory. **Arguments**: - : Id of the component to load config for. - : bool. **Returns**: ComponentConfiguration <a id=""aea.configurations.manager.AgentConfigManager.agent_config_file_path""></a> #### agentconfigfilepath Return agent config file path. <a id=""aea.configurations.manager.AgentConfigManager.load""></a> #### load Create AgentConfigManager instance from agent project path. <a id=""aea.configurations.manager.AgentConfigManager.set_variable""></a> #### setvariable Set config variable. **Arguments**: - : str dotted path or List[Union[ComponentId, str]] - : one of the json friendly objects. <a id=""aea.configurations.manager.AgentConfigManager.get_variable""></a> #### getvariable Set config variable. **Arguments**: - : str dotted path or List[Union[ComponentId, str]] **Returns**: json friendly value. <a id=""aea.configurations.manager.AgentConfigManager.update_config""></a> #### updateconfig Apply overrides for agent config. Validates and applies agent config and component overrides. Does not save it on the disc! **Arguments**: - : overridden values dictionary **Returns**: None <a id=""aea.configurations.manager.AgentConfigManager.validate_current_config""></a> #### validatecurrentconfig Check is current config valid. <a id=""aea.configurations.manager.AgentConfigManager.json""></a> #### json Return current agent config json representation. <a id=""aea.configurations.manager.AgentConfigManager.dump_config""></a> #### dumpconfig Save agent config on the disc. <a id=""aea.configurations.manager.AgentConfigManager.verify_private_keys""></a> #### verifyprivatekeys Verify private keys. Does not saves the config! Use AgentConfigManager.dump_config() **Arguments**: - : path to an AEA project. - : private_key_helper is a function that use agent config to check the keys - : replace env vars with values, does not dump config - : the password to encrypt/decrypt the private key. **Returns**: the agent configuration manager. <a id=""aea.configurations.manager.AgentConfigManager.get_overridables""></a> #### getoverridables Get config overridables."
aea.configurations.pypi,"aea.configurations.pypi. <a id=""aea.configurations.pypi""></a> # aea.configurations.pypi This module contains a checker for PyPI version consistency. <a id=""aea.configurations.pypi.and_""></a> #### and Do the and between two specifier sets. <a id=""aea.configurations.pypi.is_satisfiable""></a> #### issatisfiable Check if the specifier set is satisfiable. Satisfiable means that there exists a version number that satisfies all the constraints. It is worth noticing that it doesn't mean that that version number with that package actually exists. >>> from packaging.specifiers import SpecifierSet The specifier set "">0.9, ==1.0"" is satisfiable: the version number ""1.0"" satisfies the constraints >>> s1 = SpecifierSet("">0.9,==1.0"") >>> ""1.0"" in s1 True >>> is_satisfiable(s1) True The specifier set ""==1.0, >1.1"" is not satisfiable: >>> s1 = SpecifierSet(""==1.0,>1.1"") >>> is_satisfiable(s1) False For other details, please refer to PEP440: https://www.python.org/dev/peps/pep-0440 **Arguments**: - : the specifier set. **Returns**: False if the constraints are surely non-satisfiable, True if we don't know. <a id=""aea.configurations.pypi.is_simple_dep""></a> #### issimpledep Check if it is a simple dependency. Namely, if it has no field specified, or only the 'version' field set. **Arguments**: - : the dependency **Returns**: whether it is a simple dependency or not <a id=""aea.configurations.pypi.to_set_specifier""></a> #### tosetspecifier Get the set specifier. It assumes to be a simple dependency (see above). <a id=""aea.configurations.pypi.merge_dependencies""></a> #### mergedependencies Merge two groups of dependencies. If some of them are not ""simple"" (see above), and there is no risk of conflict because there is no other package with the same name, we leave them; otherwise we raise an error. **Arguments**: - : the first operand - : the second operand. **Returns**: the merged dependencies. <a id=""aea.configurations.pypi.merge_dependencies_list""></a> #### mergedependencieslist Merge a list of dependencies. **Arguments**: - : the list of dependencies **Returns**: the merged dependencies."
base,base. 
aea.configurations.datatypes,"aea.configurations.datatypes. <a id=""aea.configurations.data_types""></a> # aea.configurations.datatypes Base config data types. <a id=""aea.configurations.data_types.JSONSerializable""></a>"
aea.configurations.datatypes,"JSONSerializable Objects. Interface for JSON-serializable objects. <a id=""aea.configurations.data_types.JSONSerializable.json""></a> #### json Compute the JSON representation. <a id=""aea.configurations.data_types.JSONSerializable.from_json""></a> #### fromjson Build from a JSON object. <a id=""aea.configurations.data_types.PackageVersion""></a>"
aea.configurations.datatypes,"PackageVersion Objects. A package version. <a id=""aea.configurations.data_types.PackageVersion.__init__""></a> #### init Initialize a package version. **Arguments**: - : a string, os a semver.VersionInfo object. <a id=""aea.configurations.data_types.PackageVersion.is_latest""></a> #### islatest Check whether the version is 'latest'. <a id=""aea.configurations.data_types.PackageVersion.__str__""></a> #### str Get the string representation. <a id=""aea.configurations.data_types.PackageVersion.__eq__""></a> #### eq Check equality. <a id=""aea.configurations.data_types.PackageVersion.__lt__""></a> #### lt Compare with another object. <a id=""aea.configurations.data_types.PackageType""></a>"
aea.configurations.datatypes,"PackageType Objects. Package types. <a id=""aea.configurations.data_types.PackageType.to_plural""></a> #### toplural Get the plural name. >>> PackageType.AGENT.to_plural() 'agents' >>> PackageType.PROTOCOL.to_plural() 'protocols' >>> PackageType.CONNECTION.to_plural() 'connections' >>> PackageType.SKILL.to_plural() 'skills' >>> PackageType.CONTRACT.to_plural() 'contracts' **Returns**: pluralised package type <a id=""aea.configurations.data_types.PackageType.__str__""></a> #### str Convert to string. <a id=""aea.configurations.data_types.ComponentType""></a>"
aea.configurations.datatypes,"ComponentType Objects. Enum of component types supported. <a id=""aea.configurations.data_types.ComponentType.to_package_type""></a> #### topackagetype Get package type for component type. <a id=""aea.configurations.data_types.ComponentType.plurals""></a> #### plurals Get the collection of type names, plural. >>> ComponentType.plurals() ['protocols', 'connections', 'skills', 'contracts'] **Returns**: list of all pluralised component types <a id=""aea.configurations.data_types.ComponentType.to_plural""></a> #### toplural Get the plural version of the component type. >>> ComponentType.PROTOCOL.to_plural() 'protocols' >>> ComponentType.CONNECTION.to_plural() 'connections' >>> ComponentType.SKILL.to_plural() 'skills' >>> ComponentType.CONTRACT.to_plural() 'contracts' **Returns**: pluralised component type <a id=""aea.configurations.data_types.ComponentType.__str__""></a> #### str Get the string representation. <a id=""aea.configurations.data_types.PublicId""></a>"
aea.configurations.datatypes,"PublicId Objects. This class implement a public identifier. A public identifier is composed of three elements: - author - name - version The concatenation of those three elements gives the public identifier: author/name:version >>> public_id = PublicId(""author"", ""my_package"", ""0.1.0"") >>> assert public_id.author == ""author"" >>> assert public_id.name == ""my_package"" >>> assert public_id.version == ""0.1.0"" >>> another_public_id = PublicId(""author"", ""my_package"", ""0.1.0"") >>> assert hash(public_id) == hash(another_public_id) >>> assert public_id == another_public_id >>> latest_public_id = PublicId(""author"", ""my_package"", ""latest"") >>> latest_public_id <author/my_package:latest> >>> latest_public_id.package_version.is_latest True <a id=""aea.configurations.data_types.PublicId.__init__""></a> #### init Initialize the public identifier. <a id=""aea.configurations.data_types.PublicId.author""></a> #### author Get the author. <a id=""aea.configurations.data_types.PublicId.name""></a> #### name Get the name. <a id=""aea.configurations.data_types.PublicId.version""></a> #### version Get the version string. <a id=""aea.configurations.data_types.PublicId.package_version""></a> #### packageversion Get the package version object. <a id=""aea.configurations.data_types.PublicId.to_any""></a> #### toany Return the same public id, but with any version. <a id=""aea.configurations.data_types.PublicId.same_prefix""></a> #### sameprefix Check if the other public id has the same author and name of this. <a id=""aea.configurations.data_types.PublicId.to_latest""></a> #### tolatest Return the same public id, but with latest version. <a id=""aea.configurations.data_types.PublicId.is_valid_str""></a> #### isvalidstr Check if a string is a public id. **Arguments**: - : the public id in string format. **Returns**: bool indicating validity <a id=""aea.configurations.data_types.PublicId.from_str""></a> #### fromstr Initialize the public id from the string. >>> str(PublicId.from_str(""author/package_name:0.1.0"")) 'author/package_name:0.1.0' A bad formatted input raises value error: >>> PublicId.from_str(""bad/formatted:input"") Traceback (most recent call last): ... ValueError: Input 'bad/formatted:input' is not well formatted. **Arguments**: - : the public id in string format. **Raises**: - : if the string in input is not well formatted. **Returns**: the public id object. <a id=""aea.configurations.data_types.PublicId.try_from_str""></a> #### tryfromstr Safely try to get public id from string. **Arguments**: - : the public id in string format. **Returns**: the public id object or None <a id=""aea.configurations.data_types.PublicId.from_uri_path""></a> #### fromuripath Initialize the public id from the string. >>> str(PublicId.from_uri_path(""author/package_name/0.1.0"")) 'author/package_name:0.1.0' A bad formatted input raises value error: >>> PublicId.from_uri_path(""bad/formatted:input"") Traceback (most recent call last): ... ValueError: Input 'bad/formatted:input' is not well formatted. **Arguments**: - : the public id in uri path string format. **Raises**: - : if the string in input is not well formatted. **Returns**: the public id object. <a id=""aea.configurations.data_types.PublicId.to_uri_path""></a> #### touripath Turn the public id into a uri path string. **Returns**: uri path string <a id=""aea.configurations.data_types.PublicId.json""></a> #### json Compute the JSON representation. <a id=""aea.configurations.data_types.PublicId.from_json""></a> #### fromjson Build from a JSON object. <a id=""aea.configurations.data_types.PublicId.__hash__""></a> #### hash Get the hash. <a id=""aea.configurations.data_types.PublicId.__str__""></a> #### str Get the string representation. <a id=""aea.configurations.data_types.PublicId.__repr__""></a> #### repr Get the representation. <a id=""aea.configurations.data_types.PublicId.__eq__""></a> #### eq Compare with another object. <a id=""aea.configurations.data_types.PublicId.__lt__""></a> #### lt Compare two public ids. >>> public_id_1 = PublicId(""author_1"", ""name_1"", ""0.1.0"") >>> public_id_2 = PublicId(""author_1"", ""name_1"", ""0.1.1"") >>> public_id_3 = PublicId(""author_1"", ""name_2"", ""0.1.0"") >>> public_id_1 > public_id_2 False >>> public_id_1 < public_id_2 True >>> public_id_1 < public_id_3 Traceback (most recent call last): ... ValueError: The public IDs author_1/name_1:0.1.0 and author_1/name_2:0.1.0 cannot be compared. Their author or name attributes are different. **Arguments**: - : the object to compate to **Raises**: - : if the public ids cannot be confirmed **Returns**: whether or not the inequality is satisfied <a id=""aea.configurations.data_types.PackageId""></a>"
aea.configurations.datatypes,"PackageId Objects. A package identifier. <a id=""aea.configurations.data_types.PackageId.__init__""></a> #### init Initialize the package id. **Arguments**: - : the package type. - : the public id. <a id=""aea.configurations.data_types.PackageId.package_type""></a> #### packagetype Get the package type. <a id=""aea.configurations.data_types.PackageId.public_id""></a> #### publicid Get the public id. <a id=""aea.configurations.data_types.PackageId.author""></a> #### author Get the author of the package. <a id=""aea.configurations.data_types.PackageId.name""></a> #### name Get the name of the package. <a id=""aea.configurations.data_types.PackageId.version""></a> #### version Get the version of the package. <a id=""aea.configurations.data_types.PackageId.package_prefix""></a> #### packageprefix Get the package identifier without the version. <a id=""aea.configurations.data_types.PackageId.from_uri_path""></a> #### fromuripath Initialize the package id from the string. >>> str(PackageId.from_uri_path(""skill/author/package_name/0.1.0"")) '(skill, author/package_name:0.1.0)' A bad formatted input raises value error: >>> PackageId.from_uri_path(""very/bad/formatted:input"") Traceback (most recent call last): ... ValueError: Input 'very/bad/formatted:input' is not well formatted. **Arguments**: - : the package id in uri path string format. **Raises**: - : if the string in input is not well formatted. **Returns**: the package id object. <a id=""aea.configurations.data_types.PackageId.to_uri_path""></a> #### touripath Turn the package id into a uri path string. **Returns**: uri path string <a id=""aea.configurations.data_types.PackageId.__hash__""></a> #### hash Get the hash. <a id=""aea.configurations.data_types.PackageId.__str__""></a> #### str Get the string representation. <a id=""aea.configurations.data_types.PackageId.__repr__""></a> #### repr Get the object representation in string. <a id=""aea.configurations.data_types.PackageId.__eq__""></a> #### eq Compare with another object. <a id=""aea.configurations.data_types.PackageId.__lt__""></a> #### lt Compare two public ids. <a id=""aea.configurations.data_types.ComponentId""></a>"
aea.configurations.datatypes,"ComponentId Objects. Class to represent a component identifier. A component id is a package id, but excludes the case when the package is an agent. >>> pacakge_id = PackageId(PackageType.PROTOCOL, PublicId(""author"", ""name"", ""0.1.0"")) >>> component_id = ComponentId(ComponentType.PROTOCOL, PublicId(""author"", ""name"", ""0.1.0"")) >>> pacakge_id == component_id True >>> component_id2 = ComponentId(ComponentType.PROTOCOL, PublicId(""author"", ""name"", ""0.1.1"")) >>> pacakge_id == component_id2 False <a id=""aea.configurations.data_types.ComponentId.__init__""></a> #### init Initialize the component id. **Arguments**: - : the component type. - : the public id. <a id=""aea.configurations.data_types.ComponentId.component_type""></a> #### componenttype Get the component type. <a id=""aea.configurations.data_types.ComponentId.component_prefix""></a> #### componentprefix Get the component identifier without the version. <a id=""aea.configurations.data_types.ComponentId.same_prefix""></a> #### sameprefix Check if the other component id has the same type, author and name of this. <a id=""aea.configurations.data_types.ComponentId.prefix_import_path""></a> #### prefiximportpath Get the prefix import path for this component. <a id=""aea.configurations.data_types.ComponentId.json""></a> #### json Get the JSON representation. <a id=""aea.configurations.data_types.ComponentId.from_json""></a> #### fromjson Create component id from json data. <a id=""aea.configurations.data_types.PyPIPackageName""></a>"
aea.configurations.datatypes,"PyPIPackageName Objects. A PyPI Package name. <a id=""aea.configurations.data_types.GitRef""></a>"
aea.configurations.datatypes,"GitRef Objects. A Git reference. It can be a branch name, a commit hash or a tag. <a id=""aea.configurations.data_types.Dependency""></a>"
aea.configurations.datatypes,"Dependency Objects. This class represents a PyPI dependency. It contains the following information: - version: a version specifier(s) (e.g. '==0.1.0'). - index: the PyPI index where to download the package from (default: https://pypi.org) - git: the URL to the Git repository (e.g. https://github.com/fetchai/agents-aea.git) - ref: either the branch name, the tag, the commit number or a Git reference (default: 'master'.) If the 'git' field is set, the 'version' field will be ignored. These fields will be forwarded to the 'pip' command. <a id=""aea.configurations.data_types.Dependency.__init__""></a> #### init Initialize a PyPI dependency. **Arguments**: - : the package name. - : the specifier set object - : the URL to the PyPI server. - : the URL to a git repository. - : the Git reference (branch/commit/tag). <a id=""aea.configurations.data_types.Dependency.name""></a> #### name Get the name. <a id=""aea.configurations.data_types.Dependency.version""></a> #### version Get the version. <a id=""aea.configurations.data_types.Dependency.index""></a> #### index Get the index. <a id=""aea.configurations.data_types.Dependency.git""></a> #### git Get the git. <a id=""aea.configurations.data_types.Dependency.ref""></a> #### ref Get the ref. <a id=""aea.configurations.data_types.Dependency.from_json""></a> #### fromjson Parse a dependency object from a dictionary. <a id=""aea.configurations.data_types.Dependency.to_json""></a> #### tojson Transform the object to JSON. <a id=""aea.configurations.data_types.Dependency.get_pip_install_args""></a> #### getpipinstallargs Get 'pip install' arguments. <a id=""aea.configurations.data_types.Dependency.__str__""></a> #### str Get the string representation. <a id=""aea.configurations.data_types.Dependency.__eq__""></a> #### eq Compare with another object. <a id=""aea.configurations.data_types.Dependencies""></a> #### Dependencies A dictionary from package name to dependency data structure (see above). The package name must satisfy <a href=""https://www.python.org/dev/peps/pep-0426/"">the constraints on Python packages names</a>. The main advantage of having a dictionary is that we implicitly filter out dependency duplicates. We cannot have two items with the same package name since the keys of a YAML object form a set. <a id=""aea.configurations.data_types.CRUDCollection""></a>"
aea.configurations.datatypes,"CRUDCollection Objects. Interface of a CRUD collection. <a id=""aea.configurations.data_types.CRUDCollection.__init__""></a> #### init Instantiate a CRUD collection. <a id=""aea.configurations.data_types.CRUDCollection.create""></a> #### create Add an item. **Arguments**: - : the item id. - : the item to be added. **Raises**: - : if the item with the same id is already in the collection. <a id=""aea.configurations.data_types.CRUDCollection.read""></a> #### read Get an item by its name. **Arguments**: - : the item id. **Returns**: the associated item, or None if the item id is not present. <a id=""aea.configurations.data_types.CRUDCollection.update""></a> #### update Update an existing item. **Arguments**: - : the item id. - : the item to be added. <a id=""aea.configurations.data_types.CRUDCollection.delete""></a> #### delete Delete an item. <a id=""aea.configurations.data_types.CRUDCollection.read_all""></a> #### readall Read all the items. <a id=""aea.configurations.data_types.CRUDCollection.keys""></a> #### keys Get the set of keys."
loader,loader. 
aea.configurations.utils,"aea.configurations.utils. <a id=""aea.configurations.utils""></a> # aea.configurations.utils AEA configuration utils. <a id=""aea.configurations.utils.replace_component_ids""></a> #### replacecomponentids Update public id references in a package configuration. This depends on the actual configuration being considered. <a id=""aea.configurations.utils._""></a> #### Replace references in agent configuration. It breaks down in: 1) replace public ids in 'protocols', 'connections', 'contracts' and 'skills'; 2) replace public ids in default routing; 3) replace public id of default connection; 4) replace custom component configurations. **Arguments**: - : the agent configuration. - : the replacement mapping. <a id=""aea.configurations.utils._""></a> #### Do nothing - protocols have no references. <a id=""aea.configurations.utils._""></a> #### Replace references in a connection configuration. <a id=""aea.configurations.utils._""></a> #### Do nothing - contracts have no references. <a id=""aea.configurations.utils._""></a> #### Replace references in a skill configuration. <a id=""aea.configurations.utils.get_latest_component_id_from_prefix""></a> #### getlatestcomponentidfromprefix Get component id with the greatest version in an agent configuration given its prefix. **Arguments**: - : the agent configuration. - : the package prefix. **Returns**: the package id with the greatest version, or None if not found."
aea.components.base,"aea.components.base. <a id=""aea.components.base""></a> # aea.components.base This module contains definitions of agent components. <a id=""aea.components.base.Component""></a>"
aea.components.base,"Component Objects. Abstract class for an agent component. <a id=""aea.components.base.Component.__init__""></a> #### init Initialize a package. **Arguments**: - : the package configuration. - : whether the package is vendorized. - : the keyword arguments for the logger. <a id=""aea.components.base.Component.component_type""></a> #### componenttype Get the component type. <a id=""aea.components.base.Component.is_vendor""></a> #### isvendor Get whether the component is vendorized or not. <a id=""aea.components.base.Component.prefix_import_path""></a> #### prefiximportpath Get the prefix import path for this component. <a id=""aea.components.base.Component.component_id""></a> #### componentid Ge the package id. <a id=""aea.components.base.Component.public_id""></a> #### publicid Get the public id. <a id=""aea.components.base.Component.configuration""></a> #### configuration Get the component configuration. <a id=""aea.components.base.Component.directory""></a> #### directory Get the directory. Raise error if it has not been set yet. <a id=""aea.components.base.Component.directory""></a> #### directory Set the directory. Raise error if already set. <a id=""aea.components.base.Component.build_directory""></a> #### builddirectory Get build directory for the component. <a id=""aea.components.base.load_aea_package""></a> #### loadaeapackage Load the AEA package from configuration. It adds all the __init__.py modules into . **Arguments**: - : the configuration object. <a id=""aea.components.base.perform_load_aea_package""></a> #### performloadaeapackage Load the AEA package from values provided. It adds all the __init__.py modules into . **Arguments**: - : path of the component. - : str - : str - : str"
aea.components.loader,"aea.components.loader. <a id=""aea.components.loader""></a> # aea.components.loader This module contains utilities for loading components. <a id=""aea.components.loader.component_type_to_class""></a> #### componenttypetoclass Get the component class from the component type. **Arguments**: - : the component type **Returns**: the component class <a id=""aea.components.loader.load_component_from_config""></a> #### loadcomponentfromconfig Load a component from a directory. **Arguments**: - : the component configuration. - : the positional arguments. - : the keyword arguments. **Returns**: the component instance. <a id=""aea.components.loader.AEAPackageNotFound""></a>"
aea.components.loader,"AEAPackageNotFound Objects. Exception when failed to import package, cause not exists."
aea.components.utils,"aea.components.utils. <a id=""aea.components.utils""></a> # aea.components.utils This module contains the component loading utils."
Scaffold connection,Scaffold connection. # Scaffold connection The scaffold connection acts as a boilerplate for a newly created connection.
Scaffold connection,Usage. Create a scaffold connection with the command and implement your own connection.
