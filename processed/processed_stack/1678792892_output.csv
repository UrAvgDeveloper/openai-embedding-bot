title,text
cosmpy.aerial.client.staking,"cosmpy.aerial.client.staking. <a id=""cosmpy.aerial.client.staking""></a> # cosmpy.aerial.client.staking Staking functionality. <a id=""cosmpy.aerial.client.staking.ValidatorStatus""></a>"
cosmpy.aerial.client.staking,"ValidatorStatus Objects. Validator status. <a id=""cosmpy.aerial.client.staking.ValidatorStatus.from_proto""></a> #### fromproto Get the validator status from proto. **Arguments**: - : value **Raises**: - : Unable to decode validator status **Returns**: Validator status <a id=""cosmpy.aerial.client.staking.create_delegate_msg""></a> #### createdelegatemsg Create delegate message. **Arguments**: - : delegator - : validator - : amount - : denom **Returns**: Delegate message <a id=""cosmpy.aerial.client.staking.create_redelegate_msg""></a> #### createredelegatemsg Create redelegate message. **Arguments**: - : delegator address - : source validation address - : destination validation address - : amount - : denom **Returns**: Redelegate message <a id=""cosmpy.aerial.client.staking.create_undelegate_msg""></a> #### createundelegatemsg Create undelegate message. **Arguments**: - : delegator address - : validator address - : amount - : denom **Returns**: Undelegate message"
cosmpy.aerial.client.bank,"cosmpy.aerial.client.bank. <a id=""cosmpy.aerial.client.bank""></a> # cosmpy.aerial.client.bank Bank send message. <a id=""cosmpy.aerial.client.bank.create_bank_send_msg""></a> #### createbanksendmsg Create bank send message. **Arguments**: - : from address - : to address - : amount - : denom **Returns**: bank send message"
cosmpy.aerial.client.init,"cosmpy.aerial.client.init. <a id=""cosmpy.aerial.client.__init__""></a> # cosmpy.aerial.client.init Client functionality. <a id=""cosmpy.aerial.client.__init__.Account""></a>"
cosmpy.aerial.client.init,"Account Objects. Account. <a id=""cosmpy.aerial.client.__init__.StakingPosition""></a>"
cosmpy.aerial.client.init,"StakingPosition Objects. Staking positions. <a id=""cosmpy.aerial.client.__init__.UnbondingPositions""></a>"
cosmpy.aerial.client.init,"UnbondingPositions Objects. Unbonding positions. <a id=""cosmpy.aerial.client.__init__.Validator""></a>"
cosmpy.aerial.client.init,"Validator Objects. Validator. <a id=""cosmpy.aerial.client.__init__.Coin""></a>"
cosmpy.aerial.client.init,"Coin Objects. Coins. <a id=""cosmpy.aerial.client.__init__.StakingSummary""></a>"
cosmpy.aerial.client.init,"StakingSummary Objects. Get the staking summary. <a id=""cosmpy.aerial.client.__init__.StakingSummary.total_staked""></a> #### totalstaked Get the total staked amount. <a id=""cosmpy.aerial.client.__init__.StakingSummary.total_rewards""></a> #### totalrewards Get the total rewards. <a id=""cosmpy.aerial.client.__init__.StakingSummary.total_unbonding""></a> #### totalunbonding total unbonding. <a id=""cosmpy.aerial.client.__init__.LedgerClient""></a>"
cosmpy.aerial.client.init,"LedgerClient Objects. Ledger client. <a id=""cosmpy.aerial.client.__init__.LedgerClient.__init__""></a> #### init Init ledger client. **Arguments**: - : Network configurations - : int. optional interval int seconds - : int. optional interval int seconds <a id=""cosmpy.aerial.client.__init__.LedgerClient.network_config""></a> #### networkconfig Get the network config. **Returns**: network config <a id=""cosmpy.aerial.client.__init__.LedgerClient.gas_strategy""></a> #### gasstrategy Get gas strategy. **Returns**: gas strategy <a id=""cosmpy.aerial.client.__init__.LedgerClient.gas_strategy""></a> #### gasstrategy Set gas strategy. **Arguments**: - : strategy **Raises**: - : Invalid strategy must implement GasStrategy interface <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_account""></a> #### queryaccount Query account. **Arguments**: - : address **Raises**: - : Unexpected account type returned from query **Returns**: account details <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_params""></a> #### queryparams Query Prams. **Arguments**: - : subspace - : key **Returns**: Query params <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_bank_balance""></a> #### querybankbalance Query bank balance. **Arguments**: - : address - : denom, defaults to None **Returns**: bank balance <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_bank_all_balances""></a> #### querybankallbalances Query bank all balances. **Arguments**: - : address **Returns**: bank all balances <a id=""cosmpy.aerial.client.__init__.LedgerClient.send_tokens""></a> #### sendtokens Send tokens. **Arguments**: - : destination address - : amount - : denom - : sender - : memo, defaults to None - : gas limit, defaults to None **Returns**: prepare and broadcast the transaction and transaction details <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_validators""></a> #### queryvalidators Query validators. **Arguments**: - : validator status, defaults to None **Returns**: List of validators <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_staking_summary""></a> #### querystakingsummary Query staking summary. **Arguments**: - : address **Returns**: staking summary <a id=""cosmpy.aerial.client.__init__.LedgerClient.delegate_tokens""></a> #### delegatetokens Delegate tokens. **Arguments**: - : validator address - : amount - : sender - : memo, defaults to None - : gas limit, defaults to None **Returns**: prepare and broadcast the transaction and transaction details <a id=""cosmpy.aerial.client.__init__.LedgerClient.redelegate_tokens""></a> #### redelegatetokens Redelegate tokens. **Arguments**: - : current validator address - : next validator address - : amount - : sender - : memo, defaults to None - : gas limit, defaults to None **Returns**: prepare and broadcast the transaction and transaction details <a id=""cosmpy.aerial.client.__init__.LedgerClient.undelegate_tokens""></a> #### undelegatetokens Undelegate tokens. **Arguments**: - : validator - : amount - : sender - : memo, defaults to None - : gas limit, defaults to None **Returns**: prepare and broadcast the transaction and transaction details <a id=""cosmpy.aerial.client.__init__.LedgerClient.claim_rewards""></a> #### claimrewards claim rewards. **Arguments**: - : validator - : sender - : memo, defaults to None - : gas limit, defaults to None **Returns**: prepare and broadcast the transaction and transaction details <a id=""cosmpy.aerial.client.__init__.LedgerClient.estimate_gas_for_tx""></a> #### estimategasfortx Estimate gas for transaction. **Arguments**: - : transaction **Returns**: Estimated gas for transaction <a id=""cosmpy.aerial.client.__init__.LedgerClient.estimate_fee_from_gas""></a> #### estimatefeefromgas Estimate fee from gas. **Arguments**: - : gas limit **Returns**: Estimated fee for transaction <a id=""cosmpy.aerial.client.__init__.LedgerClient.estimate_gas_and_fee_for_tx""></a> #### estimategasandfeefortx Estimate gas and fee for transaction. **Arguments**: - : transaction **Returns**: estimate gas, fee for transaction <a id=""cosmpy.aerial.client.__init__.LedgerClient.wait_for_query_tx""></a> #### waitforquerytx Wait for query transaction. **Arguments**: - : transaction hash - : timeout, defaults to None - : poll_period, defaults to None **Raises**: - : timeout **Returns**: transaction response <a id=""cosmpy.aerial.client.__init__.LedgerClient.query_tx""></a> #### querytx query transaction. **Arguments**: - : transaction hash **Raises**: - : Tx details not found - : RPC connection issue **Returns**: query response <a id=""cosmpy.aerial.client.__init__.LedgerClient.simulate_tx""></a> #### simulatetx simulate transaction. **Arguments**: - : transaction **Raises**: - : Unable to simulate non final transaction **Returns**: gas used in transaction <a id=""cosmpy.aerial.client.__init__.LedgerClient.broadcast_tx""></a> #### broadcasttx Broadcast transaction. **Arguments**: - : transaction **Returns**: Submitted transaction"
cosmpy.aerial.client.utils,"cosmpy.aerial.client.utils. <a id=""cosmpy.aerial.client.utils""></a> # cosmpy.aerial.client.utils Helper functions. <a id=""cosmpy.aerial.client.utils.prepare_and_broadcast_basic_transaction""></a> #### prepareandbroadcastbasictransaction Prepare and broadcast basic transaction. **Arguments**: - : Ledger client - : The transaction - : The transaction sender - : The account - : The gas limit - : Transaction memo, defaults to None **Returns**: broadcast transaction <a id=""cosmpy.aerial.client.utils.ensure_timedelta""></a> #### ensuretimedelta Return timedelta for interval. **Arguments**: - : timedelta or seconds in int or float **Returns**: timedelta <a id=""cosmpy.aerial.client.utils.get_paginated""></a> #### getpaginated Get pages for specific request. **Arguments**: - : request supports pagination - : function to perform request - : max number of pages to return. default - 0 unlimited - : Optional int: amount of records per one page. default is None, determined by server **Returns**: List of responses"
cosmpy.aerial.contract.cosmwasm,"cosmpy.aerial.contract.cosmwasm. <a id=""cosmpy.aerial.contract.cosmwasm""></a> # cosmpy.aerial.contract.cosmwasm Cosmwasm contract store, instantiate, execute messages. <a id=""cosmpy.aerial.contract.cosmwasm.create_cosmwasm_store_code_msg""></a> #### createcosmwasmstorecodemsg Create cosmwasm store code message. **Arguments**: - : contract path - : sender address **Returns**: cosmwasm store code message <a id=""cosmpy.aerial.contract.cosmwasm.create_cosmwasm_instantiate_msg""></a> #### createcosmwasminstantiatemsg Create cosmwasm instantiate message. **Arguments**: - : code id - : args - : label - : sender address - : funds, defaults to None - : admin address, defaults to None **Returns**: cosmwasm instantiate message <a id=""cosmpy.aerial.contract.cosmwasm.create_cosmwasm_migrate_msg""></a> #### createcosmwasmmigratemsg Create cosmwasm migrate message. **Arguments**: - : code id - : args - : sender address - : sender address **Returns**: cosmwasm migrate message <a id=""cosmpy.aerial.contract.cosmwasm.create_cosmwasm_execute_msg""></a> #### createcosmwasmexecutemsg Create cosmwasm execute message. **Arguments**: - : sender address - : contract address - : args - : funds, defaults to None **Returns**: cosmwasm execute message"
cosmpy.aerial.contract.init,"cosmpy.aerial.contract.init. <a id=""cosmpy.aerial.contract.__init__""></a> # cosmpy.aerial.contract.init cosmwasm contract functionality. <a id=""cosmpy.aerial.contract.__init__.LedgerContract""></a>"
cosmpy.aerial.contract.init,"LedgerContract Objects. Ledger contract. <a id=""cosmpy.aerial.contract.__init__.LedgerContract.__init__""></a> #### init Initialize the Ledger contract. **Arguments**: - : Path - : Ledger client - : address, defaults to None - : digest, defaults to None - : path to contract schema, defaults to None - : optional int. code id of the contract stored <a id=""cosmpy.aerial.contract.__init__.LedgerContract.path""></a> #### path Get contract path. **Returns**: contract path <a id=""cosmpy.aerial.contract.__init__.LedgerContract.digest""></a> #### digest Get the contract digest. **Returns**: contract digest <a id=""cosmpy.aerial.contract.__init__.LedgerContract.code_id""></a> #### codeid Get the code id. **Returns**: code id <a id=""cosmpy.aerial.contract.__init__.LedgerContract.address""></a> #### address Get the contract address. **Returns**: contract address <a id=""cosmpy.aerial.contract.__init__.LedgerContract.store""></a> #### store Store the contract. **Arguments**: - : sender wallet address - : transaction gas limit, defaults to None - : transaction memo, defaults to None **Raises**: - : Runtime error **Returns**: code id <a id=""cosmpy.aerial.contract.__init__.LedgerContract.instantiate""></a> #### instantiate Instantiate the contract. **Arguments**: - : args - : sender wallet address - : label, defaults to None - : transaction gas limit, defaults to None - : admin address, defaults to None - : funds, defaults to None **Raises**: - : Unable to extract contract code id **Returns**: contract address <a id=""cosmpy.aerial.contract.__init__.LedgerContract.upgrade""></a> #### upgrade Store new contract code and migrate the current contract address. **Arguments**: - : args - : sender wallet address - : path to new contract - : transaction gas limit, defaults to None **Raises**: - : Unable to extract contract code id **Returns**: contract address <a id=""cosmpy.aerial.contract.__init__.LedgerContract.migrate""></a> #### migrate Migrate the current contract address to new code id. **Arguments**: - : args - : sender wallet address - : Code id of the newly deployed contract - : transaction gas limit, defaults to None **Raises**: - : Unable to extract contract code id **Returns**: contract address <a id=""cosmpy.aerial.contract.__init__.LedgerContract.deploy""></a> #### deploy Deploy the contract. **Arguments**: - : args - : sender address - : label, defaults to None - : store gas limit, defaults to None - : instantiate gas limit, defaults to None - : admin address, defaults to None - : funds, defaults to None **Returns**: instantiate contract details <a id=""cosmpy.aerial.contract.__init__.LedgerContract.execute""></a> #### execute execute the contract. **Arguments**: - : args - : sender address - : transaction gas limit, defaults to None - : funds, defaults to None **Raises**: - : Contract appears not to be deployed currently **Returns**: transaction details broadcast <a id=""cosmpy.aerial.contract.__init__.LedgerContract.query""></a> #### query Query on contract. **Arguments**: - : args **Raises**: - : Contract appears not to be deployed currently **Returns**: query result <a id=""cosmpy.aerial.contract.__init__.LedgerContract.data""></a> #### data Get the contract address. **Returns**: contract address <a id=""cosmpy.aerial.contract.__init__.LedgerContract.__json__""></a> #### json Get the contract details in json. **Returns**: contract details in json"
Security Policy,Security Policy. # Security Policy This document outlines security procedures and general policies for the project.
Security Policy,"Reporting a Vulnerability. The team and community take all security bugs in seriously. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. Report security bugs by emailing . The lead maintainer will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the security team will endeavour to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. Report security bugs in third-party modules to the person or team maintaining the module."
Security Policy,"Disclosure Policy. When the security team receives a security bug report, they will assign it to a primary handler. This person will coordinate the fix and release process, involving the following steps: - Confirm the problem and determine the affected versions. - Audit code to find any potential similar problems. - Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible to PyPI."
Security Policy,Comments on this Policy. If you have suggestions on how this process could be improved please submit a pull request.
Security Policy,"Bug Bounty. We have a **bug bounty program** at https://docs.fetch.ai/bug_bounty/. Please report any security issues you find, or reach out to . Please try to be as explicit as possible, describing all the steps and example code to reproduce the security issue. Critical bug fixes will be backported to past major releases."
Security Policy,"Public Discussions. Please restrain from publicly discussing a potential security vulnerability. 🙊 It's better to discuss privately and try to find a solution first, to limit the potential impact as much as possible."
send_tokens,"send_tokens. On this page, you can find instructions on how to send tokens using native transfers at #native-network-transfer and the Inter-Blockchain Communication (IBC) at #ibc-transfer protocol."
send_tokens,"Native network transfer. 1. Ensure you are logged into the wallet. 2. Select **Send**. 3. Fill in the details of your transaction: * **Recipient**: the address you want to send the tokens to * **Token**: the token denomination or type * **Amount**: the number of tokens you want to send with this transaction (you can see your current balance above the **Amount**) * **Memo (Optional)**: some transactions (e.g. to/from some exchanges) require a specific memo. If not needed, you can leave it blank. * **Fee**: the transaction fee. Choose from **Low**, **Average** and **High** !!! tip Usually, the lower the transaction fee, the longer you need to wait for your transaction to be settled on the network. 4. Press **Send**. 5. In the summary screen, review the details and if everything is correct, select **Approve**. !!! info You can check the status of your transaction via the explorer at https://explore-fetchhub.fetch.ai."
send_tokens,"IBC transfer. at #ibc-transfer, up to Step 4 at #step4. 2. Click the **Select Chain** drop-down. 3. Select **+ New IBC Transfer Channel**. 4. Select the **Destination Chain** and enter the source **Channel ID** (e.g. ). !!! tip To find out the IBC channel ID between any two chains: 1. Head over to this page at https://www.mintscan.io/fetchai/relayers 2. At the top, select the sending chain, for example **Fetch.AI**. Then below it, click **IBC RELAYERS**. 3. Select the destination chain, for example **OSMOSIS**. 4. You can now see the channels between the two chains. Select an active channel (in green) and note the sending chain's channel ID. For Fetch.AI to Osmosis, the sending chain's (Fetch.AI's) channel ID is . 5. Enter the channel ID in the Fetch wallet ( in our example). !!! info Remember to write the channel ID in lower case (i.e. ) !!! warning If there are no green channels, the relayers are temporarily inactive. You need to wait until one becomes active again. 6. Click **Save**. !!! Failure If you input an incorrect Channel ID, either the wallet will not accept it and shows you an error, or your transaction could get stuck in an inactive channel."
"The **Fetch Wallet**, originally forked from the Keplr wallet at https://github.com/chainapsis/keplr-wallet, is a generic wallet for interacting with the Fetch blockchain network and other ledgers built using the Cosmos-SDK, and supports the Inter-Blockchain Communication (IBC) protocol.

Some of its highlights include:

- Private keys and mnemonics are encrypted (using scrypt) and are stored locally on device. This means neither Fetch nor the websites visited have access to these sensitive data. 
- Multiple accounts on the Fetch ledger and other Cosmos-based ledgers.
- Support for Ledger hardware wallets for enhanced security.
- Native and IBC token transfers.

",level_0. index
"The **Fetch Wallet**, originally forked from the Keplr wallet at https://github.com/chainapsis/keplr-wallet, is a generic wallet for interacting with the Fetch blockchain network and other ledgers built using the Cosmos-SDK, and supports the Inter-Blockchain Communication (IBC) protocol.

Some of its highlights include:

- Private keys and mnemonics are encrypted (using scrypt) and are stored locally on device. This means neither Fetch nor the websites visited have access to these sensitive data. 
- Multiple accounts on the Fetch ledger and other Cosmos-based ledgers.
- Support for Ledger hardware wallets for enhanced security.
- Native and IBC token transfers.

","Compatibility. The Fetch wallet works on all Chromium-based web browsers, including Chrome at https://www.google.com/chrome/, Brave at https://brave.com, Edge at https://www.microsoft.com/edge and Decentr at https://decentr.net."
"The **Fetch Wallet**, originally forked from the Keplr wallet at https://github.com/chainapsis/keplr-wallet, is a generic wallet for interacting with the Fetch blockchain network and other ledgers built using the Cosmos-SDK, and supports the Inter-Blockchain Communication (IBC) protocol.

Some of its highlights include:

- Private keys and mnemonics are encrypted (using scrypt) and are stored locally on device. This means neither Fetch nor the websites visited have access to these sensitive data. 
- Multiple accounts on the Fetch ledger and other Cosmos-based ledgers.
- Support for Ledger hardware wallets for enhanced security.
- Native and IBC token transfers.

","Get the Wallet. Install the Fetch wallet from the Chrome web store at https://chrome.google.com/webstore/detail/fetchai-network-wallet/ellkdbaphhldpeajbepobaecooaoafpg/related?hl=en-GB. !!! info At this time, you cannot run the Keplr at https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en and Fetch wallets together because they interfere. Please disable the Keplr wallet before using the Fetch wallet."
"The **Fetch Wallet**, originally forked from the Keplr wallet at https://github.com/chainapsis/keplr-wallet, is a generic wallet for interacting with the Fetch blockchain network and other ledgers built using the Cosmos-SDK, and supports the Inter-Blockchain Communication (IBC) protocol.

Some of its highlights include:

- Private keys and mnemonics are encrypted (using scrypt) and are stored locally on device. This means neither Fetch nor the websites visited have access to these sensitive data. 
- Multiple accounts on the Fetch ledger and other Cosmos-based ledgers.
- Support for Ledger hardware wallets for enhanced security.
- Native and IBC token transfers.

",Version. 
"The **Fetch Wallet**, originally forked from the Keplr wallet at https://github.com/chainapsis/keplr-wallet, is a generic wallet for interacting with the Fetch blockchain network and other ledgers built using the Cosmos-SDK, and supports the Inter-Blockchain Communication (IBC) protocol.

Some of its highlights include:

- Private keys and mnemonics are encrypted (using scrypt) and are stored locally on device. This means neither Fetch nor the websites visited have access to these sensitive data. 
- Multiple accounts on the Fetch ledger and other Cosmos-based ledgers.
- Support for Ledger hardware wallets for enhanced security.
- Native and IBC token transfers.

","First-time use. The first time you open the wallet, you will see the following options: - Create a new account at ./account_management.md#creating-a-new-account - Import existing account at ./account_management.md#importing-an-existing-account - Import ledger at ./account_management.md#using-a-hardware-wallet - Migrate from ETH at ./migrate_erc20 After account creation or import is completed, the wallet will be accessible from your browser's extensions."
"The **Fetch Wallet**, originally forked from the Keplr wallet at https://github.com/chainapsis/keplr-wallet, is a generic wallet for interacting with the Fetch blockchain network and other ledgers built using the Cosmos-SDK, and supports the Inter-Blockchain Communication (IBC) protocol.

Some of its highlights include:

- Private keys and mnemonics are encrypted (using scrypt) and are stored locally on device. This means neither Fetch nor the websites visited have access to these sensitive data. 
- Multiple accounts on the Fetch ledger and other Cosmos-based ledgers.
- Support for Ledger hardware wallets for enhanced security.
- Native and IBC token transfers.

",How to contribute. You can contribute to this project by engaging with its repository on GitHub: GitHub repository at https://github.com/fetchai/fetch-wallet
account_management,account_management. 
account_management,"Welcome Page. ,First time Use: The first time you open the wallet, you will be presented with the welcome page. ,Not the First Time: 1. Ensure you are logged into the wallet. 2. Click the account icon in the top right corner of the dashboard, then **+ Add Account**. !!! info In some contexts, the term **account** refers to an address that has, at some point in time, had a balance (and therefore a state on the ledger). In this context, it is not necessary for an account to have a balance, for example for it to be imported at #importing-an-existing-account."
account_management,"Creating a new account. Using the wallet, you can create a new account and address on the Fetch ledger: 1. On the welcome page at #welcome-page, click **Create new account**. 2. Choose a 12 or 24 word long mnemonic seed and securely back it up. !!! warning **KEEP IT SAFE!** Anyone with your mnemonic seed can access your wallet and take your assets. !!! danger **DON'T LOSE IT!** Lost mnemonic seed cannot be recovered! If you lose your mnemonic seed you will lose access to your wallet. 3. Give your account a name and set a password if one is not set (i.e. if it is the first time you open the wallet, or in case you have removed all of your accounts). The password will be used the next time you want to use the wallet or make important changes to your account. Hit **Next**. 4. Rearrange the mnemonic phrases by clicking on them in the correct order to confirm your mnemonic seed. Then click **Register**."
account_management,"Existing account. #### Importing an existing account If you have an account on the Fetch network, for example having had one already on the Fetch wallet and want to access it again, have an account on another wallet (e.g. Cosmostation, Keplr, ...) and wish to bring it to the Fetch wallet, or having created an address using one of our tools (e.g. the AEA framework at https://docs.fetch.ai/aea), you can import it into the Fetch wallet: 1. On the welcome page at #welcome-page, click **Import existing account**. 2. Enter your mnemonic seed (set of words) or private key (hexidecimal). !!! warning **KEEP IT SAFE!** Anyone with your mnemonic seed or private key can access your wallet and take your assets. !!! tip It is more convenient, and preferable at https://www.investopedia.com/terms/h/hd-wallet-hierarchical-deterministic-wallet.asp, to use the mnemonic over private keys. 3. Give your account a name and set a password if one is not set (i.e. if it is the first time you open the wallet, or in case you have removed all of your accounts). The password will be used the next time you want to use the wallet or make important changes to your account. Hit **Next**. #### Using a Hardware Wallet If you have a Ledger at https://www.ledger.com/ hardware wallet and wish to keep your key and mnemonics on that device while using the Fetch wallet: !!! info Currently only ledger at https://www.ledger.com/ hardware wallets are supported. 1. On the welcome page at #welcome-page, click **Import ledger**. 2. Give your account a name and set a password if one is not set (i.e. if it is the first time you open the wallet, or in case you have removed all of your accounts). The password will be used the next time you want to use the wallet or make important changes to your account. Hit **Next**. 3. Follow the instructions on the popup to connect your device. !!! warning Please ensure you keep your mnemonic seed somewhere safe where others cannot access it. If you lose it, your wallet will be inaccessible once you log out. The password for your account should also be kept safe but is not necessary for recovery if you have your mnemonic seed. !!! info If you lose your password, you need to uninstall and re-install the Fetch wallet and select . Then use the mnemonic seed for your account and choose a new password."
account_management,"Switching accounts. If you have multiple accounts set up on the Fetch wallet, to switch between them: 1. Ensure you are logged into the wallet. 2. Click the account icon in the top right corner of the dashboard. 3. Select the account you want to switch to."
account_management,"Removing an Account. To remove an account from your Fetch wallet: 1. Ensure you are logged into the wallet. 2. Click the account icon in the top right corner of the dashboard. 3. Hit <b style=""vertical-align: text-bottom;font-weight: 900;"">...</b> (the three dots icon) for the account you want to remove and choose **Delete Account**. 4. Enter your wallet password. !!! warning If you have not yet backed up your mnemonic seed, click on **Back-up account** and enter you password to view it.<br /> Then back it up safely. If you lose your mnemonic seed you will lose access to your account. 5. Click **Confirm** to remove the account from your wallet."
