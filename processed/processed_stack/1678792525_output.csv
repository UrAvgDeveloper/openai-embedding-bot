title,text
aea.helpers.win32,"aea.helpers.win32. <a id=""aea.helpers.win32""></a> # aea.helpers.win32 Helpers for Windows. <a id=""aea.helpers.win32.enable_ctrl_c_support""></a> #### enablectrlcsupport Enable ctrl+c support for aea.cli command to be tested on windows platform."
aea.helpers.profiling,"aea.helpers.profiling. <a id=""aea.helpers.profiling""></a> # aea.helpers.profiling Implementation of background profiling daemon. <a id=""aea.helpers.profiling.Profiling""></a>"
aea.helpers.profiling,"Profiling Objects. Profiling service. <a id=""aea.helpers.profiling.Profiling.__init__""></a> #### init Init profiler. **Arguments**: - : delay between profiling output in seconds. - : object to count - : object created to count - : function to display output, one str argument. <a id=""aea.helpers.profiling.Profiling.set_counters""></a> #### setcounters Modify obj.__new__ to count objects created created. <a id=""aea.helpers.profiling.Profiling.run""></a> #### run Run profiling. <a id=""aea.helpers.profiling.Profiling.output_profile_data""></a> #### outputprofiledata Render profiling data and call output_function. <a id=""aea.helpers.profiling.Profiling.get_profile_data""></a> #### getprofiledata Get profiling data dict. <a id=""aea.helpers.profiling.Profiling.get_objects_instances""></a> #### getobjectsinstances Return dict with counted object instances present now. <a id=""aea.helpers.profiling.Profiling.get_objecst_created""></a> #### getobjecstcreated Return dict with counted object instances created."
aea.helpers.io,"aea.helpers.io. <a id=""aea.helpers.io""></a> # aea.helpers.io"
aea.helpers.search.generic,"aea.helpers.search.generic. <a id=""aea.helpers.search.generic""></a> # aea.helpers.search.generic This module contains a generic data model. <a id=""aea.helpers.search.generic.GenericDataModel""></a>"
aea.helpers.search.generic,"GenericDataModel Objects. Generic data model. <a id=""aea.helpers.search.generic.GenericDataModel.__init__""></a> #### init Initialise the dataModel."
models,models. 
aea.helpers.ipfs.base,"aea.helpers.ipfs.base. <a id=""aea.helpers.ipfs.base""></a> # aea.helpers.ipfs.base This module contains helper methods and classes for the 'aea' package. <a id=""aea.helpers.ipfs.base.chunks""></a> #### chunks Yield successivesize chunks from data. <a id=""aea.helpers.ipfs.base.IPFSHashOnly""></a>"
aea.helpers.ipfs.base,"IPFSHashOnly Objects. A helper class which allows construction of an IPFS hash without interacting with an IPFS daemon. <a id=""aea.helpers.ipfs.base.IPFSHashOnly.get""></a> #### get Get the IPFS hash for a single file. **Arguments**: - : the file path **Returns**: the ipfs hash"
aea.helpers.ipfs.utils,"aea.helpers.ipfs.utils. <a id=""aea.helpers.ipfs.utils""></a> # aea.helpers.ipfs.utils This module contains utility methods for ipfs helpers."
aea.helpers.multiaddr.base,"aea.helpers.multiaddr.base. <a id=""aea.helpers.multiaddr.base""></a> # aea.helpers.multiaddr.base This module contains multiaddress class. <a id=""aea.helpers.multiaddr.base.MultiAddr""></a>"
aea.helpers.multiaddr.base,"MultiAddr Objects. Protocol Labs' Multiaddress representation of a network address. <a id=""aea.helpers.multiaddr.base.MultiAddr.__init__""></a> #### init Initialize a multiaddress. **Arguments**: - : ip host of the address - : port number of the address - : hex encoded public key. Must conform to Bitcoin EC encoding standard for Secp256k1 - : a multihash of the public key <a id=""aea.helpers.multiaddr.base.MultiAddr.compute_peerid""></a> #### computepeerid Compute the peer id from a public key. In particular, compute the base58 representation of libp2p PeerID from Bitcoin EC encoded Secp256k1 public key. **Arguments**: - : the public key. **Returns**: the peer id. <a id=""aea.helpers.multiaddr.base.MultiAddr.from_string""></a> #### fromstring Construct a MultiAddr object from its string format **Arguments**: - : multiaddress string **Returns**: multiaddress object <a id=""aea.helpers.multiaddr.base.MultiAddr.public_key""></a> #### publickey Get the public key. <a id=""aea.helpers.multiaddr.base.MultiAddr.peer_id""></a> #### peerid Get the peer id. <a id=""aea.helpers.multiaddr.base.MultiAddr.host""></a> #### host Get the peer host. <a id=""aea.helpers.multiaddr.base.MultiAddr.port""></a> #### port Get the peer port. <a id=""aea.helpers.multiaddr.base.MultiAddr.format""></a> #### format Canonical representation of a multiaddress. <a id=""aea.helpers.multiaddr.base.MultiAddr.__str__""></a> #### str Default string representation of a multiaddress."
aea.helpers.transaction.base,"aea.helpers.transaction.base. <a id=""aea.helpers.transaction.base""></a> # aea.helpers.transaction.base This module contains terms related classes. <a id=""aea.helpers.transaction.base.RawTransaction""></a>"
aea.helpers.transaction.base,"RawTransaction Objects. This class represents an instance of RawTransaction. <a id=""aea.helpers.transaction.base.RawTransaction.__init__""></a> #### init Initialise an instance of RawTransaction. <a id=""aea.helpers.transaction.base.RawTransaction.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.RawTransaction.body""></a> #### body Get the body. <a id=""aea.helpers.transaction.base.RawTransaction.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the raw_transaction_protobuf_object argument must be matched with the instance of this class in the 'raw_transaction_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.RawTransaction.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'raw_transaction_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'raw_transaction_protobuf_object' argument. <a id=""aea.helpers.transaction.base.RawTransaction.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.RawTransaction.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.RawMessage""></a>"
aea.helpers.transaction.base,"RawMessage Objects. This class represents an instance of RawMessage. <a id=""aea.helpers.transaction.base.RawMessage.__init__""></a> #### init Initialise an instance of RawMessage. <a id=""aea.helpers.transaction.base.RawMessage.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.RawMessage.body""></a> #### body Get the body. <a id=""aea.helpers.transaction.base.RawMessage.is_deprecated_mode""></a> #### isdeprecatedmode Get the is_deprecated_mode. <a id=""aea.helpers.transaction.base.RawMessage.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the raw_message_protobuf_object argument must be matched with the instance of this class in the 'raw_message_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.RawMessage.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'raw_message_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'raw_message_protobuf_object' argument. <a id=""aea.helpers.transaction.base.RawMessage.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.RawMessage.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.SignedTransaction""></a>"
aea.helpers.transaction.base,"SignedTransaction Objects. This class represents an instance of SignedTransaction. <a id=""aea.helpers.transaction.base.SignedTransaction.__init__""></a> #### init Initialise an instance of SignedTransaction. <a id=""aea.helpers.transaction.base.SignedTransaction.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.SignedTransaction.body""></a> #### body Get the body. <a id=""aea.helpers.transaction.base.SignedTransaction.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the signed_transaction_protobuf_object argument must be matched with the instance of this class in the 'signed_transaction_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.SignedTransaction.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'signed_transaction_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'signed_transaction_protobuf_object' argument. <a id=""aea.helpers.transaction.base.SignedTransaction.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.SignedTransaction.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.SignedMessage""></a>"
aea.helpers.transaction.base,"SignedMessage Objects. This class represents an instance of RawMessage. <a id=""aea.helpers.transaction.base.SignedMessage.__init__""></a> #### init Initialise an instance of SignedMessage. <a id=""aea.helpers.transaction.base.SignedMessage.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.SignedMessage.body""></a> #### body Get the body. <a id=""aea.helpers.transaction.base.SignedMessage.is_deprecated_mode""></a> #### isdeprecatedmode Get the is_deprecated_mode. <a id=""aea.helpers.transaction.base.SignedMessage.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the signed_message_protobuf_object argument must be matched with the instance of this class in the 'signed_message_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.SignedMessage.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'signed_message_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'signed_message_protobuf_object' argument. <a id=""aea.helpers.transaction.base.SignedMessage.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.SignedMessage.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.State""></a>"
aea.helpers.transaction.base,"State Objects. This class represents an instance of State. <a id=""aea.helpers.transaction.base.State.__init__""></a> #### init Initialise an instance of State. <a id=""aea.helpers.transaction.base.State.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.State.body""></a> #### body Get the body. <a id=""aea.helpers.transaction.base.State.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the state_protobuf_object argument must be matched with the instance of this class in the 'state_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.State.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'state_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'state_protobuf_object' argument. <a id=""aea.helpers.transaction.base.State.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.State.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.Terms""></a>"
aea.helpers.transaction.base,"Terms Objects. Class to represent the terms of a multi-currency & multi-token ledger transaction. <a id=""aea.helpers.transaction.base.Terms.__init__""></a> #### init Instantiate terms of a transaction. **Arguments**: - : the ledger on which the terms are to be settled. - : the sender address of the transaction. - : the counterparty address of the transaction. - : the amount by the currency of the transaction. - : a map from good id to the quantity of that good involved in the transaction. - : nonce to be included in transaction to discriminate otherwise identical transactions. - : whether the sender or counterparty pays the tx fee. - : the fee associated with the transaction. - : whether or not terms must have quantities and amounts of opposite signs. - : keyword arguments <a id=""aea.helpers.transaction.base.Terms.id""></a> #### id Get hash of the terms. <a id=""aea.helpers.transaction.base.Terms.sender_hash""></a> #### senderhash Get the sender hash. <a id=""aea.helpers.transaction.base.Terms.counterparty_hash""></a> #### counterpartyhash Get the sender hash. <a id=""aea.helpers.transaction.base.Terms.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.Terms.sender_address""></a> #### senderaddress Get the sender address. <a id=""aea.helpers.transaction.base.Terms.counterparty_address""></a> #### counterpartyaddress Get the counterparty address. <a id=""aea.helpers.transaction.base.Terms.counterparty_address""></a> #### counterpartyaddress Set the counterparty address. <a id=""aea.helpers.transaction.base.Terms.amount_by_currency_id""></a> #### amountbycurrencyid Get the amount by currency id. <a id=""aea.helpers.transaction.base.Terms.is_sender_payable_tx_fee""></a> #### issenderpayabletxfee Bool indicating whether the tx fee is paid by sender or counterparty. <a id=""aea.helpers.transaction.base.Terms.is_single_currency""></a> #### issinglecurrency Check whether a single currency is used for payment. <a id=""aea.helpers.transaction.base.Terms.is_empty_currency""></a> #### isemptycurrency Check whether a single currency is used for payment. <a id=""aea.helpers.transaction.base.Terms.currency_id""></a> #### currencyid Get the amount the sender must pay. <a id=""aea.helpers.transaction.base.Terms.sender_payable_amount""></a> #### senderpayableamount Get the amount the sender must pay. <a id=""aea.helpers.transaction.base.Terms.sender_payable_amount_incl_fee""></a> #### senderpayableamountinclfee Get the amount the sender must pay inclusive fee. <a id=""aea.helpers.transaction.base.Terms.counterparty_payable_amount""></a> #### counterpartypayableamount Get the amount the counterparty must pay. <a id=""aea.helpers.transaction.base.Terms.counterparty_payable_amount_incl_fee""></a> #### counterpartypayableamountinclfee Get the amount the counterparty must pay. <a id=""aea.helpers.transaction.base.Terms.quantities_by_good_id""></a> #### quantitiesbygoodid Get the quantities by good id. <a id=""aea.helpers.transaction.base.Terms.good_ids""></a> #### goodids Get the (ordered) good ids. <a id=""aea.helpers.transaction.base.Terms.sender_supplied_quantities""></a> #### sendersuppliedquantities Get the (ordered) quantities supplied by the sender. <a id=""aea.helpers.transaction.base.Terms.counterparty_supplied_quantities""></a> #### counterpartysuppliedquantities Get the (ordered) quantities supplied by the counterparty. <a id=""aea.helpers.transaction.base.Terms.nonce""></a> #### nonce Get the nonce. <a id=""aea.helpers.transaction.base.Terms.has_fee""></a> #### hasfee Check if fee is set. <a id=""aea.helpers.transaction.base.Terms.fee""></a> #### fee Get the fee. <a id=""aea.helpers.transaction.base.Terms.sender_fee""></a> #### senderfee Get the sender fee. <a id=""aea.helpers.transaction.base.Terms.counterparty_fee""></a> #### counterpartyfee Get the counterparty fee. <a id=""aea.helpers.transaction.base.Terms.fee_by_currency_id""></a> #### feebycurrencyid Get fee by currency. <a id=""aea.helpers.transaction.base.Terms.kwargs""></a> #### kwargs Get the kwargs. <a id=""aea.helpers.transaction.base.Terms.is_strict""></a> #### isstrict Get is_strict. <a id=""aea.helpers.transaction.base.Terms.get_hash""></a> #### gethash Generate a hash from transaction information. **Arguments**: - : the ledger id - : the sender address - : the counterparty address - : the list of good ids - : the quantities supplied by the sender (must all be positive) - : the quantities supplied by the counterparty (must all be positive) - : the amount payable by the sender - : the amount payable by the counterparty - : the nonce of the transaction **Returns**: the hash <a id=""aea.helpers.transaction.base.Terms.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the terms_protobuf_object argument must be matched with the instance of this class in the 'terms_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.Terms.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'terms_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'terms_protobuf_object' argument. <a id=""aea.helpers.transaction.base.Terms.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.Terms.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.TransactionDigest""></a>"
aea.helpers.transaction.base,"TransactionDigest Objects. This class represents an instance of TransactionDigest. <a id=""aea.helpers.transaction.base.TransactionDigest.__init__""></a> #### init Initialise an instance of TransactionDigest. <a id=""aea.helpers.transaction.base.TransactionDigest.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.TransactionDigest.body""></a> #### body Get the receipt. <a id=""aea.helpers.transaction.base.TransactionDigest.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the transaction_digest_protobuf_object argument must be matched with the instance of this class in the 'transaction_digest_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.TransactionDigest.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'transaction_digest_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'transaction_digest_protobuf_object' argument. <a id=""aea.helpers.transaction.base.TransactionDigest.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.TransactionDigest.__str__""></a> #### str Get string representation. <a id=""aea.helpers.transaction.base.TransactionReceipt""></a>"
aea.helpers.transaction.base,"TransactionReceipt Objects. This class represents an instance of TransactionReceipt. <a id=""aea.helpers.transaction.base.TransactionReceipt.__init__""></a> #### init Initialise an instance of TransactionReceipt. <a id=""aea.helpers.transaction.base.TransactionReceipt.ledger_id""></a> #### ledgerid Get the id of the ledger on which the terms are to be settled. <a id=""aea.helpers.transaction.base.TransactionReceipt.receipt""></a> #### receipt Get the receipt. <a id=""aea.helpers.transaction.base.TransactionReceipt.transaction""></a> #### transaction Get the transaction. <a id=""aea.helpers.transaction.base.TransactionReceipt.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the transaction_receipt_protobuf_object argument must be matched with the instance of this class in the 'transaction_receipt_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""aea.helpers.transaction.base.TransactionReceipt.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class must be created that matches the protocol buffer object in the 'transaction_receipt_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'transaction_receipt_protobuf_object' argument. <a id=""aea.helpers.transaction.base.TransactionReceipt.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.transaction.base.TransactionReceipt.__str__""></a> #### str Get string representation."
aea.helpers.preferencerepresentations.base,"aea.helpers.preferencerepresentations.base. <a id=""aea.helpers.preference_representations.base""></a> # aea.helpers.preferencerepresentations.base Preference representation helpers. <a id=""aea.helpers.preference_representations.base.logarithmic_utility""></a> #### logarithmicutility Compute agent's utility given her utility function params and a good bundle. **Arguments**: - : utility params by good identifier - : quantities by good identifier - : a non-negative factor to shift the quantities in the utility function (to ensure the natural logarithm can be used on the entire range of quantities) **Returns**: utility value <a id=""aea.helpers.preference_representations.base.linear_utility""></a> #### linearutility Compute agent's utility given her utility function params and a good bundle. **Arguments**: - : exchange params by currency - : balance by currency **Returns**: utility value"
