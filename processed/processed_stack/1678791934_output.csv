title,text
CLI - Managing Keys,"CLI - Managing Keys. # CLI - Managing Keys Managing your keys is an essential part of working with the Ledger, since all interactions are authenticated with these keys."
CLI - Managing Keys,"Adding keys. To create a new local key you need run the following command: <div class=""admonition note""> <p class=""admonition-title"">Note</p> <p>These keys are stored locally on your system. By default, these keys will be stored in the OS level keychain, however, in general these keys are considered less secure than using a hardware device</p> </div> After running the command will print out a summary of the new key. An example of this output is shown below: This will be followed by a 24-word mnemonic that can be used to re-generate the private key and address for the account (keep this safe, if ever used to control main-net tokens)."
CLI - Managing Keys,"Looking up an address. A common operation that you will want to do is to lookup the address for a specified key. This can be done quickly using the following command: An example of the expected output is shown below: A less common operation, but still useful, would be to lookup the public key for a specified key. The can be achieved with the following command: An example of the expected output is shown below:"
CLI - Managing Keys,Listing keys. To lookup more detailed information for all keys on your system use the following command: This will output all of your keys information in a yaml format that is similar to the one generated when you first created the key.
CLI - Managing Keys,"Recovering a key. You can import a key from a 24-word mnemonic by running: You'll be prompted to enter the mnemonic phrase, and it will then print the matching address and key details as when creating a new key."
CLI - Managing Keys,"Hardware Wallets. ,Setup: We recommend hardware wallets as a solution for managing private keys. The Fetch ledger is compatible with Ledger Nano hardware wallets. To use your Ledger Nano you will need to complete the following steps: 1. Set-up your wallet by creating a PIN and passphrase, which must be stored securely to enable recovery if the device is lost or damaged. 2. Connect your device to your PC and update the firmware to the latest version using the Ledger Live application. 3. Install the Cosmos application using the software manager (Manager > Cosmos > Install). ,Adding a new key: In order to use the hardware wallet address with the cli, the user must first add it via . This process only records the public information about the key. To import the key first plug in the device and enter the device pin. Once you have unlocked the device navigate to the Cosmos app on the device and open it. To add the key use the following command: <div class=""admonition note""> <p class=""admonition-title"">Note</p> <p>The <code>--ledger</code> flag tells the command line tool to talk to the ledger device and the <code>--index</code> flag selects which HD index should be used.</p> </div> When running this command, the Ledger device will prompt you to verify the generated address. Once you have done this you will get an output in the following form:"
Governance Proposals,"Governance Proposals. # Governance Proposals In order to change any attribute of a network, a governance proposal must be submitted. This could be a simple poll, a software update or a governing parameter change. ### Parameter change This is an example of the process in which network parameters may be changed through the use of a governance proposal. The values within this code can be changed in order to alter the minimum deposited fund threshold for a proposal to enter the voting phase, and the length of the deposit stage in which the minimum deposit threshold must be met. ### Proposal deposit phase The characteristics of the deposit phase are described by a set of network governance parameters, where the deposit period is two days from the initial proposal deposit until expiration, and a minimum threshold of 10000000denom as default. The minimum threshold must be met during this deposit period in order to proceed to the voting phase. The proposer may provide all of this threshold, or just some. In which case, supporters of the proposal may donate additional funding towards the goal of meeting the threshold. At any point of the deposit stage, the deposit pot can be queried. This at https://docs.cosmos.network/master/modules/gov/01_concepts.html#proposal-submission documentation provides a more detailed explanation of the deposit funding period. ### Proposal voting and querying After the deposit period has passed, there are two outcomes: either the current minimum threshold is met, or the value is not met and the funds are returned. In the first case this proposal is submitted and to be voted on, returning a tally at the end of the voting period. In order to submit a vote on a proposal that has passed into the voting phase, all staked users except the proposer may do so using this command. The current voting turnout and tally can be queried, which displays a list of all voters and their choice. #### Example output ### Voting outcome After the voting period has ended, the results are used to determine the next step of the proposal. The potential outcomes include: - **Majority *yes* vote** -	The proposal passes through and the users act according to the proposal type - e.g. A Software update proposal passes, and users begin uptake of the new version - **Majority *no* vote** - The funds deposited to pass into the voting stage are returned, and there is no governance change - **Majority *no_with_veto* vote** - This outcome is indicative of a proposal which may undermine the current governance system, e.g. a proposal to set the deposit threshold or voting period to an absurd value - All funds deposited in the proposal are to be burned subject to this outcome, and there is no governance change"
Multisig keys,"Multisig keys. # Multisig keys This feature of allows users to securely control keys in a number of configurations. Using a threshold number K of maximum N keys, a user or group of users can set the minimum number of keys required to sign a transaction. Some examples of these configurations allow some useful features such as the choice of a spare key, where only one key is required to sign (K=1) but there are two keys available to do so. Another more complex example configuration is set out below."
Multisig keys,"Creating a multisig key. ,Example instantiation of a multisig key: This example represents a shared multisig key that could be used within a business amongst three account holders - where at least two of three (K=2) must sign off on each transaction. You will need the address of the business_key later in the example. Here just a reminder how to get it:"
Multisig keys,"Signing and broadcasting multisig transactions. ,Multisig transaction example: It is important to note that this method of signing transactions can apply to all types of transaction. ,Other multisig transaction examples:"
archived-networks,archived-networks. 
archived-networks,"Mainnet Archives. ,Fetchhub-3 archive: | Parameter | Value | | -------------- | ---------------------------------------------------------------------------------------- | | Chain ID | fetchhub-3 | | Block range | 4,504,601 --> 5,300,200 | | Date range | 08/02/2022 --> 05/04/2022 | | Denomination | afet | | Decimals | 18 (1fet = 1000000000000000000afet) | | Version | v0.9.1 at https://github.com/fetchai/fetchd/releases/tag/v0.9.1 | | RPC Endpoint | <https://rpc-fetchhub3-archive.fetch.ai:443> | | GRPC Endpoint | <https://grpc-fetchhub3-archive.fetch.ai:443> | | REST Endpoint | <https://rest-fetchhub3-archive.fetch.ai:443> | | Block Explorer | https://explore-fetchhub3-archive.fetch.ai at https://explore-fetchhub3-archive.fetch.ai | | Token Faucet | N/A | | Seed Node(s) | N/A | | Snapshots | <https://storage.googleapis.com/fetch-ai-mainnet-snapshots/fetchhub-3-archive.tgz> | ,Fetchhub-2 archive: | Parameter | Value | | -------------- | ---------------------------------------------------------------------------------------- | | Chain ID | fetchhub-2 | | Block range | 2,436,701 --> 4,504,600 | | Date range | 15/09/2021 --> 08/02/2022 | | Denomination | afet | | Decimals | 18 (1fet = 1000000000000000000afet) | | Version | v0.8.7 at https://github.com/fetchai/fetchd/releases/tag/v0.8.7 | | RPC Endpoint | <https://rpc-fetchhub2-archive.fetch.ai:443> | | GRPC Endpoint | <https://grpc-fetchhub2-archive.fetch.ai:443> | | REST Endpoint | <https://rest-fetchhub2-archive.fetch.ai:443> | | Block Explorer | https://explore-fetchhub2-archive.fetch.ai at https://explore-fetchhub2-archive.fetch.ai | | Token Faucet | N/A | | Seed Node(s) | N/A | | Snapshots | <https://storage.googleapis.com/fetch-ai-mainnet-snapshots/fetchhub-2-archive.tgz> | ,Fetchhub-1 archive: | Parameter | Value | | -------------- | ---------------------------------------------------------------------------------------- | | Chain ID | fetchhub-1 | | Block range | 1 --> 2,436,700 | | Date range | 31/03/2021 --> 15/09/2021 | | Denomination | afet | | Decimals | 18 (1fet = 1000000000000000000afet) | | Version | v0.7.4 at https://github.com/fetchai/fetchd/releases/tag/v0.7.4 | | RPC Endpoint | <https://rpc-fetchhub1-archive.fetch.ai:443> | | GRPC Endpoint | N/A | | REST Endpoint | <https://rest-fetchhub1-archive.fetch.ai:443> | | Block Explorer | https://explore-fetchhub1-archive.fetch.ai at https://explore-fetchhub1-archive.fetch.ai | | Token Faucet | N/A | | Seed Node(s) | N/A | | Snapshots | <https://storage.googleapis.com/fetch-ai-mainnet-snapshots/fetchhub-1-archive.tgz> |"
Token Faucet,"Token Faucet. # Token Faucet For our test networks, we have a simple token faucet implemented to allow users of the network to get started quickly. You can send it an account address, and it will transfer some test token on it. Token Faucets are network specific, depending on the network type they may or may not be deployed. Please check the networks at ../live-networks/ page for specific details. The Token Faucet itself is available from the network block explorer ( button on the homepage). Enter your address in the popup and click *Add funds* button. Wait a few blocks for the transaction to be processed, and you should see it appear along with some funds on your account."
Token Faucet,"Add funds to Wallet using faucet APIs:. ,Get some atestfet: ,Get some nanomobx: ,Get some ulrn: ,Sample response for fund request to faucet: ,Check the wallet balance:"
Joining a testnet,Joining a testnet. # Joining a testnet In order to join the test network you will need to have the correct version of the fetchd ledger available on your system.
Joining a testnet,"Using a local version. ,Configuring the client fetchd: In general to configure the CLI to point at a given network it needs as a minimum the following configuration values ,Dorado example: In the case of the Dorado network this would be as follows: ,Configuring the server : Initialize fetchd by running command. This setups a default / empty genesis configuration. > This will initialize default configuration files under the folder, which default to . Execute the following command to download the latest genesis file: Finally connect fetchd to the network by getting it to connect to a seed node for the given network. **Dorado Example** Less abstractly then, if you wants to connect to the Dorado test net for example, you would need to run the following steps: Your local node will then start to synchronise itself with the network, replaying all blocks and transactions up to the current block. Depending on the age of the network and your hard disk speed, this could take a while. Consider using chain snapshots at ../snapshots/ to speed up this process. To know when your node as finished syncing, you can query it's status from its RPC API:"
Chain State Snapshots,"Chain State Snapshots. # Chain State Snapshots As blockchains get longer, the process of syncing from the genesis block begins to take many hours, or even days to complete. In circumstances where a faster sync is required, various snapshots of the fetchd chain state data are available for download, to more quickly bootstrap a node. Snapshots are available for both mainnet and the most recent testnet. The URLs can be obtained from the network page at ../live-networks/. We aim to update snapshots on a daily basis. The example below uses the pruned mainnet snapshot, but can be adapted as required for full or archive nodes."
Chain State Snapshots,"Using a snapshot. ,Stop your node: If you are already running fetchd, it is important that you stop it before proceeding. Instructions for this are highly installation dependent and beyond the scope of this document, but could be as simple as a Ctrl-C. If you have not already initialised your node, follow the instructions for joining a testnet at ../joining-a-testnet/ (modifying for mainnet as appropriate), then return to this page before starting fetchd. ,Reset your node: WARNING: This will irreversibly erase your node's state database. Ensure you take whatever backups you deem appropriate before proceeding. If using fetchd <= 0.10.3 If using fetchd >= 0.10.4 ,Download and install the snapshot: Many options here! The example below assumes a bash-like environment, uses a single connection for downloading, confirms the md5sum of the downloaded data against that of the original, and does not land the original compressed data to disk. This is a good starting point, but depending on your local environment you may wish to make adaptations that eg sacrifice disk space and extra md5sum complexity for the benefit of parallel downloads with aria2. Entirely up to you... let us know how you get on! ,Restart your node: Again, this entirely depends on your local installation, but a simple example for mainnet might be... . `"
CLI - Delegator guide,CLI - Delegator guide. # CLI - Delegator guide
CLI - Delegator guide,"Querying the state. ,Querying the current staking holdings of the validators: The following command can be used to retrieve the current staking holdings of all validators: On network, this will produce an output similar to the following, describing the status of all the existing validators: To obtain the same information for a single validator, use the following command, providing the of the validator. A delegator will be particularly interested in the following keys: - : The commission rate on revenue charged to any delegator by the validator. - : The maximum daily increase of the validator's commission. This parameter cannot be changed by the validator operator. - : The maximum commission rate this validator can charge. This parameter cannot be changed by the validator operator. - : Minimum amount of the validator need to have bonded at all time. If the validator's self-bonded stake falls below this limit, their entire staking pool (i.e. all its delegators) will unbond. This parameter exists as a safeguard for delegators. Indeed, when a validator misbehaves, part of their total stake gets slashed. This includes the validator's self-delegateds stake as well as their delegators' stake. Thus, a validator with a high amount of self-delegated has more skin-in-the-game than a validator with a low amount. The minimum self-bond amount parameter guarantees to delegators that a validator will never fall below a certain amount of self-bonded stake, thereby ensuring a minimum level of skin-in-the-game. This parameter can only be increased by the validator operator. ,Query the delegations made to a validator: From a validator address, we can retrieve the list of delegations it received: Here is a sample of delegations received on : ,Query the redelegations: Delegators can choose to redelegate the tokens they already delegated from one validator to another. Redelegation takes effect immediately, without any waiting period. However, the tokens can't be redelegated until the initial redelegation transaction has completed its 21 day completion time (the unlocking time is indicated by the field in the outputs below). To obtain the list of redelegations made from a validator, use the following command: This produces an output similar to the following, where delegator issued 2 redelegations from to : Similarly, the list of redelegations issued by a delegator can be obtained with the following: ,Query the user rewards: After having delegated some tokens to a validator, the user is eligible to a share of the rewards the validator collects. To retrieve all the outstanding rewards for an address, issue the following command: This address having delegated tokens to 2 validators on , produces the following output: Rewards can also be filtered for a given validator, like here: We now get only the reward from this validator:"
CLI - Delegator guide,"Delegator operations. ,Delegating tokens: To delegate tokens to the validator from the account , the following command can be used: This will prompt for confirmation before issuing a transaction. After the transaction gets processed, it should appear under the delegations of the validator. <div class=""admonition note""> <p class=""admonition-title"">Note</p> <p>Once delegated, tokens can only be <i>redelegated</i> to another validator, or <i>unbond</i> in order to be returned to their original account. It's important to note that those two operations take <b>21 days to complete</b>, period in which the involved tokens will be unavailable.</p> </div> ,Redelegating tokens: allows to transfer already delegated tokens from one validator to another. From the above example where we delegated to , we can now redelegate parts or all of those tokens to another validator. For example, we redelegate from to with the following command: This will prompt for confirmation and issue a new transaction once accepted. From here, inspecting the delegations from our account, we'll see that our delegated tokens are now: - to validator (our initial 1000000 minus the 400000 redelegated) - to validator Now those we redelegated can't be redelegated anymore for 21 days (the exact date can be found by querying the redelegation transaction, under the key). Note that it's still possible to unbond those tokens if needed. ,Unbonding tokens: At any time, we can transfer parts or all of our delegated tokens back to our account: Once again, this will prompt for confirmation and issue a transaction, initiating the transfer of from our stake on validator back to our account. Those tokens will then be available **after a 21 day period** (the exact date can be found by querying the redelegation transaction, under the key). ,Withdrawing rewards: In order to transfer rewards to the wallet, the following command can be used: It requires the validator address from where the reward is withdrawn, and the name of the account private key having delegated tokens to the validator. When having delegated tokens to multiple validators, all rewards can be claimed in a single command: The rewards then appears on the account as soon as the transaction is processed."
CLI - Managing Tokens,CLI - Managing Tokens. # CLI - Managing Tokens
CLI - Managing Tokens,Querying your balance. Once is configured for the desired network at ../cli-introduction/. The user can query their balance using the following command: If the address exists on the network then the user will expect to see an output in the following form:
CLI - Managing Tokens,"Sending funds. Before sending funds, make sure the sender address has tokens available by querying your balance as shown above. Checkout the Token Faucet at ../faucet/ page for more information on how to add test tokens to your address. To send funds from one address to another address then you would use the subcommand. As shown below: In a more concrete example if the user wanted to send from key/address to then the following command would be used. When you run the command you will get a similar output and prompt. The user can check the details of the transfer and then press 'y' to confirm the transfer. Once the transfer has been made a summary is presented to the user. An example is shown below: On failure, the response will have a non zero code, as well as some logs under the key:"
Running a Single Node Network,"Running a Single Node Network. # Running a Single Node Network Especially for things like contract development, it can be very useful to be able to run a single node network for testing. This document will outline the steps that are required in order to configure a network of 1 node."
Running a Single Node Network,"Network Setup. These steps only need to be done once in order to setup the local network. **Step 1 - Build the ledger from source** Follow the build instructions at ../building/ in order to compile the latest version of the ledger. **Step 2 - Remove any existing networks** Since we are starting a new network we need to remove any local files that we have in our system from a previous network **Step 3 - Create an initial genesis** Create the initial genesis file () with the following command: * is the chain id * is the moniker for the node If you want to make any updates to the genesis, it is a good opportunity to make these updates now. **Step 4 - Create your validator key** In the following steps we will need to create the public/private keypair for our node. To create a new key called ""validator"" use the following command. * is the name of the key in the keyring For more information checkout the complete documentation on keys at ../cli-keys/. **Step 5 - Adding the validator to the network** To set the initial state for the network use the following command. This allocates tokens to the validator which can be bonded. is the default test token denomination in the cosmos ecosystem, but you could use , etc. **Step 6 - Generating a validator transaction** To get your validator to sign the genesis block (and to agree that this is the correct genesis starting point) use the following command. * here is the name that you have given to the key **Step 7 - Building the complete genesis** To build final genesis configuration for the network run the following command After running this command the network is successfully configured and you have computed the final genesis configuration for the network."
Running a Single Node Network,Running the local node. To run the network use the following command.
Running a Single Node Network,"Resetting the network. Often you will want to clear out all the data from the network and start again. To do that in a local network simply run the following command: This resets the chain back to genesis, you **DO NOT** need to perform the network setup steps again. After running this command you can simply run the command again."
