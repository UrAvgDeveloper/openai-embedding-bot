title,text
aea.testtools.testcases,"aea.testtools.testcases. <a id=""aea.test_tools.test_cases""></a> # aea.testtools.testcases This module contains test case classes based on pytest for AEA end-to-end testing. <a id=""aea.test_tools.test_cases.BaseAEATestCase""></a>"
aea.testtools.testcases,"BaseAEATestCase Objects. Base class for AEA test cases. <a id=""aea.test_tools.test_cases.BaseAEATestCase.set_agent_context""></a> #### setagentcontext Set the current agent context. <a id=""aea.test_tools.test_cases.BaseAEATestCase.unset_agent_context""></a> #### unsetagentcontext Unset the current agent context. <a id=""aea.test_tools.test_cases.BaseAEATestCase.set_config""></a> #### setconfig Set a config. Run from agent's directory. **Arguments**: - : str dotted path to config param. - : a new value to set. - : the type **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.nested_set_config""></a> #### nestedsetconfig Force set config. <a id=""aea.test_tools.test_cases.BaseAEATestCase.disable_aea_logging""></a> #### disableaealogging Disable AEA logging of specific agent. Run from agent's directory. <a id=""aea.test_tools.test_cases.BaseAEATestCase.run_cli_command""></a> #### runclicommand Run AEA CLI command. **Arguments**: - : CLI args - : the working directory from where to run the command. - : other keyword arguments to click.CliRunner.invoke. **Raises**: - : if command fails. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.start_subprocess""></a> #### startsubprocess Run python with args as subprocess. **Arguments**: - : CLI args - : the current working directory **Returns**: subprocess object. <a id=""aea.test_tools.test_cases.BaseAEATestCase.start_thread""></a> #### startthread Start python Thread. **Arguments**: - : target method. - : thread keyword arguments **Returns**: thread <a id=""aea.test_tools.test_cases.BaseAEATestCase.create_agents""></a> #### createagents Create agents in current working directory. **Arguments**: - : str agent names. - : a flag for local folder add True by default. - : optional boolean flag for skip adding default dependencies. <a id=""aea.test_tools.test_cases.BaseAEATestCase.fetch_agent""></a> #### fetchagent Create agents in current working directory. **Arguments**: - : str public id - : str agent name. - : a flag for local folder add True by default. <a id=""aea.test_tools.test_cases.BaseAEATestCase.difference_to_fetched_agent""></a> #### differencetofetchedagent Compare agent against the one fetched from public id. **Arguments**: - : str public id - : str agent name. **Returns**: list of files differing in the projects <a id=""aea.test_tools.test_cases.BaseAEATestCase.delete_agents""></a> #### deleteagents Delete agents in current working directory. **Arguments**: - : str agent names. <a id=""aea.test_tools.test_cases.BaseAEATestCase.run_agent""></a> #### runagent Run agent as subprocess. Run from agent's directory. **Arguments**: - : CLI args **Returns**: subprocess object. <a id=""aea.test_tools.test_cases.BaseAEATestCase.run_interaction""></a> #### runinteraction Run interaction as subprocess. Run from agent's directory. **Returns**: subprocess object. <a id=""aea.test_tools.test_cases.BaseAEATestCase.terminate_agents""></a> #### terminateagents Terminate agent subprocesses. Run from agent's directory. **Arguments**: - : the subprocesses running the agents - : the timeout for interruption <a id=""aea.test_tools.test_cases.BaseAEATestCase.is_successfully_terminated""></a> #### issuccessfullyterminated Check if all subprocesses terminated successfully. <a id=""aea.test_tools.test_cases.BaseAEATestCase.initialize_aea""></a> #### initializeaea Initialize AEA locally with author name. <a id=""aea.test_tools.test_cases.BaseAEATestCase.add_item""></a> #### additem Add an item to the agent. Run from agent's directory. **Arguments**: - : str item type. - : public id of the item. - : a flag for local folder add True by default. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.remove_item""></a> #### removeitem Remove an item from the agent. Run from agent's directory. **Arguments**: - : str item type. - : public id of the item. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.scaffold_item""></a> #### scaffolditem Scaffold an item for the agent. Run from agent's directory. **Arguments**: - : str item type. - : name of the item. - : if True, skip consistency check. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.fingerprint_item""></a> #### fingerprintitem Fingerprint an item for the agent. Run from agent's directory. **Arguments**: - : str item type. - : public id of the item. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.eject_item""></a> #### ejectitem Eject an item in the agent in quiet mode (i.e. no interaction). Run from agent's directory. **Arguments**: - : str item type. - : public id of the item. **Returns**: None <a id=""aea.test_tools.test_cases.BaseAEATestCase.run_install""></a> #### runinstall Execute AEA CLI install command. Run from agent's directory. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.generate_private_key""></a> #### generateprivatekey Generate AEA private key with CLI command. Run from agent's directory. **Arguments**: - : ledger API ID. - : the private key file. - : the password. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.add_private_key""></a> #### addprivatekey Add private key with CLI command. Run from agent's directory. **Arguments**: - : ledger API ID. - : private key filepath. - : whether or not the private key filepath is for a connection. - : the password to encrypt private keys. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.remove_private_key""></a> #### removeprivatekey Remove private key with CLI command. Run from agent's directory. **Arguments**: - : ledger API ID. - : whether or not the private key filepath is for a connection. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.replace_private_key_in_file""></a> #### replaceprivatekeyinfile Replace the private key in the provided file with the provided key. **Arguments**: - : the private key - : the filepath to the private key file **Raises**: - : exception if file does not exist <a id=""aea.test_tools.test_cases.BaseAEATestCase.generate_wealth""></a> #### generatewealth Generate wealth with CLI command. Run from agent's directory. **Arguments**: - : ledger API ID. - : the password. **Returns**: Result <a id=""aea.test_tools.test_cases.BaseAEATestCase.get_wealth""></a> #### getwealth Get wealth with CLI command. Run from agent's directory. **Arguments**: - : ledger API ID. - : the password to encrypt/decrypt private keys. **Returns**: command line output <a id=""aea.test_tools.test_cases.BaseAEATestCase.get_address""></a> #### getaddress Get address with CLI command. Run from agent's directory. **Arguments**: - : ledger API ID. - : the password to encrypt/decrypt private keys. **Returns**: command line output <a id=""aea.test_tools.test_cases.BaseAEATestCase.replace_file_content""></a> #### replacefilecontent Replace the content of the source file to the destination file. **Arguments**: - : the source file. - : the destination file. <a id=""aea.test_tools.test_cases.BaseAEATestCase.change_directory""></a> #### changedirectory Change current working directory. **Arguments**: - : path to the new working directory. <a id=""aea.test_tools.test_cases.BaseAEATestCase.send_envelope_to_agent""></a> #### sendenvelopetoagent Send an envelope to an agent, using the stub connection. <a id=""aea.test_tools.test_cases.BaseAEATestCase.read_envelope_from_agent""></a> #### readenvelopefromagent Read an envelope from an agent, using the stub connection. <a id=""aea.test_tools.test_cases.BaseAEATestCase.missing_from_output""></a> #### missingfromoutput Check if strings are present in process output. Read process stdout in thread and terminate when all strings are present or timeout expired. **Arguments**: - : agent subprocess. - : tuple of strings expected to appear in output. - : int amount of seconds before stopping check. - : int period of checking. - : whether or not the agents are terminated **Returns**: list of missed strings. <a id=""aea.test_tools.test_cases.BaseAEATestCase.is_running""></a> #### isrunning Check if the AEA is launched and running (ready to process messages). **Arguments**: - : agent subprocess. - : the timeout to wait for launch to complete **Returns**: bool indicating status <a id=""aea.test_tools.test_cases.BaseAEATestCase.invoke""></a> #### invoke Call the cli command. <a id=""aea.test_tools.test_cases.BaseAEATestCase.load_agent_config""></a> #### loadagentconfig Load agent configuration. <a id=""aea.test_tools.test_cases.BaseAEATestCase.setup_class""></a> #### setupclass Set up the test class. <a id=""aea.test_tools.test_cases.BaseAEATestCase.teardown_class""></a> #### teardownclass Teardown the test. <a id=""aea.test_tools.test_cases.AEATestCaseEmpty""></a>"
aea.testtools.testcases,"AEATestCaseEmpty Objects. Test case for a default AEA project. This test case will create a default AEA project. <a id=""aea.test_tools.test_cases.AEATestCaseEmpty.setup_class""></a> #### setupclass Set up the test class. <a id=""aea.test_tools.test_cases.AEATestCaseEmpty.teardown_class""></a> #### teardownclass Teardown the test class. <a id=""aea.test_tools.test_cases.AEATestCaseEmptyFlaky""></a>"
aea.testtools.testcases,"AEATestCaseEmptyFlaky Objects. Test case for a default AEA project. This test case will create a default AEA project. Use for flaky tests with the flaky decorator. <a id=""aea.test_tools.test_cases.AEATestCaseEmptyFlaky.setup_class""></a> #### setupclass Set up the test class. <a id=""aea.test_tools.test_cases.AEATestCaseEmptyFlaky.teardown_class""></a> #### teardownclass Teardown the test class. <a id=""aea.test_tools.test_cases.AEATestCaseMany""></a>"
aea.testtools.testcases,"AEATestCaseMany Objects. Test case for many AEA projects. <a id=""aea.test_tools.test_cases.AEATestCaseMany.setup_class""></a> #### setupclass Set up the test class. <a id=""aea.test_tools.test_cases.AEATestCaseMany.teardown_class""></a> #### teardownclass Teardown the test class. <a id=""aea.test_tools.test_cases.AEATestCaseManyFlaky""></a>"
aea.testtools.testcases,AEATestCaseManyFlaky Objects. 
aea.testtools.testcases,"AEATestCase Objects. Test case from an existing AEA project. Subclass this class and set properly. By default, it is assumed the project is inside the current working directory. <a id=""aea.test_tools.test_cases.AEATestCase.setup_class""></a> #### setupclass Set up the test class. <a id=""aea.test_tools.test_cases.AEATestCase.teardown_class""></a> #### teardownclass Teardown the test class."
aea.testtools.testskill,"aea.testtools.testskill. <a id=""aea.test_tools.test_skill""></a> # aea.testtools.testskill This module contains test case classes based on pytest for AEA skill testing. <a id=""aea.test_tools.test_skill.BaseSkillTestCase""></a>"
aea.testtools.testskill,"BaseSkillTestCase Objects. A class to test a skill. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.skill""></a> #### skill Get the skill. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.get_quantity_in_outbox""></a> #### getquantityinoutbox Get the quantity of envelopes in the outbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.get_message_from_outbox""></a> #### getmessagefromoutbox Get message from outbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.drop_messages_from_outbox""></a> #### dropmessagesfromoutbox Dismiss the first 'number' number of message from outbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.get_quantity_in_decision_maker_inbox""></a> #### getquantityindecisionmakerinbox Get the quantity of messages in the decision maker inbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.get_message_from_decision_maker_inbox""></a> #### getmessagefromdecisionmakerinbox Get message from decision maker inbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.drop_messages_from_decision_maker_inbox""></a> #### dropmessagesfromdecisionmakerinbox Dismiss the first 'number' number of message from decision maker inbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.assert_quantity_in_outbox""></a> #### assertquantityinoutbox Assert the quantity of messages in the outbox. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.assert_quantity_in_decision_making_queue""></a> #### assertquantityindecisionmakingqueue Assert the quantity of messages in the decision maker queue. <a id=""aea.test_tools.test_skill.BaseSkillTestCase.message_has_attributes""></a> #### messagehasattributes Evaluates whether a message's attributes match the expected attributes provided. **Arguments**: - : the actual message - : the expected message type - : other expected message attributes **Returns**: boolean result of the evaluation and accompanied message <a id=""aea.test_tools.test_skill.BaseSkillTestCase.build_incoming_message""></a> #### buildincomingmessage Quickly create an incoming message with the provided attributes. For any attribute not provided, the corresponding default value in message is used. **Arguments**: - : the type of the message - : the dialogue_reference - : the message_id - : the target - : the performative - : the 'to' address - : the 'sender' address - : whether the dialogue is between agents or components - : other attributes **Returns**: the created incoming message <a id=""aea.test_tools.test_skill.BaseSkillTestCase.build_incoming_message_for_skill_dialogue""></a> #### buildincomingmessageforskilldialogue Quickly create an incoming message with the provided attributes for a dialogue. For any attribute not provided, a value based on the dialogue is used. These values are shown in parentheses in the list of parameters below. NOTE: This method must be used with care. The dialogue provided is part of the skill which is being tested. Because for any unspecified attribute, a ""correct"" value is used, the test will be, by design, insured to pass on these values. **Arguments**: - : the dialogue to which the incoming message is intended - : the performative of the message - : (the message_class of the provided dialogue) the type of the message - : (the dialogue_reference of the provided dialogue) the dialogue reference of the message - : (the id of the last message in the provided dialogue + 1) the id of the message - : (the id of the last message in the provided dialogue) the target of the message - : (the agent address associated with this skill) the receiver of the message - : (the counterparty in the provided dialogue) the sender of the message - : other attributes **Returns**: the created incoming message <a id=""aea.test_tools.test_skill.BaseSkillTestCase.prepare_skill_dialogue""></a> #### prepareskilldialogue Quickly create a dialogue. The 'messages' argument is a tuple of DialogueMessages. For every DialogueMessage (performative, contents, is_incoming, target): - if 'is_incoming' is not provided: for the first message it is assumed False (outgoing), for any other message, it is the opposite of the one preceding it. - if 'target' is not provided: for the first message it is assumed 0, for any other message, it is the index of the message before it in the tuple of messages + 1. **Arguments**: - : a dialogues class - : the message_id - : the dialogue_reference - : whether the dialogue is between agents or components **Returns**: the created incoming message <a id=""aea.test_tools.test_skill.BaseSkillTestCase.setup""></a> #### setup Set up the skill test case."
plugins.aea-cli-ipfs.aeacliipfs.core,"plugins.aea-cli-ipfs.aeacliipfs.core. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.core""></a> # plugins.aea-cli-ipfs.aeacliipfs.core Core components for . <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.core.ipfs""></a> #### ipfs IPFS Commands <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.core.process_result""></a> #### processresult Tear down command group. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.core.add""></a> #### add Add directory to ipfs, if not directory specified the current one will be added. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.core.remove""></a> #### remove Remove a directory from ipfs by it's hash. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.core.download""></a> #### download Download directory by it's hash, if not target directory specified will use current one."
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"plugins.aea-cli-ipfs.aeacliipfs.ipfsutils. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils""></a> # plugins.aea-cli-ipfs.aeacliipfs.ipfsutils Ipfs utils for . <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSDaemon""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"IPFSDaemon Objects. Set up the IPFS daemon. **Raises**: - : if IPFS is not installed. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSDaemon.__init__""></a> #### init Initialise IPFS daemon. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSDaemon.is_started""></a> #### isstarted Check daemon was started. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSDaemon.start""></a> #### start Run the ipfs daemon. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSDaemon.stop""></a> #### stop Terminate the ipfs daemon. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.BaseIPFSToolException""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"BaseIPFSToolException Objects. Base ipfs tool exception. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.RemoveError""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"RemoveError Objects. Exception on remove. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.PublishError""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"PublishError Objects. Exception on publish. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.NodeError""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"NodeError Objects. Exception for node connection check. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.DownloadError""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"DownloadError Objects. Exception on download failed. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool""></a>"
plugins.aea-cli-ipfs.aeacliipfs.ipfsutils,"IPFSTool Objects. IPFS tool to add, publish, remove, download directories. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool.__init__""></a> #### init Init tool. **Arguments**: - : dict, options for ipfshttpclient instance. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool.add""></a> #### add Add directory to ipfs. It wraps into directory. **Arguments**: - : str, path to dir to publish - : bool, pin object or not **Returns**: dir name published, hash, list of items processed <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool.remove""></a> #### remove Remove dir added by it's hash. **Arguments**: - : str. hash of dir to remove **Returns**: dict with unlinked items. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool.download""></a> #### download Download dir by it's hash. **Arguments**: - : str. hash of file to download - : str. directory to place downloaded - : bool. default True. on download don't wrap result in to hash_id directory. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool.publish""></a> #### publish Publish directory by it's hash id. **Arguments**: - : hash of the directory to publish. **Returns**: dict of names it was publish for. <a id=""plugins.aea-cli-ipfs.aea_cli_ipfs.ipfs_utils.IPFSTool.chec_ipfs_node_running""></a> #### checipfsnoderunning Check ipfs node running."
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"plugins.aea-ledger-ethereum.aealedgerethereum.ethereum. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum""></a> # plugins.aea-ledger-ethereum.aealedgerethereum.ethereum Ethereum module wrapping the public and private key cryptography and ledger api. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.get_gas_price_strategy""></a> #### getgaspricestrategy Get the gas price strategy. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.SignedTransactionTranslator""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"SignedTransactionTranslator Objects. Translator for SignedTransaction. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.SignedTransactionTranslator.to_dict""></a> #### todict Write SignedTransaction to dict. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.SignedTransactionTranslator.from_dict""></a> #### fromdict Get SignedTransaction from dict. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.AttributeDictTranslator""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"AttributeDictTranslator Objects. Translator for AttributeDict. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.AttributeDictTranslator.to_dict""></a> #### todict Simplify to dict. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.AttributeDictTranslator.from_dict""></a> #### fromdict Get back attribute dict. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"EthereumCrypto Objects. Class wrapping the Account Generation from Ethereum ledger. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.__init__""></a> #### init Instantiate an ethereum crypto object. **Arguments**: - : the private key path of the agent - : the password to encrypt/decrypt the private key. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.private_key""></a> #### privatekey Return a private key. **Returns**: a private key string <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.public_key""></a> #### publickey Return a public key in hex format. **Returns**: a public key string in hex format <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.address""></a> #### address Return the address for the key pair. **Returns**: a display_address str <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.load_private_key_from_path""></a> #### loadprivatekeyfrompath Load a private key in hex format from a file. **Arguments**: - : the path to the hex file. - : the password to encrypt/decrypt the private key. **Returns**: the Entity. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.sign_message""></a> #### signmessage Sign a message in bytes string form. **Arguments**: - : the message to be signed - : if the deprecated signing is used **Returns**: signature of the message in string form <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.sign_transaction""></a> #### signtransaction Sign a transaction in bytes string form. **Arguments**: - : the transaction to be signed **Returns**: signed transaction <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.generate_private_key""></a> #### generateprivatekey Generate a key pair for ethereum network. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.encrypt""></a> #### encrypt Encrypt the private key and return in json. **Arguments**: - : the password to decrypt. **Returns**: json string containing encrypted private key. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumCrypto.decrypt""></a> #### decrypt Decrypt the private key and return in raw form. **Arguments**: - : json str containing encrypted private key. - : the password to decrypt. **Returns**: the raw private key. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"EthereumHelper Objects. Helper class usable as Mixin for EthereumApi or as standalone class. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.is_transaction_settled""></a> #### istransactionsettled Check whether a transaction is settled or not. **Arguments**: - : the receipt associated to the transaction. **Returns**: True if the transaction has been settled, False o/w. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.get_contract_address""></a> #### getcontractaddress Retrieve the from a transaction receipt. **Arguments**: - : the receipt of the transaction. **Returns**: the contract address, if present <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.is_transaction_valid""></a> #### istransactionvalid Check whether a transaction is valid or not. **Arguments**: - : the transaction. - : the address of the seller. - : the address of the client. - : the transaction nonce. - : the amount we expect to get from the transaction. **Returns**: True if the random_message is equals to tx['input'] <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.generate_tx_nonce""></a> #### generatetxnonce Generate a unique hash to distinguish transactions with the same terms. **Arguments**: - : the address of the seller. - : the address of the client. **Returns**: return the hash in hex. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.get_address_from_public_key""></a> #### getaddressfrompublickey Get the address from the public key. **Arguments**: - : the public key **Returns**: str <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.recover_message""></a> #### recovermessage Recover the addresses from the hash. **Arguments**: - : the message we expect - : the transaction signature - : if the deprecated signing was used **Returns**: the recovered addresses <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.recover_public_keys_from_message""></a> #### recoverpublickeysfrommessage Get the public key used to produce the of the **Arguments**: - : raw bytes used to produce signature - : signature of the message - : if the deprecated signing was used **Returns**: the recovered public keys <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.get_hash""></a> #### gethash Get the hash of a message. **Arguments**: - : the message to be hashed. **Returns**: the hash of the message. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumHelper.load_contract_interface""></a> #### loadcontractinterface Load contract interface. **Arguments**: - : the file path to the interface **Returns**: the interface <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"EthereumApi Objects. Class to interact with the Ethereum Web3 APIs. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.__init__""></a> #### init Initialize the Ethereum ledger APIs. **Arguments**: - : keyword arguments <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.api""></a> #### api Get the underlying API object. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_balance""></a> #### getbalance Get the balance of a given account. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_state""></a> #### getstate Call a specified function on the ledger API. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_transfer_transaction""></a> #### gettransfertransaction Submit a transfer transaction to the ledger. **Arguments**: - : the sender address of the payer. - : the destination address of the payee. - : the amount of wealth to be transferred (in Wei). - : the transaction fee (gas) to be used (in Wei). - : verifies the authenticity of the tx. - : the Chain ID of the Ethereum transaction. - : the gas price (in Wei) - : the gas price strategy to be used. - : keyword arguments **Returns**: the transfer transaction <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.update_with_gas_estimate""></a> #### updatewithgasestimate Attempts to update the transaction with a gas estimate **Arguments**: - : the transaction **Returns**: the updated transaction <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.send_signed_transaction""></a> #### sendsignedtransaction Send a signed transaction and wait for confirmation. **Arguments**: - : the signed transaction **Returns**: tx_digest, if present <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_transaction_receipt""></a> #### gettransactionreceipt Get the transaction receipt for a transaction digest. **Arguments**: - : the digest associated to the transaction. **Returns**: the tx receipt, if present <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_transaction""></a> #### gettransaction Get the transaction for a transaction digest. **Arguments**: - : the digest associated to the transaction. **Returns**: the tx, if present <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_contract_instance""></a> #### getcontractinstance Get the instance of a contract. **Arguments**: - : the contract interface. - : the contract address. **Returns**: the contract instance <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.get_deploy_transaction""></a> #### getdeploytransaction Get the transaction to deploy the smart contract. **Arguments**: - : the contract interface. - : The address that will deploy the contract. - : value to send to contract (in Wei) - : the gas to be used (in Wei) - : the gas price (in Wei) - : the gas price strategy to be used. - : keyword arguments **Returns**: the transaction dictionary. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumApi.is_valid_address""></a> #### isvalidaddress Check if the address is valid. **Arguments**: - : the address to validate **Returns**: whether the address is valid <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumFaucetApi""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"EthereumFaucetApi Objects. Ethereum testnet faucet API. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.EthereumFaucetApi.get_wealth""></a> #### getwealth Get wealth from the faucet for the provided address. **Arguments**: - : the address. - : the url <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.LruLockWrapper""></a>"
plugins.aea-ledger-ethereum.aealedgerethereum.ethereum,"LruLockWrapper Objects. Wrapper for LRU with threading.Lock. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.LruLockWrapper.__init__""></a> #### init Init wrapper. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.LruLockWrapper.__getitem__""></a> #### getitem Get item <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.LruLockWrapper.__setitem__""></a> #### setitem Set item. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.LruLockWrapper.__contains__""></a> #### contains Contain item. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.LruLockWrapper.__delitem__""></a> #### delitem Del item. <a id=""plugins.aea-ledger-ethereum.aea_ledger_ethereum.ethereum.set_wrapper_for_web3py_session_cache""></a> #### setwrapperforweb3pysessioncache Wrap web3py session cache with threading.Lock."
plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos,"plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos""></a> # plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos Cosmos module wrapping the public and private key cryptography and ledger api. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.DataEncrypt""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos,"DataEncrypt Objects. Class to encrypt/decrypt data strings with password provided. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.DataEncrypt.encrypt""></a> #### encrypt Encrypt data with password. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.DataEncrypt.bytes_encode""></a> #### bytesencode Encode bytes to ascii friendly string. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.DataEncrypt.bytes_decode""></a> #### bytesdecode Decode ascii friendly string to bytes. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.DataEncrypt.decrypt""></a> #### decrypt Decrypt data with password provided. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos,"CosmosHelper Objects. Helper class usable as Mixin for CosmosApi or as standalone class. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.is_transaction_settled""></a> #### istransactionsettled Check whether a transaction is settled or not. **Arguments**: - : the receipt of the transaction. **Returns**: True if the transaction has been settled, False o/w. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.get_code_id""></a> #### getcodeid Retrieve the from a transaction receipt. **Arguments**: - : the receipt of the transaction. **Returns**: the code id, if present <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.get_event_attributes""></a> #### geteventattributes Retrieve events attributes from tx receipt. **Arguments**: - : the receipt of the transaction. **Returns**: dict <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.get_contract_address""></a> #### getcontractaddress Retrieve the from a transaction receipt. **Arguments**: - : the receipt of the transaction. **Returns**: the contract address, if present <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.is_transaction_valid""></a> #### istransactionvalid Check whether a transaction is valid or not. **Arguments**: - : the transaction. - : the address of the seller. - : the address of the client. - : the transaction nonce. - : the amount we expect to get from the transaction. **Returns**: True if the random_message is equals to tx['input'] <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.generate_tx_nonce""></a> #### generatetxnonce Generate a unique hash to distinguish transactions with the same terms. **Arguments**: - : the address of the seller. - : the address of the client. **Returns**: return the hash in hex. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.get_address_from_public_key""></a> #### getaddressfrompublickey Get the address from the public key. **Arguments**: - : the public key **Returns**: str <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.recover_message""></a> #### recovermessage Recover the addresses from the hash. **Arguments**: - : the message we expect - : the transaction signature - : if the deprecated signing was used **Returns**: the recovered addresses <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.recover_public_keys_from_message""></a> #### recoverpublickeysfrommessage Get the public key used to produce the of the **Arguments**: - : raw bytes used to produce signature - : signature of the message - : if the deprecated signing was used **Returns**: the recovered public keys <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.get_hash""></a> #### gethash Get the hash of a message. **Arguments**: - : the message to be hashed. **Returns**: the hash of the message. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.is_valid_address""></a> #### isvalidaddress Check if the address is valid. **Arguments**: - : the address to validate **Returns**: whether address is valid or not <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosHelper.load_contract_interface""></a> #### loadcontractinterface Load contract interface. **Arguments**: - : the file path to the interface **Returns**: the interface <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos,"CosmosCrypto Objects. Class wrapping the Account Generation from Ethereum ledger. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.__init__""></a> #### init Instantiate an ethereum crypto object. **Arguments**: - : the private key path of the agent - : the password to encrypt/decrypt the private key. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.private_key""></a> #### privatekey Return a private key. **Returns**: a private key string <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.public_key""></a> #### publickey Return a public key in hex format. **Returns**: a public key string in hex format <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.address""></a> #### address Return the address for the key pair. **Returns**: a display_address str <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.load_private_key_from_path""></a> #### loadprivatekeyfrompath Load a private key in hex format from a file. **Arguments**: - : the path to the hex file. - : the password to encrypt/decrypt the private key. **Returns**: the Entity. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.sign_message""></a> #### signmessage Sign a message in bytes string form. **Arguments**: - : the message to be signed - : if the deprecated signing is used **Returns**: signature of the message in string form <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.sign_transaction""></a> #### signtransaction Sign a transaction in bytes string form. **Arguments**: - : the transaction to be signed **Returns**: signed transaction <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.generate_private_key""></a> #### generateprivatekey Generate a key pair for cosmos network. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.encrypt""></a> #### encrypt Encrypt the private key and return in json. **Arguments**: - : the password to decrypt. **Returns**: json string containing encrypted private key. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosCrypto.decrypt""></a> #### decrypt Decrypt the private key and return in raw form. **Arguments**: - : json string containing encrypted private key. - : the password to decrypt. **Returns**: the raw private key. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos._CosmosApi""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos,"CosmosApi Objects. Class to interact with the Cosmos SDK via a HTTP APIs. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosFaucetApi""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.cosmos,"CosmosFaucetApi Objects. Cosmos testnet faucet API. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosFaucetApi.__init__""></a> #### init Initialize CosmosFaucetApi. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai._cosmos.CosmosFaucetApi.get_wealth""></a> #### getwealth Get wealth from the faucet for the provided address. **Arguments**: - : the address. - : the url **Raises**: - : RuntimeError of explicit faucet failures"
plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai,"plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai.fetchai""></a> # plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai Fetchai module wrapping the public and private key cryptography and ledger api. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai.fetchai.FetchAIHelper""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai,"FetchAIHelper Objects. Helper class usable as Mixin for FetchAIApi or as standalone class. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai.fetchai.FetchAICrypto""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai,"FetchAICrypto Objects. Class wrapping the Entity Generation from Fetch.AI ledger. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai.fetchai.FetchAIApi""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai,"FetchAIApi Objects. Class to interact with the Fetch ledger APIs. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai.fetchai.FetchAIApi.__init__""></a> #### init Initialize the Fetch.ai ledger APIs. <a id=""plugins.aea-ledger-fetchai.aea_ledger_fetchai.fetchai.FetchAIFaucetApi""></a>"
plugins.aea-ledger-fetchai.aealedgerfetchai.fetchai,FetchAIFaucetApi Objects. Fetchai testnet faucet API.
plugins.aea-ledger-cosmos.aealedgercosmos.cosmos,"plugins.aea-ledger-cosmos.aealedgercosmos.cosmos. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos""></a> # plugins.aea-ledger-cosmos.aealedgercosmos.cosmos Cosmos module wrapping the public and private key cryptography and ledger api. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.DataEncrypt""></a>"
plugins.aea-ledger-cosmos.aealedgercosmos.cosmos,"DataEncrypt Objects. Class to encrypt/decrypt data strings with password provided. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.DataEncrypt.encrypt""></a> #### encrypt Encrypt data with password. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.DataEncrypt.bytes_encode""></a> #### bytesencode Encode bytes to ascii friendly string. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.DataEncrypt.bytes_decode""></a> #### bytesdecode Decode ascii friendly string to bytes. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.DataEncrypt.decrypt""></a> #### decrypt Decrypt data with password provided. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper""></a>"
plugins.aea-ledger-cosmos.aealedgercosmos.cosmos,"CosmosHelper Objects. Helper class usable as Mixin for CosmosApi or as standalone class. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.is_transaction_settled""></a> #### istransactionsettled Check whether a transaction is settled or not. **Arguments**: - : the receipt of the transaction. **Returns**: True if the transaction has been settled, False o/w. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.get_code_id""></a> #### getcodeid Retrieve the from a transaction receipt. **Arguments**: - : the receipt of the transaction. **Returns**: the code id, if present <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.get_event_attributes""></a> #### geteventattributes Retrieve events attributes from tx receipt. **Arguments**: - : the receipt of the transaction. **Returns**: dict <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.get_contract_address""></a> #### getcontractaddress Retrieve the from a transaction receipt. **Arguments**: - : the receipt of the transaction. **Returns**: the contract address, if present <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.is_transaction_valid""></a> #### istransactionvalid Check whether a transaction is valid or not. **Arguments**: - : the transaction. - : the address of the seller. - : the address of the client. - : the transaction nonce. - : the amount we expect to get from the transaction. **Returns**: True if the random_message is equals to tx['input'] <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.generate_tx_nonce""></a> #### generatetxnonce Generate a unique hash to distinguish transactions with the same terms. **Arguments**: - : the address of the seller. - : the address of the client. **Returns**: return the hash in hex. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.get_address_from_public_key""></a> #### getaddressfrompublickey Get the address from the public key. **Arguments**: - : the public key **Returns**: str <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.recover_message""></a> #### recovermessage Recover the addresses from the hash. **Arguments**: - : the message we expect - : the transaction signature - : if the deprecated signing was used **Returns**: the recovered addresses <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.recover_public_keys_from_message""></a> #### recoverpublickeysfrommessage Get the public key used to produce the of the **Arguments**: - : raw bytes used to produce signature - : signature of the message - : if the deprecated signing was used **Returns**: the recovered public keys <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.get_hash""></a> #### gethash Get the hash of a message. **Arguments**: - : the message to be hashed. **Returns**: the hash of the message. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.is_valid_address""></a> #### isvalidaddress Check if the address is valid. **Arguments**: - : the address to validate **Returns**: whether address is valid or not <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosHelper.load_contract_interface""></a> #### loadcontractinterface Load contract interface. **Arguments**: - : the file path to the interface **Returns**: the interface <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto""></a>"
plugins.aea-ledger-cosmos.aealedgercosmos.cosmos,"CosmosCrypto Objects. Class wrapping the Account Generation from Ethereum ledger. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.__init__""></a> #### init Instantiate an ethereum crypto object. **Arguments**: - : the private key path of the agent - : the password to encrypt/decrypt the private key. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.private_key""></a> #### privatekey Return a private key. **Returns**: a private key string <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.public_key""></a> #### publickey Return a public key in hex format. **Returns**: a public key string in hex format <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.address""></a> #### address Return the address for the key pair. **Returns**: a display_address str <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.load_private_key_from_path""></a> #### loadprivatekeyfrompath Load a private key in hex format from a file. **Arguments**: - : the path to the hex file. - : the password to encrypt/decrypt the private key. **Returns**: the Entity. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.sign_message""></a> #### signmessage Sign a message in bytes string form. **Arguments**: - : the message to be signed - : if the deprecated signing is used **Returns**: signature of the message in string form <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.sign_transaction""></a> #### signtransaction Sign a transaction in bytes string form. **Arguments**: - : the transaction to be signed **Returns**: signed transaction <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.generate_private_key""></a> #### generateprivatekey Generate a key pair for cosmos network. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.encrypt""></a> #### encrypt Encrypt the private key and return in json. **Arguments**: - : the password to decrypt. **Returns**: json string containing encrypted private key. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosCrypto.decrypt""></a> #### decrypt Decrypt the private key and return in raw form. **Arguments**: - : json string containing encrypted private key. - : the password to decrypt. **Returns**: the raw private key. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos._CosmosApi""></a>"
plugins.aea-ledger-cosmos.aealedgercosmos.cosmos,"CosmosApi Objects. Class to interact with the Cosmos SDK via a HTTP APIs. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosFaucetApi""></a>"
plugins.aea-ledger-cosmos.aealedgercosmos.cosmos,"CosmosFaucetApi Objects. Cosmos testnet faucet API. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosFaucetApi.__init__""></a> #### init Initialize CosmosFaucetApi. <a id=""plugins.aea-ledger-cosmos.aea_ledger_cosmos.cosmos.CosmosFaucetApi.get_wealth""></a> #### getwealth Get wealth from the faucet for the provided address. **Arguments**: - : the address. - : the url **Raises**: - : RuntimeError of explicit faucet failures"
aea.configurations.validation,"aea.configurations.validation. <a id=""aea.configurations.validation""></a> # aea.configurations.validation Implementation of the configuration validation. <a id=""aea.configurations.validation.make_jsonschema_base_uri""></a> #### makejsonschemabaseuri Make the JSONSchema base URI, cross-platform. **Arguments**: - : the path to the base directory. **Returns**: the string in URI form. <a id=""aea.configurations.validation.ExtraPropertiesError""></a>"
aea.configurations.validation,"ExtraPropertiesError Objects. Extra properties exception. <a id=""aea.configurations.validation.ExtraPropertiesError.__str__""></a> #### str Get string representation of the object. <a id=""aea.configurations.validation.ExtraPropertiesError.__repr__""></a> #### repr Get string representation of the object. <a id=""aea.configurations.validation.CustomTypeChecker""></a>"
aea.configurations.validation,"CustomTypeChecker Objects. Custom type checker to handle env variables. <a id=""aea.configurations.validation.CustomTypeChecker.is_type""></a> #### istype Check is instance of type. <a id=""aea.configurations.validation.own_additional_properties""></a> #### ownadditionalproperties Additional properties validator. <a id=""aea.configurations.validation.ConfigValidator""></a>"
aea.configurations.validation,"ConfigValidator Objects. Configuration validator implementation. <a id=""aea.configurations.validation.ConfigValidator.__init__""></a> #### init Initialize the parser for configuration files. **Arguments**: - : the path to the JSON-schema file in 'aea/configurations/schemas'. - : whether or not it is env var friendly. <a id=""aea.configurations.validation.ConfigValidator.split_component_id_and_config""></a> #### splitcomponentidandconfig Split component id and configuration. **Arguments**: - : the position of the component configuration in the agent config file.. - : the JSON object to process. **Raises**: - : if the component id cannot be extracted. **Returns**: the component id and the configuration object. <a id=""aea.configurations.validation.ConfigValidator.validate_component_configuration""></a> #### validatecomponentconfiguration Validate the component configuration of an agent configuration file. This check is to detect inconsistencies in the specified fields. **Arguments**: - : the component id. - : the configuration dictionary. - : bool, if set True, will not raise errors over the env variable definitions. **Raises**: - : if the configuration is not valid. <a id=""aea.configurations.validation.ConfigValidator.validate""></a> #### validate Validate a JSON object against the right JSON schema. **Arguments**: - : the JSON data. <a id=""aea.configurations.validation.ConfigValidator.validate_agent_components_configuration""></a> #### validateagentcomponentsconfiguration Validate agent component configurations overrides. **Arguments**: - : the component configurations to validate. <a id=""aea.configurations.validation.ConfigValidator.required_fields""></a> #### requiredfields Get the required fields. **Returns**: list of required fields. <a id=""aea.configurations.validation.validate_data_with_pattern""></a> #### validatedatawithpattern Validate data dict with pattern dict for attributes present and type match. **Arguments**: - : data dict to validate - : dict with pattern to check over - : list of tuples of str of paths to be skipped during the check - : is set True will not check data type over env variables. **Returns**: list of str with error descriptions <a id=""aea.configurations.validation.filter_data""></a> #### filterdata Return difference in values or object if values are the same."
aea.configurations.constants,"aea.configurations.constants. <a id=""aea.configurations.constants""></a> # aea.configurations.constants Module to declare constants."
