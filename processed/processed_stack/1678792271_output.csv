title,text
AEA Framework Documentation,"AEA Framework Documentation. # AEA Framework Documentation !!! target ""Vision"" Our aim with the AEA framework is to enable businesses of all sizes, from independent developers to large corporations and consortiums, to create and deploy agent-based solutions in various domains, thus contributing to and advancing a decentralized mixed-initiative economy: one whose actors are both humans and machines."
AEA Framework Documentation,"What is an AEA?. !!! info ""Definition"" An Autonomous Economic Agent (AEA) is an intelligent agent that acts on its owner's behalf, with limited or no interference, and whose goal is to generate economic value for its owner. Breaking it down: **AGENT**: An AEA represents an individual, organisation or object and looks after their interests. **AUTONOMOUS**: AEAs operate independently of constant input from their owners and act autonomously to achieve their goals. **ECONOMIC**: AEAs have a narrow and specific focus: creating economic value for their owner."
AEA Framework Documentation,"What Can You Do with AEAs?. [//]: # (AEAs have the potential of being the next ""apps"", by enabling p2p. Most importantly, ) Some examples of the kinds of applications you can build with AEAs: **Automation** : AEAs can automate well-defined processes in different domains, such as supply chain, mobility, finance, ... **Micro-transactions** : AEAs make it economically viable to execute trade involving small values. An example is use-cases with many small sellers (e.g. of data) on the supply side. **Wallet** : AEAs can simplify interactions with blockchains. By acting as ""smart wallets"", they can hide away the majority of the complexities involved in using blockchains for end users. **IoT** : Agents representing objects in the IoT (Internet of Things) space. For example, AEAs paired with hardware devices such as drones, laptops, heat sensors, etc., providing control and receiving data from the device. An example is a <a href=""thermometer-skills"">thermometer agent</a>. **Web 2.0 <--> Web 3.0 interface** : Agents that interface and bridge the gap between existing (Web 2.0) and new (Web 3.0) economic models. An example is an <a href=""http-connection-and-skill""> AEA that communicates with HTTP clients/servers</a>. **Traders** : Agents with access to some data sources that sell the data, access to the data, or access to the usage of the data. An example is an <a href=""ml-skills"">AEA that continuously sells data to another AEA</a>, who in turn uses it to improve their reinforcement learning model."
AEA Framework Documentation,"Who is This For?. The AEA technology is for anyone who wants to build or contribute to a ""mixed-initiative economy"": one whose actors are humans as well as machines. This includes (amongst others): developers, data scientists and machine learning experts, economists, students, academics and researchers (in Artificial Intelligence, Machine Learning, Multi-Agent Systems, etc), engineers, and so forth."
AEA Framework Documentation,"The AEA Framework. The AEA framework is a development suite which equips you with an efficient and accessible set of tools for building and running AEAs and their components. The framework attempts to make agent development as straightforward an experience as possible, similar to what popular web frameworks enable for web development. Some of the characteristics of the AEA framework are: - **Python**: Using Python as an approachable programming language improves the on-boarding for those who just want to get started with agent development. - **Open source**: The framework is open source and licensed under <a href=""https://github.com/fetchai/agents-aea/blob/main/LICENSE"" target=""_blank"">Apache 2.0</a>. - **Modular**: Modularity is at the heart of the framework's design. This makes it easy to extend the framework, add new functionality, and re-use others' contributions, therefore reducing the development cost. - **Blockchain ready**: Integration with blockchains is baked into the framework, enabling the creation of agents that take full advantage of the blockchain technology. - **Modern**: The framework is built from and can be integrated with the latest technologies (e.g. asynchronous programming, blockchains and smart contracts, machine-learning ready, ...)."
AEA Framework Documentation,"The Ecosystem. Though they can work in isolation, AEAs are truly valuable when situated in a wider ecosystem consisting of tools and infrastructure that enable them to cooperate and compete, and interact with services as well as traditional or modern systems. These include: - The <a href=""acn"">Agent Communication Network (ACN)</a>: A peer-to-peer communication infrastructure that enables AEAs to directly communicate with one another without any intermediaries. - The <a href=""simple-oef"">sOEF</a>: A search and discovery system allowing AEAs to register themselves and the services they offer, and search for agents who offer specific services. - The <a href=""https://aea-registry.fetch.ai/"" target=""_blank"">AEA Registry</a>: A space to store and share AEAs or individual agent components for anyone to find and use. - Blockchains: AEAs can use blockchains as a financial and commitment layer. Each <a href=""ledger-integration"">ledger plug-in</a> provided by the framework adds the ability for AEAs to interact with a specific ledger, such as the <a href=""https://docs.fetch.ai/ledger_v2/"" target=""_blank"">Fetch.ai blockchain</a> or <a href=""https://ethereum.org/en/"" target=""_blank"">Ethereum</a>. - Smart Contracts: <a href=""contract"">Contract packages</a> are wrappers around smart contracts that allow AEAs to interact with them through a common interface."
AEA Framework Documentation,"How to get involved?. There are many ways for you to get involved. You can create agents, develop new agent components, extend existing components, and contribute to the development of the framework or other related tools. Please refer to the <a href=""https://github.com/fetchai/agents-aea/blob/main/CONTRIBUTING.md"" target=""_blank"">Contribution</a> and <a href=""https://github.com/fetchai/agents-aea/blob/main/DEVELOPING.md"" target=""_blank"">Development</a> guides."
AEA Framework Documentation,"Next Steps. To get started developing your own AEA, check out the <a href=""quickstart"">getting started</a> section. To learn more about some of the distinctive characteristics of agent-oriented development, check out the guide on <a href=""agent-oriented-development"">agent-oriented development</a>. If you would like to develop an AEA in a language different to Python then check out our <a href=""language-agnostic-definition"">language agnostic AEA definition</a>. If you want to run a demo, check out the <a href=""demos"">demo guides</a>."
AEA Framework Documentation,"Help us Improve. !!! note This developer documentation is a work in progress. If you spot any errors please open an issue on <a href=""https://github.com/fetchai/agents-aea"" target=""_blank"">Github</a> or contact us in the <a href=""https://discord.com/invite/btedfjPJTj"" target=""_blank"">developer Discord channel</a>."
Modes of Running an AEA,"Modes of Running an AEA. # Modes of Running an AEA We can run an AEA in multiple modes thanks to the configurable design of the framework. The AEA contains two runnable parts, the , which operates the skills, and the Multiplexer, which operates the connections. The can be configured to run in or mode. The by default runs in mode. The AEA itself, can be configured to run in mode, if both the and have the same mode, or in mode. The latter ensures that and are run in separate threads."
CLI Commands,"CLI Commands. # CLI Commands | Command | Description | |-------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------| | | Add a connection, contract, protocol, or skill, with , to the AEA. to add from local directory. | | | Add a private key from a file for . | | | Build the agent and its components. | | | Reads the configuration specified in and prints its target. | | | Sets a new value for the target of the . Optionally cast to type. | | | Create a new AEA project called . | | | Delete an AEA project. See below for disabling a resource. | | | Move a package of and from vendor to project working directory. | | | Fetch an AEA project with . to fetch from local directory. | | | Fingerprint connection, contract, protocol, or skill, with . | | | Get all the dependencies needed for the AEA project and its components. | | | Generate a protocol from the specification. | | | Generate private keys. The AEA uses a private key to derive the associated public key and address. | | | Generate wealth for address on test network. | | | Get the address associated with the private key. | | | Get the multiaddress associated with a private key or connection. | | | Get the public key associated with a private key of the agent. | | | Get the wealth associated with the private key. | | | Initialize your AEA configurations. (With to define author.) | | | Install the dependencies. (With to install dependencies.) | | | Interact with a running AEA via the stub connection. | | | IPFS Commands | | | Issue the connection certificates. | | | Launch many agents at the same time. | | | List the installed resources. | | | Upgrade the local package registry. | | | Login to a registry account with credentials. | | | Logout from registry account. | | | Publish the AEA to registry. Needs to be executed from an AEA project. to publish to local directory. | | | Push connection, protocol, or skill with to registry. to push to local directory. | | | Create a new registry account. | | | Remove connection, protocol, or skill, called , from AEA. | | | Remove a private key registered with id . | | | Reset the password of the registry account. | | | Run the AEA on the Fetch.ai network with default or specified connections. | | | Scaffold a new connection, protocol, or skill called . | | | Search for components in the registry. to search in local directory. | | | Transfer wealth associated with a private key of the agent to another account. | | | Upgrade the packages of the agent. | | | Run with debugging. | <!-- Command | Description ---------| ----------------------------------------------------------------- | Deploy the AEA to a server and run it on the Fetch.ai network with default or specified connections. --> !!! tip You can also disable a resource without deleting it by removing the entry from the configuration but leaving the package in the namespace. !!! tip You can skip the consistency checks on the AEA project by using the flag . E.g. will bypass the fingerprint checks."
Aggregation Skill,Aggregation Skill. # Aggregation Skill This demo shows how AEAs can aggregate values over the peer-to-peer network.
Aggregation Skill,"Discussion. This demonstration shows how to set up a simple aggregation network in which several AEAs take an average of values fetched from different sources for the same real-world quantity. For this particular example, we take an average of Bitcoin prices from four public APIs."
Aggregation Skill,"Preparation Instructions. ,Dependencies: Follow the <a href=""../quickstart/#preliminaries"">Preliminaries</a> and <a href=""../quickstart/#installation"">Installation</a> sections from the AEA quick start."
Aggregation Skill,"Demo. ,Create the AEAs: Repeat the following process four times in four different terminals (for each {, , , }): Fetch the aggregator AEA: ??? note ""Alternatively, create from scratch:"" Create the AEA: Set the desired decimal precision for the quantity: Disable the http server since it is not used in this demo: Set the cert requests for the peer-to-peer connection: Match the agent index to the and below: - : - : - : - : Set the following configuration for the skill: Set the name of the quantity to aggregate and choose an aggregation function for the AEAs (the currently implemented options are , , and ): Specify a name for your aggregation service: Additionally, create private keys for use with the ledger and the peer-to-peer connection: Finally, certify the keys for use by the connections that request them: ,Configure the Peer-to-Peer Network: Set the multiaddress of the first AEA as an initial peer to help the remaining AEAs find each other on the network. Also, if these AEAs are all running on the same machine, set different ports for their connections to ensure there are no conflicts (from the , , and directories): ,Oracle Integration (optional): To publish the aggregated value to an oracle smart contract, add the ledger connection and simple oracle skill to one of the aggregators: Configure the simple oracle skill for the ledger: Generate some wealth to use for transactions on the testnet ledger: Set the name of the oracle value to match the value collected by the aggregators: ,Run the AEAs: Run each of the aggregator AEAs in separate terminals: After a few moments, you should see the AEAs finding peers, making observations, sending them to peers, and taking the average of their observations:"
File Structure,"File Structure. # File Structure An agent that is generated using the AEA framework is a modular system with different connections, contracts, protocols and skills."
File Structure,"An AEA Project's File Structure. The file structure of an AEA is fixed. The top level directory has the AEA's name. Below is a configuration file, then directories containing the connections, contracts, protocols, and skills developed by the developer as part of the given project. The connections, contracts, protocols and skills used from the registry (local or remote - added via or ) are located in and sorted by author. Build artefacts are placed in the directory and certificates are placed in the directory. Finally, there are files containing the private keys of the AEA. When we create a new agent with the command we create the file structure that looks like the following: The developer can create new directories where necessary but the core structure must remain the same."
File Structure,"AEA Configuration YAML. The is the top level configuration file of an AEA. It defines the global configurations as well as the component/package dependencies of the AEA. In some sense, the AEA can therefore be understood as an orchestrator of components. For the AEA to use a package, the for the package must be listed in the file, e.g. The above shows a part of the . If you see the connections, you will see that we follow a pattern of to identify each package, also referred to as . Here the is the author of the package."
File Structure,"Vendor and Package Directories. The folder contains the packages from the registry (local or remote) which have been developed by ourselves, other authors or Fetch.ai and are placed in different namespaces according to the author name. The packages we develop as part of the given AEA project are in the respective , , , and folders. In the above configuration example, the package is authored by Fetch.ai and is located inside the folder."
File Structure,"Importing Modules from Packages. The way we import modules from packages inside the agent is in the form of . So for the above example, the import path is . The framework loads the modules from the local agent project and adds them to Python's under the respective path. We use a custom package management approach for the AEAs rather than the default Python one as it provides us with more flexibility, especially when it comes to extension beyond the Python ecosystem."
File Structure,Python Dependencies of Packages. Python dependencies of packages are specified in their respective configuration files under . They will be installed when is run on an agent project.
File Structure,"Create a Package. If you want to create a package, you can use the <a href=""../scaffolding/"">CLI command</a> and this will create the package and put it inside the respective folder based on the command for example if we skill with the name it will be located inside the folder skills in the root directory of the agent ()."
File Structure,"Use Published Packages from the Registry. If you want to use a finished package, you can use a package from the registry. There or two registries. The remote registry operated by Fetch.ai and a local registry stub. The local registry stub is a directory called which contains packages in a nested structure with authors on the top level, followed by the package type, then package name. An example of such a directory is the directory located in the AEA repository. The local registry is useful for development. You can use the CLI to interact with the registry. By default, the CLI points to the remote registry. You can point it to the local registry via the flag ."
File Structure,"Package Versioning. By default, the AEA can only handle one version per package. That is, a project should never use both and . If two AEA packages with the same author and name but different versions are used in the same Python process, then only the code from one of the packages (generally not deterministic) will be available in . This can lead to inconsistencies and exceptions at runtime."
Relationship with the Twelve-Factor App Methodology,"Relationship with the Twelve-Factor App Methodology. # Relationship with the Twelve-Factor App Methodology The <a href=""https://12factor.net/"" target=""_blank"">Twelve-Factor App</a> is a set of best practices to build modern web applications, or *software-as-a-service*. In this section, we will see how the AEA framework facilitates the achievement of those in the development, release and deployment phases of an AEA project. Note that an AEA instance, as a software agent, can be seen as a more general case of a web app, as it not only shows reactive behaviour, but it is also *proactive*, depending on the goals assigned to it."
Relationship with the Twelve-Factor App Methodology,"Codebase. !!! info ""Factor 1"" One codebase tracked in revision control, many deploys Support: Excellent The framework does not impose any particular requirement or convention on the type of version control software to be used to store an AEA project."
Relationship with the Twelve-Factor App Methodology,"Dependencies. !!! info ""Factor 2"" Explicitly declare and isolate dependencies Support: Good The framework allows an AEA project to explicitly declare the AEA package dependencies, and the PyPI dependencies needed to proper working. However, it does not provide built-in support for checking platform-specific dependencies, e.g. specific Python version, or needed system-wide available libraries. Nevertheless, this can be indirectly achieved by means of build scripts called on , which can do the checks manually according to the specific requirements of the project."
Relationship with the Twelve-Factor App Methodology,"Configuration. !!! info ""Factor 3"" Store configuration in the environment Support: Good An AEA project can specify an environment configuration file , stored in the project root, that the framework will use to update environment variables before the execution of the AEA instance. The CLI tool command accepts the option to change the default configuration file. However, the framework does not automatically switch between, nor allows to add, different types of configuration files, one for each deployment step (e.g. development, staging, production), without using the option."
Relationship with the Twelve-Factor App Methodology,"Backing Services. !!! info ""Factor 4"" Treat backing services as attached resources Support: Good A persistent storage of an AEA can be seen as an attached resource in the 12-factor terminology. The default storage is SQLite, but the interface allows to implement specific wrappers to other backing services, without changing the AEA project code. The support for integrating different storage back-end implementations in an AEA project by using a plug-in mechanism is currently missing. Moreover, new adapters to backing services can be implemented as custom connections, which can connect to attached resources. This does not usually require a change in the skill code, especially in the case when a custom protocol can abstract the details of the interaction with the specific resource."
Relationship with the Twelve-Factor App Methodology,"Build, Release, Run. !!! info ""Factor 5"" Strictly separate build and run stages Support: Excellent The phases of build, release and run of an AEA project are neatly separated, both for programmatic usage and through the usage of the CLI tool, as each of them corresponds to different subcommands."
Relationship with the Twelve-Factor App Methodology,Processes. 
Relationship with the Twelve-Factor App Methodology,"Port Binding. !!! info ""Factor 7"" Export services via port binding Support: Excellent An AEA project may not need to expose services via HTTP. This property depends on the specific choices of the project developer, and the framework does not impose any restriction. One of the provided package, the ""HTTP server"" connection, relies on , which makes the connection completely self-contained—therefore, it satisfies the requirement. Another relevant example is the ACN node, which exposes its service to the Libp2p AEA connection"
Relationship with the Twelve-Factor App Methodology,"Concurrency. !!! info ""Factor 8"" Scale out via the process model Support: Not Supported The framework does not easily allow to scale up an AEA instance with multiple processes, as it is bound to a process. However, note that its attached services can live in a different process, which could give better scalability."
Relationship with the Twelve-Factor App Methodology,"Disposability. of an AEA instance depends, in general, on the AEA itself; whether the connections can be quickly connected and disconnected, whether skills can be easily torn down or not, whether other resources can be detached successfully like the persistent storage, just to name a few examples. There has been put some effort into reducing startup time, and to ensure that a graceful shut-down can happen when the process receives a SIGTERM under normal circumstances, but robustness cannot be ensured for individual components, as it depends on their implementation. Additionally, the framework does provide some features to control some aspects of AEA disposability, e.g. the possibility to change execution timeout for behaviours or handlers, implementation of an effective exception propagation from a component code to the main agent loop."
Relationship with the Twelve-Factor App Methodology,"Dev/Prod Parity. !!! info ""Factor 10"" Keep development, staging, and production as similar as possible Support: Good This aspect mostly depends on the specific AEA project, and the framework does not impose particular restrictions on best deployment practices (e.g. continuous integration, same backing services between development and production stages)."
Relationship with the Twelve-Factor App Methodology,"Logs. !!! info ""Factor 11"" Treat logs as event streams Support: Excellent Thanks to the seamless integration with the Python standard library , the developer or the deployer has great control on the routing and filtering of log records. The behaviour can be changed by providing a proper configuration in the AEA project configuration file, according to the standard library specification. The framework facilitates this by creating ad-hoc logger names that can be used for finer-grained routing or filtering; for example, each AEA instance uses its own logging namespace to send logging events. Integration with other log handlers is delegated to extensions of the standard library, hence not necessarily coupled with the AEA framework."
Relationship with the Twelve-Factor App Methodology,"Admin Processes. !!! info ""Factor 12"" Run admin/management tasks as one-off processes Support: Good The CLI tool provides commands to manage private keys and ledger related operations, and it is possible to extend it with a plugin to manage databases of AEA's persistent storage for maintenance operations. Moreover, the Python programming language makes it easy to run one-off scripts or running a console (also known as REPL) to do management tasks. It follows that it is also easy to ensure dependency isolation and same configurations of the running AEA instance."
The Query Language,"The Query Language. # The Query Language We recommend reading <a href=""../defining-data-models"">Defining a Data Model</a> before reading this section. Along with the Data Model language, the AEA framework offers the possibility to specify _queries_ defined over data models. The module implements the API that allows you to build queries. In one sentence, a <a href=""../api/helpers/search/models#query-objects""></a> is a set of _constraints_, defined over a _data model_. The outcome is a set of _description_ (that is, instances of <a href=""../api/helpers/search/models#description-objects""></a>) _matching_ with the query. That is, all the description whose attributes satisfy the constraints in the query. In the next sections, we describe how to build queries."
The Query Language,"Constraints. ,Relation: There are several <a href=""../api/helpers/search/models#constrainttype-objects""></a> that allows you to impose specific values for the attributes. The types of relation constraints are: - Equal: - Not Equal: - Less than: - Less than or Equal: - Greater than: - Greater than or Equal: **Examples**: using the attributes we used before: ,Set: The _set_ is a constraint type that allows you to restrict the values of the attribute in a specific set. There are two kind of _set_ constraints: - In (a set of values): - Not in (a set of values): **Examples**: HorrorScience fictionNon-fiction"
The Query Language,"Range. ,Distance: The _distance_ is a constraint type that allows you to put a limit on a <a href=""../api/helpers/search/models#location-objects""></a> attribute type. More specifically, you can set a maximum distance from a given location (the _centre_), such that will be considered only the instances whose location attribute value is within a distance from the centre. **Examples**: TrueFalse"
The Query Language,"Constraint Expressions. ,Not:,And: The is a constraint type that allows you to specify a conjunction of constraints over an attribute. That is, the constraint is satisfied whenever all the subexpressions that constitute the _and_ are satisfied. Notice: the number of subexpressions must be **at least** 2. **Example**: ,Or: The class is a constraint type that allows you to specify a disjunction of constraints. That is, the constraint is satisfied whenever at least one of the constraints that constitute the is satisfied. Notice: the number of subexpressions must be **at least** 2. **Example**:"
The Query Language,"Queries. ,The check Method: The class supports a way to check whether a matches with the query. This method is called . Examples: Description ,Validity: A object must satisfy some conditions in order to be instantiated. - The list of constraints expressions can't be empty; must have at least one constraint expression. - If the data model is specified: - For every constraint expression that constitute the query, check if they are _valid with respect to the data model_. A (that is, one of , , , ) is _valid with respect to a_ if: - If is an instance of , or , then every subexpression of must be valid (with respect to the data model); - If is an instance of , then: - if the constraint type is one of , , , , the value in the constructor must be one of , or . - if the constraint type is a , then the types in the range must be one of , , or . - if the constraint type is a , then the only valid type is . - if the constraint type is a , then the types supported are , , , , . Notice though that a set of bool is trivial, so you may find yourself more comfortable by using other alternatives. - for the other constraint types, i.e. and , the value can be one of the allowed types for , that is , , , , . - Moreover, when is a , the attribute must have a consistent type with respect to the data model. E.g. consider a like: Consider a where there is an of type . Then the constraint is not compatible with the mentioned data model, because the constraint expect an equality comparison with a boolean , instead of a ."
Car park skills,Car park skills. # Car park skills The AEA car-park skills demonstrate an interaction between two AEAs. - The AEA provides information on the number of car parking spaces available in a given vicinity. - The AEA is interested in purchasing information on available car parking spaces in the same vicinity.
Car park skills,"Discussion. The full Fetch.ai car park AEA demo is documented in its own repo <a href=""https://github.com/fetchai/carpark_agent"" target=""_blank"">here</a>. This demo allows you to test the AEA functionality of the car park AEA demo without the detection logic. It demonstrates how the AEAs trade car park information."
Car park skills,Communication. This diagram shows the communication between the various entities as data is successfully sold by the car park AEA to the client.
Car park skills,"Option 1: AEA Manager Approach. ,Preparation Instructions: Install the <a href=""https://aea-manager.fetch.ai"" target=""_blank"">AEA Manager</a>. ,Demo Instructions: The following steps assume you have launched the AEA Manager Desktop app. 1. Add a new AEA called with public id . 2. Add another new AEA called with public id . 3. Copy the address from the into your clip board. Then go to the <a href=""https://explore-dorado.fetch.ai"" target=""_blank"">Dorado block explorer</a> and request some test tokens via . 4. Run the AEA. Navigate to its logs and copy the multiaddress displayed. 5. Navigate to the settings of the and under update as follows (make sure to replace the placeholder with the multiaddress): 6. Run the . In the AEA's logs, you should see the agent trading successfully."
Car park skills,"Option 2: CLI Approach. ,Preparation Instructions: #### Dependencies Follow the <a href=""../quickstart/#preliminaries"">Preliminaries</a> and <a href=""../quickstart/#installation"">Installation</a> sections from the AEA quick start. ,Demo Instructions: #### Create Car Detector AEA First, fetch the car detector AEA: ??? note ""Alternatively, create from scratch:"" The following steps create the car detector from scratch: #### Create Car Data Buyer AEA Then, fetch the car data client AEA: ??? note ""Alternatively, create from scratch:"" The following steps create the car data client from scratch: #### Add Keys for the Car Data Seller AEA First, create the private key for the car data seller AEA based on the network you want to transact. To generate and add a private-public key pair for Fetch.ai use: Next, create a private key used to secure the AEA's communications: Finally, certify the key for use by the connections that request that: #### Add Keys and Generate Wealth for the Car Data Buyer AEA The buyer needs to have some wealth to purchase the service from the seller. First, create the private key for the car data buyer AEA based on the network you want to transact. To generate and add a private-public key pair for Fetch.ai use: Then, create some wealth for your car data buyer based on the network you want to transact with. On the Fetch.ai network: Next, create a private key used to secure the AEA's communications: Finally, certify the key for use by the connections that request that: ,Run the AEAs: Run both AEAs from their respective terminals. First, run the car data seller AEA: Once you see a message of the form take note of the address. (Alternatively, use to retrieve the address.) This is the entry peer address for the local <a href=""../acn"">agent communication network</a> created by the car data seller. Then, in the car data buyer, run this command (replace with the correct value as described above): This allows the car data buyer to connect to the same local agent communication network as the car data seller. Then run the buyer AEA: You will see that the AEAs negotiate and then transact using the Fetch.ai testnet. #### Cleaning up When you're finished, delete your AEAs:"
Contract Deploy and Interact,"Contract Deploy and Interact. # Contract Deploy and Interact The AEA and skills demonstrate an interaction between two AEAs which use a smart contract. - The skill deploys the smart contract, creates and mints items. - The skill signs a transaction to complete a trustless trade with its counterparty."
Contract Deploy and Interact,"Preparation Instructions. ,Dependencies: Follow the <a href=""../quickstart/#preliminaries"">Preliminaries</a> and <a href=""../quickstart/#installation"">Installation</a> sections from the AEA quick start."
Contract Deploy and Interact,"Discussion. The scope of this guide is demonstrating how you can deploy a smart contract and interact with it using AEAs. In this specific demo, you create two AEAs. One deploys and creates tokens inside a smart contract. The other signs a transaction to complete an atomic swap. The smart contract used is ERC1155 with a one-step atomic swap functionality. This means the trade between the two AEAs can be trustless. !!! note This is only for demonstrative purposes since the AEA deploying the contract also has the ability to mint tokens. In reality, the transfer of tokens from the AEA signing the transaction is worthless."
Contract Deploy and Interact,"Demo. ,Create the Deployer AEA: Fetch the AEA that will deploy the contract: ??? note ""Alternatively, create from scratch:"" Create the AEA that will deploy the contract. And change the default ledger: Create a private key for the deployer AEA and add it for Ethereum use: Create a private key for the P2P connection: Finally, certify the key for use by the connections that request that: ,Create the Client AEA: In another terminal, fetch the client AEA which will receive some tokens from the deployer. ??? note ""Alternatively, create from scratch:"" Create the AEA that will get some tokens from the deployer. And change the default ledger: Create a private key for the client AEA and add it for Ethereum use: Create a private key for the P2P connection: Finally, certify the key for use by the connections that request that:"
Contract Deploy and Interact,"Run Ganache. Execute the following command to run Ganache: Wait some time for the wealth creation to be mined on Ropsten. Check your wealth: You should get . !!! note If no wealth appears after a while, then try funding the private key directly using a web faucet."
Contract Deploy and Interact,Update SOEF Configurations for both AEAs. Update the SOEF configuration in both AEA projects:
Contract Deploy and Interact,"Run the AEAs. First, run the deployer AEA: Once you see a message of the form take note of this address. Alternatively, use to retrieve the address. The output will be something like . This is the entry peer address for the local <a href=""../acn"">agent communication network</a> created by the deployer. This AEA then performs the following steps: - deploys the smart contract - creates a batch of items in the smart contract - mints a batch of items in the smart contract At some point you should see the log output: At this point, configure the client AEA to connect to the same local ACN created by the deployer by running the following command in the client's terminal, replacing with the value you noted above: Then, run the client AEA: You will see that after discovery, the two AEAs exchange information about the transaction and the client at the end signs and sends the signature to the deployer AEA to send it to the network. !!! note Transactions on Ropsten can take a significant amount of time! If you run the example a second time, and the previous transaction is still pending, it can lead to a failure. The warning message can be ignored."
Contract Deploy and Interact,"Delete the AEAs. When you're done, stop the agents (), go up a level and delete the AEAs."
Contract Deploy and Interact,Communication. This diagram shows the communication between the various entities in this interaction:
Upgrading,Upgrading. # Upgrading This page provides some tips on
Upgrading, to . your connections via the . You must update your connections as the old implementation is no longer supported.
