title,text
aea.crypto.plugin,"aea.crypto.plugin. <a id=""aea.crypto.plugin""></a> # aea.crypto.plugin Implementation of plug-in mechanism for cryptos. <a id=""aea.crypto.plugin.Plugin""></a>"
aea.crypto.plugin,"Plugin Objects. Class that implements an AEA plugin. <a id=""aea.crypto.plugin.Plugin.__init__""></a> #### init Initialize the plugin. **Arguments**: - : the group the plugin belongs to. - : the entrypoint. <a id=""aea.crypto.plugin.Plugin.name""></a> #### name Get the plugin identifier. <a id=""aea.crypto.plugin.Plugin.group""></a> #### group Get the group. <a id=""aea.crypto.plugin.Plugin.attr""></a> #### attr Get the class name. <a id=""aea.crypto.plugin.Plugin.entry_point_path""></a> #### entrypointpath Get the entry point path. <a id=""aea.crypto.plugin.load_all_plugins""></a> #### loadallplugins Load all plugins."
aea.crypto.base,"aea.crypto.base. <a id=""aea.crypto.base""></a> # aea.crypto.base Abstract module wrapping the public and private key cryptography and ledger api. <a id=""aea.crypto.base.Crypto""></a>"
aea.crypto.base,"Crypto Objects. Base class for a crypto object. <a id=""aea.crypto.base.Crypto.__init__""></a> #### init Initialize the crypto object. The actual behaviour of this constructor is determined by the abstract methods 'generate_private_key()' and 'load_private_key_from_path(). Either way, the entity object will be accessible as a property. **Arguments**: - : the path to the private key. If None, the key will be generated by 'generate_private_key()'. If not None, the path will be processed by 'load_private_key_from_path()'. - : the password to encrypt/decrypt the private key. - : keyword arguments. <a id=""aea.crypto.base.Crypto.generate_private_key""></a> #### generateprivatekey Generate a private key. **Returns**: the entity object. Implementation dependent. <a id=""aea.crypto.base.Crypto.load_private_key_from_path""></a> #### loadprivatekeyfrompath Load a private key in hex format for raw private key and json format for encrypted private key from a file. **Arguments**: - : the path to the hex/json file. - : the password to encrypt/decrypt the private key. **Returns**: the entity object. <a id=""aea.crypto.base.Crypto.entity""></a> #### entity Return an entity object. **Returns**: an entity object <a id=""aea.crypto.base.Crypto.private_key""></a> #### privatekey Return a private key. **Returns**: a private key string <a id=""aea.crypto.base.Crypto.public_key""></a> #### publickey Return a public key. **Returns**: a public key string <a id=""aea.crypto.base.Crypto.address""></a> #### address Return the address. **Returns**: an address string <a id=""aea.crypto.base.Crypto.sign_message""></a> #### signmessage Sign a message in bytes string form. **Arguments**: - : the message to be signed - : if the deprecated signing is used **Returns**: signature of the message in string form <a id=""aea.crypto.base.Crypto.sign_transaction""></a> #### signtransaction Sign a transaction in dict form. **Arguments**: - : the transaction to be signed **Returns**: signed transaction <a id=""aea.crypto.base.Crypto.load""></a> #### load Load private key from file. **Arguments**: - : the file where the key is stored. - : the password to encrypt/decrypt the private key. **Returns**: private_key in hex string format <a id=""aea.crypto.base.Crypto.dump""></a> #### dump Dump private key to file. **Arguments**: - : the file where the key is stored. - : the password to encrypt/decrypt the private key. <a id=""aea.crypto.base.Crypto.encrypt""></a> #### encrypt Encrypt the private key and return in json. **Arguments**: - : the password to decrypt. **Returns**: json string containing encrypted private key. <a id=""aea.crypto.base.Crypto.decrypt""></a> #### decrypt Decrypt the private key and return in raw form. **Arguments**: - : json string containing encrypted private key. - : the password to decrypt. **Returns**: the raw private key. <a id=""aea.crypto.base.Helper""></a>"
aea.crypto.base,"Helper Objects. Interface for helper class usable as Mixin for LedgerApi or as standalone class. <a id=""aea.crypto.base.Helper.is_transaction_settled""></a> #### istransactionsettled Check whether a transaction is settled or not. **Arguments**: - : the receipt associated to the transaction. **Returns**: True if the transaction has been settled, False o/w. <a id=""aea.crypto.base.Helper.is_transaction_valid""></a> #### istransactionvalid Check whether a transaction is valid or not. **Arguments**: - : the transaction. - : the address of the seller. - : the address of the client. - : the transaction nonce. - : the amount we expect to get from the transaction. **Returns**: True if the random_message is equals to tx['input'] <a id=""aea.crypto.base.Helper.get_contract_address""></a> #### getcontractaddress Get the contract address from a transaction receipt. **Arguments**: - : the transaction digest **Returns**: the contract address if successful <a id=""aea.crypto.base.Helper.generate_tx_nonce""></a> #### generatetxnonce Generate a unique hash to distinguish transactions with the same terms. **Arguments**: - : the address of the seller. - : the address of the client. **Returns**: return the hash in hex. <a id=""aea.crypto.base.Helper.get_address_from_public_key""></a> #### getaddressfrompublickey Get the address from the public key. **Arguments**: - : the public key **Returns**: str <a id=""aea.crypto.base.Helper.recover_message""></a> #### recovermessage Recover the addresses from the hash. **Arguments**: - : the message we expect - : the transaction signature - : if the deprecated signing was used **Returns**: the recovered addresses <a id=""aea.crypto.base.Helper.recover_public_keys_from_message""></a> #### recoverpublickeysfrommessage Get the public key used to produce the of the **Arguments**: - : raw bytes used to produce signature - : signature of the message - : if the deprecated signing was used **Returns**: the recovered public keys <a id=""aea.crypto.base.Helper.get_hash""></a> #### gethash Get the hash of a message. **Arguments**: - : the message to be hashed. **Returns**: the hash of the message. <a id=""aea.crypto.base.Helper.is_valid_address""></a> #### isvalidaddress Check if the address is valid. **Arguments**: - : the address to validate <a id=""aea.crypto.base.Helper.load_contract_interface""></a> #### loadcontractinterface Load contract interface. **Arguments**: - : the file path to the interface **Returns**: the interface <a id=""aea.crypto.base.LedgerApi""></a>"
aea.crypto.base,"LedgerApi Objects. Interface for ledger APIs. <a id=""aea.crypto.base.LedgerApi.api""></a> #### api Get the underlying API object. This can be used for low-level operations with the concrete ledger APIs. If there is no such object, return None. <a id=""aea.crypto.base.LedgerApi.get_balance""></a> #### getbalance Get the balance of a given account. This usually takes the form of a web request to be waited synchronously. **Arguments**: - : the address. **Returns**: the balance. <a id=""aea.crypto.base.LedgerApi.get_state""></a> #### getstate Call a specified function on the underlying ledger API. This usually takes the form of a web request to be waited synchronously. **Arguments**: - : the name of the API function to be called. - : the positional arguments for the API function. - : the keyword arguments for the API function. **Returns**: the ledger API response. <a id=""aea.crypto.base.LedgerApi.get_transfer_transaction""></a> #### gettransfertransaction Submit a transfer transaction to the ledger. **Arguments**: - : the sender address of the payer. - : the destination address of the payee. - : the amount of wealth to be transferred. - : the transaction fee. - : verifies the authenticity of the tx - : the keyword arguments. **Returns**: the transfer transaction <a id=""aea.crypto.base.LedgerApi.send_signed_transaction""></a> #### sendsignedtransaction Send a signed transaction and wait for confirmation. Use keyword arguments for the specifying the signed transaction payload. **Arguments**: - : the signed transaction <a id=""aea.crypto.base.LedgerApi.get_transaction_receipt""></a> #### gettransactionreceipt Get the transaction receipt for a transaction digest. **Arguments**: - : the digest associated to the transaction. **Returns**: the tx receipt, if present <a id=""aea.crypto.base.LedgerApi.get_transaction""></a> #### gettransaction Get the transaction for a transaction digest. **Arguments**: - : the digest associated to the transaction. **Returns**: the tx, if present <a id=""aea.crypto.base.LedgerApi.get_contract_instance""></a> #### getcontractinstance Get the instance of a contract. **Arguments**: - : the contract interface. - : the contract address. **Returns**: the contract instance <a id=""aea.crypto.base.LedgerApi.get_deploy_transaction""></a> #### getdeploytransaction Get the transaction to deploy the smart contract. **Arguments**: - : the contract interface. - : The address that will deploy the contract. - : the keyword arguments. **Returns**: : the transaction dictionary. <a id=""aea.crypto.base.LedgerApi.update_with_gas_estimate""></a> #### updatewithgasestimate Attempts to update the transaction with a gas estimate **Arguments**: - : the transaction **Returns**: the updated transaction <a id=""aea.crypto.base.FaucetApi""></a>"
aea.crypto.base,"FaucetApi Objects. Interface for testnet faucet APIs. <a id=""aea.crypto.base.FaucetApi.get_wealth""></a> #### getwealth Get wealth from the faucet for the provided address. **Arguments**: - : the address. - : the url **Returns**: None"
aea.crypto.ledgerapis,"aea.crypto.ledgerapis. <a id=""aea.crypto.ledger_apis""></a> # aea.crypto.ledgerapis Module wrapping all the public and private keys cryptography. <a id=""aea.crypto.ledger_apis.LedgerApis""></a>"
aea.crypto.ledgerapis,"LedgerApis Objects. Store all the ledger apis we initialise. <a id=""aea.crypto.ledger_apis.LedgerApis.has_ledger""></a> #### hasledger Check if it has the api. <a id=""aea.crypto.ledger_apis.LedgerApis.get_api""></a> #### getapi Get the ledger API. <a id=""aea.crypto.ledger_apis.LedgerApis.get_balance""></a> #### getbalance Get the token balance. **Arguments**: - : the identifier of the ledger - : the address to check for **Returns**: the token balance <a id=""aea.crypto.ledger_apis.LedgerApis.get_transfer_transaction""></a> #### gettransfertransaction Get a transaction to transfer from self to destination. **Arguments**: - : the identifier of the ledger - : the address of the sender - : the address of the receiver - : the amount - : verifies the authenticity of the tx - : the tx fee - : the keyword arguments. **Returns**: tx <a id=""aea.crypto.ledger_apis.LedgerApis.send_signed_transaction""></a> #### sendsignedtransaction Send a signed transaction and wait for confirmation. **Arguments**: - : the identifier of the ledger - : the signed transaction **Returns**: the tx_digest, if present <a id=""aea.crypto.ledger_apis.LedgerApis.get_transaction_receipt""></a> #### gettransactionreceipt Get the transaction receipt for a transaction digest. **Arguments**: - : the identifier of the ledger - : the digest associated to the transaction. **Returns**: the tx receipt, if present <a id=""aea.crypto.ledger_apis.LedgerApis.get_transaction""></a> #### gettransaction Get the transaction for a transaction digest. **Arguments**: - : the identifier of the ledger - : the digest associated to the transaction. **Returns**: the tx, if present <a id=""aea.crypto.ledger_apis.LedgerApis.get_contract_address""></a> #### getcontractaddress Get the contract address from a transaction receipt. **Arguments**: - : the identifier of the ledger - : the transaction receipt **Returns**: the contract address if successful <a id=""aea.crypto.ledger_apis.LedgerApis.is_transaction_settled""></a> #### istransactionsettled Check whether the transaction is settled and correct. **Arguments**: - : the identifier of the ledger - : the transaction digest **Returns**: True if correctly settled, False otherwise <a id=""aea.crypto.ledger_apis.LedgerApis.is_transaction_valid""></a> #### istransactionvalid Check whether the transaction is valid. **Arguments**: - : Ledger identifier - : the transaction - : the address of the seller. - : the address of the client. - : the transaction nonce. - : the amount we expect to get from the transaction. **Returns**: True if is valid , False otherwise <a id=""aea.crypto.ledger_apis.LedgerApis.generate_tx_nonce""></a> #### generatetxnonce Generate a random str message. **Arguments**: - : ledger identifier. - : the address of the seller. - : the address of the client. **Returns**: return the hash in hex. <a id=""aea.crypto.ledger_apis.LedgerApis.recover_message""></a> #### recovermessage Recover the addresses from the hash. **Arguments**: - : ledger identifier. - : the message we expect - : the transaction signature - : if the deprecated signing was used **Returns**: the recovered addresses <a id=""aea.crypto.ledger_apis.LedgerApis.get_hash""></a> #### gethash Get the hash of a message. **Arguments**: - : ledger identifier. - : the message to be hashed. **Returns**: the hash of the message. <a id=""aea.crypto.ledger_apis.LedgerApis.is_valid_address""></a> #### isvalidaddress Check if the address is valid. **Arguments**: - : ledger identifier. - : the address to validate. **Returns**: whether it is a valid address or not."
aea.crypto.wallet,"aea.crypto.wallet. <a id=""aea.crypto.wallet""></a> # aea.crypto.wallet Module wrapping all the public and private keys cryptography. <a id=""aea.crypto.wallet.CryptoStore""></a>"
aea.crypto.wallet,"CryptoStore Objects. Utility class to store and retrieve crypto objects. <a id=""aea.crypto.wallet.CryptoStore.__init__""></a> #### init Initialize the crypto store. **Arguments**: - : dictionary from crypto id to an (optional) path to the private key. - : the password to encrypt/decrypt the private key. <a id=""aea.crypto.wallet.CryptoStore.public_keys""></a> #### publickeys Get the public_key dictionary. <a id=""aea.crypto.wallet.CryptoStore.crypto_objects""></a> #### cryptoobjects Get the crypto objects (key pair). <a id=""aea.crypto.wallet.CryptoStore.addresses""></a> #### addresses Get the crypto addresses. <a id=""aea.crypto.wallet.CryptoStore.private_keys""></a> #### privatekeys Get the crypto addresses. <a id=""aea.crypto.wallet.Wallet""></a>"
aea.crypto.wallet,"Wallet Objects. Container for crypto objects. The cryptos are separated into two categories: - main cryptos: used by the AEA for the economic side (i.e. signing transaction) - connection cryptos: exposed to the connection objects for encrypted communication. <a id=""aea.crypto.wallet.Wallet.__init__""></a> #### init Instantiate a wallet object. **Arguments**: - : the private key paths - : the private key paths for the connections. - : the password to encrypt/decrypt the private key. <a id=""aea.crypto.wallet.Wallet.public_keys""></a> #### publickeys Get the public_key dictionary. <a id=""aea.crypto.wallet.Wallet.crypto_objects""></a> #### cryptoobjects Get the crypto objects (key pair). <a id=""aea.crypto.wallet.Wallet.addresses""></a> #### addresses Get the crypto addresses. <a id=""aea.crypto.wallet.Wallet.private_keys""></a> #### privatekeys Get the crypto addresses. <a id=""aea.crypto.wallet.Wallet.main_cryptos""></a> #### maincryptos Get the main crypto store. <a id=""aea.crypto.wallet.Wallet.connection_cryptos""></a> #### connectioncryptos Get the connection crypto store. <a id=""aea.crypto.wallet.Wallet.sign_message""></a> #### signmessage Sign a message. **Arguments**: - : the id of the crypto - : the message to be signed - : what signing mode to use **Returns**: the signature of the message <a id=""aea.crypto.wallet.Wallet.sign_transaction""></a> #### signtransaction Sign a tx. **Arguments**: - : the id of the crypto - : the transaction to be signed **Returns**: the signed tx"
aea.crypto.registries.base,"aea.crypto.registries.base. <a id=""aea.crypto.registries.base""></a> # aea.crypto.registries.base This module implements the base registry. <a id=""aea.crypto.registries.base.ItemId""></a>"
aea.crypto.registries.base,"ItemId Objects. The identifier of an item class. <a id=""aea.crypto.registries.base.ItemId.name""></a> #### name Get the id name. <a id=""aea.crypto.registries.base.EntryPoint""></a>"
aea.crypto.registries.base,"EntryPoint Objects. The entry point for a resource. The regular expression matches the strings in the following format: path.to.module:className <a id=""aea.crypto.registries.base.EntryPoint.__init__""></a> #### init Initialize the entrypoint. <a id=""aea.crypto.registries.base.EntryPoint.import_path""></a> #### importpath Get the import path. <a id=""aea.crypto.registries.base.EntryPoint.class_name""></a> #### classname Get the class name. <a id=""aea.crypto.registries.base.EntryPoint.load""></a> #### load Load the item object. **Returns**: the crypto object, loaded following the spec. <a id=""aea.crypto.registries.base.ItemSpec""></a>"
aea.crypto.registries.base,"ItemSpec Objects. A specification for a particular instance of an object. <a id=""aea.crypto.registries.base.ItemSpec.__init__""></a> #### init Initialize an item specification. **Arguments**: - : the id associated to this specification - : The Python entry_point of the environment class (e.g. module.name:Class). - : keyword arguments to be attached on the class as class variables. - : other custom keyword arguments. <a id=""aea.crypto.registries.base.ItemSpec.make""></a> #### make Instantiate an instance of the item object with appropriate arguments. **Arguments**: - : the key word arguments **Returns**: an item <a id=""aea.crypto.registries.base.ItemSpec.get_class""></a> #### getclass Get the class of the item with class variables instantiated. **Returns**: an item class <a id=""aea.crypto.registries.base.Registry""></a>"
aea.crypto.registries.base,"Registry Objects. Registry for generic classes. <a id=""aea.crypto.registries.base.Registry.__init__""></a> #### init Initialize the registry. <a id=""aea.crypto.registries.base.Registry.supported_ids""></a> #### supportedids Get the supported item ids. <a id=""aea.crypto.registries.base.Registry.register""></a> #### register Register an item type. **Arguments**: - : the identifier for the crypto type. - : the entry point to load the crypto object. - : keyword arguments to be attached on the class as class variables. - : arguments to provide to the crypto class. <a id=""aea.crypto.registries.base.Registry.make""></a> #### make Create an instance of the associated type item id. **Arguments**: - : the id of the item class. Make sure it has been registered earlier before calling this function. - : dotted path to a module. whether a module should be loaded before creating the object. this argument is useful when the item might not be registered beforehand, and loading the specified module will make the registration. E.g. suppose the call to 'register' for a custom object is located in some_package/__init__.py. By providing module=""some_package"", the call to 'register' in such module gets triggered and the make can then find the identifier. - : keyword arguments to be forwarded to the object. **Returns**: the new item instance. <a id=""aea.crypto.registries.base.Registry.make_cls""></a> #### makecls Load a class of the associated type item id. **Arguments**: - : the id of the item class. Make sure it has been registered earlier before calling this function. - : dotted path to a module. whether a module should be loaded before creating the object. this argument is useful when the item might not be registered beforehand, and loading the specified module will make the registration. E.g. suppose the call to 'register' for a custom object is located in some_package/__init__.py. By providing module=""some_package"", the call to 'register' in such module gets triggered and the make can then find the identifier. **Returns**: the new item class. <a id=""aea.crypto.registries.base.Registry.has_spec""></a> #### hasspec Check whether there exist a spec associated with an item id. **Arguments**: - : the item identifier. **Returns**: True if it is registered, False otherwise."
aea.protocols.base,"aea.protocols.base. <a id=""aea.protocols.base""></a> # aea.protocols.base This module contains the base message and serialization definition. <a id=""aea.protocols.base.Message""></a>"
aea.protocols.base,"Message Objects. This class implements a message. <a id=""aea.protocols.base.Message.Performative""></a>"
aea.protocols.base,"Performative Objects. Performatives for the base message. <a id=""aea.protocols.base.Message.Performative.__str__""></a> #### str Get the string representation. <a id=""aea.protocols.base.Message.__init__""></a> #### init Initialize a Message object. **Arguments**: - : the dictionary of values to hold. - : any additional value to add to the body. It will overwrite the body values. <a id=""aea.protocols.base.Message.json""></a> #### json Get json friendly str representation of the message. <a id=""aea.protocols.base.Message.from_json""></a> #### fromjson Construct message instance from json data. <a id=""aea.protocols.base.Message.valid_performatives""></a> #### validperformatives Get valid performatives. <a id=""aea.protocols.base.Message.has_sender""></a> #### hassender Check if it has a sender. <a id=""aea.protocols.base.Message.sender""></a> #### sender Get the sender of the message in Address form. <a id=""aea.protocols.base.Message.sender""></a> #### sender Set the sender of the message. <a id=""aea.protocols.base.Message.has_to""></a> #### hasto Check if it has a sender. <a id=""aea.protocols.base.Message.to""></a> #### to Get address of receiver. <a id=""aea.protocols.base.Message.to""></a> #### to Set address of receiver. <a id=""aea.protocols.base.Message.dialogue_reference""></a> #### dialoguereference Get the dialogue_reference of the message. <a id=""aea.protocols.base.Message.message_id""></a> #### messageid Get the message_id of the message. <a id=""aea.protocols.base.Message.performative""></a> #### performative Get the performative of the message. <a id=""aea.protocols.base.Message.target""></a> #### target Get the target of the message. <a id=""aea.protocols.base.Message.set""></a> #### set Set key and value pair. **Arguments**: - : the key. - : the value. <a id=""aea.protocols.base.Message.get""></a> #### get Get value for key. <a id=""aea.protocols.base.Message.is_set""></a> #### isset Check value is set for key. <a id=""aea.protocols.base.Message.__eq__""></a> #### eq Compare with another object. <a id=""aea.protocols.base.Message.__repr__""></a> #### repr Get the representation of the message. <a id=""aea.protocols.base.Message.__str__""></a> #### str Get the string representation of the message. Abbreviated to prevent spamming of logs. <a id=""aea.protocols.base.Message.encode""></a> #### encode Encode the message. <a id=""aea.protocols.base.Message.decode""></a> #### decode Decode the message. <a id=""aea.protocols.base.Message.has_dialogue_info""></a> #### hasdialogueinfo Check whether a message has the dialogue fields populated. More precisely, it checks whether the fields 'message_id', 'target' and 'dialogue_reference' are set. **Returns**: True if the message has the dialogue fields set, False otherwise. <a id=""aea.protocols.base.Encoder""></a>"
aea.protocols.base,"Encoder Objects. Encoder interface. <a id=""aea.protocols.base.Encoder.encode""></a> #### encode Encode a message. **Arguments**: - : the message to be encoded. **Returns**: the encoded message. <a id=""aea.protocols.base.Decoder""></a>"
aea.protocols.base,"Decoder Objects. Decoder interface. <a id=""aea.protocols.base.Decoder.decode""></a> #### decode Decode a message. **Arguments**: - : the sequence of bytes to be decoded. **Returns**: the decoded message. <a id=""aea.protocols.base.Serializer""></a>"
aea.protocols.base,"Serializer Objects. The implementations of this class defines a serialization layer for a protocol. <a id=""aea.protocols.base.Protocol""></a>"
aea.protocols.base,"Protocol Objects. This class implements a specifications for a protocol. It includes a serializer to encode/decode a message. <a id=""aea.protocols.base.Protocol.__init__""></a> #### init Initialize the protocol manager. **Arguments**: - : the protocol configurations. - : the message class. - : the keyword arguments. <a id=""aea.protocols.base.Protocol.serializer""></a> #### serializer Get the serializer. <a id=""aea.protocols.base.Protocol.from_dir""></a> #### fromdir Load the protocol from a directory. **Arguments**: - : the directory to the skill package. - : the keyword arguments. **Returns**: the protocol object. <a id=""aea.protocols.base.Protocol.from_config""></a> #### fromconfig Load the protocol from configuration. **Arguments**: - : the protocol configuration. - : the keyword arguments. **Returns**: the protocol object. <a id=""aea.protocols.base.Protocol.protocol_id""></a> #### protocolid Get protocol id. <a id=""aea.protocols.base.Protocol.protocol_specification_id""></a> #### protocolspecificationid Get protocol specification id. <a id=""aea.protocols.base.Protocol.__repr__""></a> #### repr Get str representation of the protocol."
packages.fetchai.protocols.signing.customtypes,"packages.fetchai.protocols.signing.customtypes. <a id=""packages.fetchai.protocols.signing.custom_types""></a> # packages.fetchai.protocols.signing.customtypes This module contains class representations corresponding to every custom type in the protocol specification. <a id=""packages.fetchai.protocols.signing.custom_types.ErrorCode""></a>"
packages.fetchai.protocols.signing.customtypes,"ErrorCode Objects. This class represents an instance of ErrorCode. <a id=""packages.fetchai.protocols.signing.custom_types.ErrorCode.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the error_code_protobuf_object argument is matched with the instance of this class in the 'error_code_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""packages.fetchai.protocols.signing.custom_types.ErrorCode.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class is created that matches the protocol buffer object in the 'error_code_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'error_code_protobuf_object' argument."
packages.fetchai.protocols.signing.dialogues,"packages.fetchai.protocols.signing.dialogues. <a id=""packages.fetchai.protocols.signing.dialogues""></a> # packages.fetchai.protocols.signing.dialogues This module contains the classes required for signing dialogue management. - SigningDialogue: The dialogue class maintains state of a dialogue and manages it. - SigningDialogues: The dialogues class keeps track of all dialogues. <a id=""packages.fetchai.protocols.signing.dialogues.SigningDialogue""></a>"
packages.fetchai.protocols.signing.dialogues,"SigningDialogue Objects. The signing dialogue class maintains state of a dialogue and manages it. <a id=""packages.fetchai.protocols.signing.dialogues.SigningDialogue.Role""></a>"
packages.fetchai.protocols.signing.dialogues,"Role Objects. This class defines the agent's role in a signing dialogue. <a id=""packages.fetchai.protocols.signing.dialogues.SigningDialogue.EndState""></a>"
packages.fetchai.protocols.signing.dialogues,"EndState Objects. This class defines the end states of a signing dialogue. <a id=""packages.fetchai.protocols.signing.dialogues.SigningDialogue.__init__""></a> #### init Initialize a dialogue. **Arguments**: - : the identifier of the dialogue - : the address of the entity for whom this dialogue is maintained - : the role of the agent this dialogue is maintained for - : the message class used <a id=""packages.fetchai.protocols.signing.dialogues.SigningDialogues""></a>"
packages.fetchai.protocols.signing.dialogues,"SigningDialogues Objects. This class keeps track of all signing dialogues. <a id=""packages.fetchai.protocols.signing.dialogues.SigningDialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the dialogue class used - : the callable determining role from first message"
packages.fetchai.protocols.signing.serialization,"packages.fetchai.protocols.signing.serialization. <a id=""packages.fetchai.protocols.signing.serialization""></a> # packages.fetchai.protocols.signing.serialization Serialization module for signing protocol. <a id=""packages.fetchai.protocols.signing.serialization.SigningSerializer""></a>"
packages.fetchai.protocols.signing.serialization,"SigningSerializer Objects. Serialization for the 'signing' protocol. <a id=""packages.fetchai.protocols.signing.serialization.SigningSerializer.encode""></a> #### encode Encode a 'Signing' message into bytes. **Arguments**: - : the message object. **Returns**: the bytes. <a id=""packages.fetchai.protocols.signing.serialization.SigningSerializer.decode""></a> #### decode Decode bytes into a 'Signing' message. **Arguments**: - : the bytes object. **Returns**: the 'Signing' message."
packages.fetchai.protocols.signing.message,"packages.fetchai.protocols.signing.message. <a id=""packages.fetchai.protocols.signing.message""></a> # packages.fetchai.protocols.signing.message This module contains signing's message definition. <a id=""packages.fetchai.protocols.signing.message.SigningMessage""></a>"
packages.fetchai.protocols.signing.message,"SigningMessage Objects. A protocol for communication between skills and decision maker. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.Performative""></a>"
packages.fetchai.protocols.signing.message,"Performative Objects. Performatives for the signing protocol. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.Performative.__str__""></a> #### str Get the string representation. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.__init__""></a> #### init Initialise an instance of SigningMessage. **Arguments**: - : the message id. - : the dialogue reference. - : the message target. - : the message performative. - : extra options. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.valid_performatives""></a> #### validperformatives Get valid performatives. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.dialogue_reference""></a> #### dialoguereference Get the dialogue_reference of the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.message_id""></a> #### messageid Get the message_id of the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.performative""></a> #### performative Get the performative of the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.target""></a> #### target Get the target of the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.error_code""></a> #### errorcode Get the 'error_code' content from the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.raw_message""></a> #### rawmessage Get the 'raw_message' content from the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.raw_transaction""></a> #### rawtransaction Get the 'raw_transaction' content from the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.signed_message""></a> #### signedmessage Get the 'signed_message' content from the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.signed_transaction""></a> #### signedtransaction Get the 'signed_transaction' content from the message. <a id=""packages.fetchai.protocols.signing.message.SigningMessage.terms""></a> #### terms Get the 'terms' content from the message."
