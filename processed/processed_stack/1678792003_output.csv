title,text
Validators,"Validators. # Validators The block validation procedure is one of the essential elements that makes blockchain functioning possible. A network node known as a **blockchain validator** assists in processing and validating transaction blocks on the platform so that they may be added to the blockchain's permanent ledger. On PoS blockchains, these nodes are referred to as **validators**, whereas, on PoW blockchain networks, these are known as **miners**. In essence, _validator nodes take on the responsibility of validating, voting on, and keeping a record of transactions by taking part in the consensus process_. Block validation, however, is a procedure that both of these blockchain variants may use. Staking, the method of block validation utilized on PoS blockchains, would be a more appropriate alternative to mine when referring to blockchain networks. The process starts with an user sending the transaction on the blockchain, which is then queued on the network for further confirmation. The block is then verified by validator nodes by batching individual transactions into it. The amount of transactions that can be included in a block is governed differently by each blockchain. The block is then processed by validators which add it to the blockchain as a permanent record. On some blockchains, validators have the option to select which transactions to group into a block. This choice is made depending on the validator's preferences, usually based on the transaction costs involved, and is not necessarily made in chronological sequence. The sender of cryptocurrency assets tacks on the fees to every blockchain transaction as a reward for validators. Senders have the option to set their own rates and even transmit transactions completely free of charge. Transactions with _extremely little_ or _no fees_, however, are more likely to be disregarded by validators and, as a result, can hang around in the unconfirmed state for a very long time. The transaction is often removed from the network if it is not put to a block for validation after a period."
smart_contracts,smart_contracts. 
smart_contracts,"What is a Smart Contract?. A **smart contract** (i.e. **automated self-enforcing contract**) is a piece of computer software that initiates a certain activity when the circumstances are satisfied. For instance, smart contracts may be used to mediate the trade of cryptocurrencies (or any other digital asset) between two parties. **In other words, smart contracts are essentially lines of code that run when certain criteria are satisfied, performing a certain purpose**. The agreements and underlying code are spread throughout a decentralized blockchain network. Transactions are traceable and irreversible, and the code regulates their execution. **Smart contracts enable trustworthy transactions and agreements to be made between dispersed, anonymous participants, without the need for a centralized authority, a legal system, or an external enforcement mechanism**. Hence, a smart contract may describe the transaction's mechanics and serve as the final arbitrator of the terms. Because of this, smart contracts have evolved into the foundation of a complete ecosystem of **decentralized apps** (i.e. **dApps**) and are now a key area of focus for blockchain development as a whole. Simple _if/when, then_ words encoded into code on a blockchain are the basis for how smart contracts operate. When predefined circumstances have been verified to have been satisfied, a network of computers will carry out the actions. These can entail paying out money to the right people, registering a car, sending out notices, or writing a ticket. When the transaction is finished, the blockchain is then updated. As a result, the transaction cannot be modified, and only parties to whom permission has been granted can view the outcome. Smart contacts, therefore, allow intermediaries such as banks and central authorities to be bypassed, as the contract is written onto the blockchain, and once written on the blockchain, these are irreversible. This means they are ideal for _automating_ and _decentralizing_ transactions and deals, and indeed are really the key to making dApps work on the blockchain. What makes these contracts _smart_ is their _ability to execute a well-defined logic in response to particular conditions which are explicitly stated in the contract_, and, because such conditions to be met are visible to everyone and can not be modified. This leads people to have confidence in the smart contracts, even in circumstances where they do not otherwise know each other. In the context of the blockchain and cryptocurrency markets, smart contracts are crucial, especially in relation to ERC-20 tokens, which are a subset of tokens produced on the Ethereum network that adhere to the ERC-20 standard. The financial services sector is another use for smart contracts. For instance, this technology might be used to automate the computation and payment of insurance claims as well as the clearing and settlement of trades. Smart contracts, although their apparent uses in finance, are adaptable enough to be used in almost any sector where money, digital assets, or any type of digital information has to be moved between parties. For example, the equipment leasing sector has extensively used these contracts in the real world to streamline lease arrangements. Their application is also being investigated in the healthcare industry as a defense against data tampering in clinical studies. By creating a clear record of shared ownership rights and dividing all royalties and revenues from intellectual property accordingly, smart contracts may even be used to enforce intellectual property agreements."
smart_contracts,"Benefits of Smart Contracts. There are different **positive features** of smart contracts: 1. **Speed, Efficiency, and Precision**: the contract is promptly carried out if a condition is satisfied. Smart contracts are digital and automated, so there is no paperwork to complete or time wasted fixing mistakes that frequently occur when documents are filled out manually. 2. **Transparency and Trust**: there is no need to wonder whether information has been changed for one participant's personal gain because there is no third party engaged and participants exchange encrypted records of transactions. Smart contracts are written in a way that does make disputes extremely rare, indeed they are designed to avoid them entirely. 3. **Security**: because the blockchain transaction records are encrypted, these are incredibly difficult to hack. Additionally, hackers would need to alter the entire chain in order to change a single record on a distributed ledger since each record is linked to the records that came before and after it."
smart_contracts,"Drawbacks of Smart Contracts. There are three key **negative features** about smart contracts: 1. **Legal Status**: smart contracts lack any legal status. This may be largely caused because the technology is so new, and most legal jurisdictions have not yet updated their guidance on smart contracts and legislation if required is usually not yet in place. This is an area that is likely to change in coming years. 2. **Difficult to Change**: once a record has been written to the blockchain it is impossible to change or delete it. Therefore, if a smart contract has been issued in some way incorrectly, then changing it is almost impossible. You would be able to issue another contract that effectively would reverse the effect of the incorrect contract, but that would not necessarily be easy. 3. **Need for Precision**: smart contracts do not work unless they are written in an extremely precise way. In fact, there can not be any ambiguity or vagueness in their terms."
smart_contracts,"Use Cases. ,Finance: DeFi dApps are a strong substitute for conventional financial services, and their acceptance is rising as a result of the irreversible, transparent, and trustless properties of blockchain and smart contract technology. DeFi dApps provide whole new sorts of goods and decentralized business models that may be of great use and utility for consumers, in addition to parallel services to the banking and financial services sector like lending, borrowing, trading, and a variety of other financial activities. DApps have the ability to lower the barriers to entry into the financial services industry for individuals all over the world because of the improved transparency provided by smart contracts (combined with 24/7 functioning, and cheaper prices). The implications of smart-contract-powered dApps on the financial industry are already apparent, despite the DeFi sector's relative youth given the amount of creative dApps that are currently offering users value and usefulness. ,Gaming and NFTs: The worldwide gaming market is a $100 billion ecosystem that is expanding swiftly, yet the way wealth is produced and dispersed within the market may often be unfair. Games are created and released by developers, and users pay to access and participate in such games. As a result, gamers continue to pay money to gain access to in-game resources and gaming options, perpetuating a one-way flow of value. In contrast, blockchain technology in gaming can help gamers more effectively realize the value and usefulness of in-game purchases and asset purchases. Non-fungible tokens (i.e. NFTs), which are distinctive digital assets that stand in for in-game content, are frequently the engine behind blockchain technology in the gaming industry. Smart contracts are crucial to NFTs. The blockchain networks that support NFTs provide player ownership, proved scarcity, interoperability, and immutability, while these tokens are unique, uncommon, and indivisible. These features of blockchain in gaming might promote widespread adoption and a more equal value model when taken as a whole. ,Healthcare: Another sector that has started utilizing blockchain technology for safe, trustless, and transparent data sharing is healthcare. The incorporation of smart contracts and full decentralized applications (dApps) created to address important healthcare pain points like interoperability, identity, and authentication issues may help strengthen the connection between blockchain technology and healthcare. ,Identity Management: In order to increase security and lower the likelihood of data mismanagement or a breach, Digital Identifier (DIDs) smart contracts built on distributed ledger technologies offer people complete ownership over their data and let them share the content of their data as they see fit. For identity management, smart contracts help to ensure and facilitate: identity protection, the information the user wants to share, and KYC verification ,Legal Industry: The ability of smart contracts to serve as legally enforceable contracts, the sort that govern the majority of today's commercial interactions, is one of the most exciting real world use cases. Most recently, with the introduction of e-signatures for legally binding agreements, technology has been pushing innovation in the legal sector. Another recent development in this area is the emergence of smart contracts, which might soon provide parties to legal agreements with a choice and perhaps reduce the expense of engaging attorneys and other middlemen. ,Machine Learning and Artificial Intelligence: The capacity of blockchain technology and related smart contract technology to simplify difficult computing operations like those involved in machine learning and artificial intelligence is one of the most interesting uses of these technologies (AI). There is potential to develop AI-powered smart contracts by fusing the data-intensive processing of AI with the decentralized security and immutability of blockchain technology. Applications for smart contracts will need to develop into increasingly complicated systems as they are used by more and more sectors of the economy. While simple smart contract use cases may be created manually, AI-enabled smart contracts may make it possible to create far more complicated, responsive, enterprise-grade smart contracts and dApps, which might greatly increase the technology's potential. ,Real Estate: By fusing blockchain and real estate transactions, smart contracts are increasing fractional ownership of assets and decreasing the entry barrier for investing for many. Particularly, there have been a number of successful attempts to tokenize real estate assets, particularly through real estate-focused blockchain platforms like RealT and SolidBlock. By adding blockchain into real estate deals, smart contract technology may also remodel the paperwork and transaction procedures. When a piece of property is tokenized, much of the required record-keeping can take place via associated smart contracts, which can save the parties time and money ,Supply Chain Management: A fantastic use case for blockchain smart contracts is supply chain management. The supply chain may be significantly enhanced by the use of smart contracts. It may be used, for instance, to track things in the supply chain completely transparently. A company may employ supply networks that are enabled by smart contracts to track its inventory more precisely. Additionally, it enhances corporate operations in other areas that are directly related to the supply chain. Additionally, adopting smart contracts leads to less verification work, improved traceability, and fewer frauds and thefts. However, in order for it to be functional, the institutions must upgrade their supply chain with new hardware equipments. Smart contracts and dApps are poised to continue revolutionizing the world of digital agreements. Numerous more businesses will benefit greatly from smart contract technology in the future. Researchers and developers are increasingly keen to take use of smart contract technology to meet the demands of the expanding Internet of Things (IoT). While IoT devices are currently given security and transparency by blockchain technology in general, the benefits of smart contracts might make this integration much more seamless."
decentralized_applications,"decentralized_applications. **Decentralized Applications** (**DApps**) are digital applications or programmes that exist and run on a blockchain or peer-to-peer (i.e. P2P) network of computers. DApps, which might resemble ordinary mobile applications on your phone in appearance but have a distinct backend system, as these are not subject to the control of a single authority. DApps function by using smart contracts on a distributed network as opposed to a centralized system. These features make DApps more open, decentralized, and secure as a result. A smart contract functions as a collection of predetermined rules that computer code enforces. The tasks specified in the contract will be carried out by all network nodes when and if specific conditions are satisfied. A smart contract's code is difficult to alter or eliminate after it has been published on the blockchain. Therefore, consumers may still access the DApp even if the DApp's development team has split. Thanks to the underlying blockchain and smart contracts technology, decentralized applications provide a wide range of services and activities, from gaming to financial, social networking, and much more, and appear and feel identical to ordinary mobile applications on your smartphone. DApps share the following features: * **Open-sourceness**: This allows anybody to access, verify, use, copy, and edit their source code. The vast majority of the DApp tokens are not controlled by a single entity. Users are also able to suggest and vote on DApp improvements. * **Decentralization** and **Cryptography**: To protect data, the DApp stores all of its data on a public, decentralized blockchain that is maintained by a number of users (or nodes). * **Tokenization**: A cryptographic token is required to access DApps. They can use native tokens created using a consensus mechanism like Proof of Work (PoW) or Proof of Stake (PoS), or they can adopt cryptocurrencies like ETH. Additionally, contributors like miners and stakers can be rewarded with this token. Most DApps are present on the _Ethereum network_ as of June 2022. It provides a strong framework for DApp developers to increase the use cases already in place. On other blockchains, such as BNB Smart Chain (BSC), Solana (SOL), Polygon (MATIC), Avalanche (AVAX), EOS, and so on, developers have begun to construct DApps as they become more advanced. To interact with a DApp, you’ll first need a compatible browser extension wallet like MetaMask, or Trust Wallet."
decentralized_applications,"Benefits and Limitations of DApps. While DApps and conventional apps may have similar-looking user interfaces, DApps have some advantages over their centralized alternatives. Data is kept on centralized servers by web applications. The entire network of the app might be brought down by a single hacked server, rendering it inoperable for a while or ever. Data leaks or theft may occur in centralized systems as well, endangering businesses and consumers. DApps, in contrast, are created via decentralized distributed networks. DApps have no single point of failure, making them less susceptible to assaults and making it exceedingly challenging for bad actors to take over the network. The P2P network can also guarantee that the DApp keeps running with little downtime even if a few machines or a section of the network go wrong. Users may exercise more control over the data they disclose because of DApps' decentralized nature. Users do not need to reveal their real-world identities in order to communicate with a DApp because no corporations are in charge of their personal data. Instead, individuals may connect to DApps using a crypto wallet and have complete control over the data they disclose. Another advantage of DApps is that by utilizing smart contracts, developers may quickly include cryptocurrency into their core functions. DApps on Ethereum, for instance, may accept ETH as payment without integrating external payment services. When it comes to illustrate the **limitations of DApps**, we first need to highlight the fact that DApps have the potential to play a significant role in a world without censorship. However, decentralized apps are still in their infancy, and the market has yet to find solutions to problems like scalability, code revisions, and a small user base. DApps might overburden the networks they run on since they demand a lot of computational power to function. Another difficult task is modifying a DApp. A DApp does require continual updates to repair problems, update the user interface, and introduce new functions in order to improve user experience and security. It is challenging to change the backend code of a DApp once it has been put on the blockchain, though. Any modifications or enhancements would need to be approved by a majority of the network's nodes, which would take a while to put into practise. It is challenging for one DApp to stand out and draw a lot of users when there are so many others available. A DApp has to have a network effect in order to function properly. This is, the more users a DApp has, the more efficient it becomes at offering services. The DApp may be made more secure and shielded from hackers tampering with the open-source code by having more users."
decentralized_applications,"Use Cases. 1. **GameFi** GameFi DApps are becoming more and more well-liked, as seen by the success of the play-to-earn game Axie Infinity at https://axieinfinity.com/ on the Ethereum blockchain. The majority of gaming DApps give players complete control over their in-game assets, in contrast to conventional video games. They also provide users the chance to earn money from these things outside of the game. For instance, Axie Infinity offers NFT-based game avatars, virtual worlds, and gaming-related merchandise. Players can trade with other players on NFT markets, move them to other Ethereum addresses, or keep them in their digital wallets. Players can compete with one another inside the ecosystem to amass ERC-20 tokens that can be exchanged. Generally speaking, players may earn more in-game incentives the longer they play. 2. **DEXs - Decentralized Exchanges** The intermediaries in traditional finance are financial institutions. Everyone may access financial services with DApps without the need for a centralized authority and have total control over their assets. Low-income people can also profit from DeFi since it gives them access to a wide range of financial services at a considerable cost savings. The most common financial services offered by decentralized apps are borrowing and lending. Instant transaction settlement, little-to-no credit checks, and the usage of digital assets as collateral are all features of DeFi DApps. Users in DApp lending markets have greater freedom. Another essential example of financial DApps is decentralized exchanges (DEXs). These platforms make peer-to-peer trading easier by getting rid of middlemen like centralized cryptocurrency exchanges. Users are not required to give up control of their funds. With the aid of smart contracts, people trade with another user directly rather than putting their assets into an exchange. Orders are carried out directly between the users' wallets and on the blockchain. In comparison to centralized exchanges, DEXs often charge cheaper trading costs since they require less maintenance. SushiSwap at https://sushi.com/, PancakeSwap at https://pancakeswap.finance/, and Uniswap at https://uniswap.org/ are a few of the well-known DEXs. 3. **Entertainment** DApps enable the transformation of entertainment daily activities into digital experiences that can also produce financial incentives. For instance, Audius at https://audius.co/, a decentralized music streaming network built on blockchain, eliminates the middlemen present in the conventional music industry to connect artists and listeners directly. By creating permanent records of their labor on the blockchain, it enables music curators to better monetise their material. DApps are addressing problems that users of social media platforms encounter. Twitter and Facebook, two centralized social media behemoths, are frequently attacked for editing content and treating user data carelessly. The community can interact freely and express their opinions with fewer limitations and censorship thanks to decentralized social DApps like Steemit at https://steemit.com/ while also having more control over their personal data. 4. **Governance** DApps can enable users to participate more actively in the administration of online organizations by establishing a decision-making process that is more focused on the community. Users with governance tokens of a certain blockchain project can make suggestions for the community to vote on and vote on other people's ideas anonymously with the use of smart contracts. Decentralized Autonomous Organizations (DAOs) are one of the decentralized governance models. DAOs are completely autonomous DApps that employ smart contracts to decide for themselves without the need for a central authority. There is no hierarchy there. Instead, economic processes bring the organization's interests into line with those of specific DAO members."
How to Redelegate for Decentralization,"How to Redelegate for Decentralization. # How to Redelegate for Decentralization **Introduction** Decentralization is a key problem that we as a community need to tackle in order to provide more security to the network. As part of this, we have requested that everyone currently staking on the Fetch.ai Mainnet check to see if they are only staking with a single validator or if they are staking within the top 10 validators. You can tell if your validator is in the top 10 validators by going to the Validator Voting Power Distribution List at https://explore.fetch.ai/voting-power-distribution. If this is the case, then we would greatly appreciate it if you followed this guide on the importance of redelegating part of your stake outside the top 10 validators and how to do it. **Disclaimer - please note the following:** 1. **We are asking you to redelegate your staked $FET, do not undelegate your $FET to transfer from one validator to another, otherwise this process will cause you to lose out on staking rewards for 21 days while you wait for the unbonding period to end.** 2. **Redelegating, unlike undelegating, is an instant way for you to move part (or all) of your delegated $FET to different validators. Doing this is a very easy process and is what we will be outlining in this article.**"
How to Redelegate for Decentralization,"Why redelegating is important right now. The top 10 validators on the Fetch.ai network currently control roughly 50% of the total voting power on chain through delegations. For the Fetch.ai network to be as secure as possible, we shouldn't have more than 33% of delegated FET staked within the top 10 validators. It should be made clear that lists of validators on block explorers are not the highest to lowest for reputation or benefits, it's simply outlining who has the most FET staked to them. When it comes to reputation or how the validator has performed, it's up to you as a delegator to find that out. Delegating is meant to be an active role between you and a Validator (although commonly perceived incorrectly as ""passive income""). When you select a validator to delegate with, that is essentially your vote to the network saying they are trustworthy, and you are given staking rewards for that. So please ensure that you do your due diligence in ensuring you know as much about a validator as possible."
How to Redelegate for Decentralization,"To redelegate using the Cosmostation App. <img src=""/images/archives/redel_to_cosmo.png"" alt=""Redelegating on Cosmostation App"" class=""center"" style=""display: block; margin-left: auto; margin-right: auto;width :700px;""> 1. On the main screen, click **Delegate**. 2. Select the validator you're staking with that you wish to move your stake from. 3. Select **Redelegate**. 4. Enter the amount of FET you wish to redelegate and click **Next**. 5. Choose a validator outside of the top 10 that you wish to redelegate to (see here at https://explore.fetch.ai/voting-power-distribution for the voting power of the validators), and click **Next**. 6. You'll be prompted to enter an optional memo, but you can leave it blank. Click **Next**. 7. Choose the transaction fee for redelegating (low is fine). Click **Next**. 8. Review the details of your redelegation. Click **Confirm**. 9. Click **Yes** on the popup. Enter your PIN."
How to Redelegate for Decentralization,"To redelegate using Keystation/Cosmostation Web Wallet. <img src=""/images/archives/redel_to_keystation.png"" alt=""How to redelegate on Keystation/Cosmostation web wallet"" class=""center"" style=""display: block; margin-left: auto; margin-right: auto;width:400px;""> 1. Connect your Fetch.ai wallet to the Cosmostation web wallet at https://wallet.cosmostation.io/?network=fetchai. 2. Select **Reward** from the options on the left side panel. 3. Scroll to **My Validators** and select **Redelegate**. 4. Pick the validator outside of the top 10 that you would like to Redelegate to. 5. Enter the amount of FET you'd like to redelegate to them. Leave the memo blank. 6. Click **Generate & Sign Transaction**. On the pop-up select **Allow**. 7. Enter your PIN."
How to Redelegate for Decentralization,"To redelegate using the Fetch Wallet. <img src=""/images/archives/redel_to_browser_extension_wallet.png"" alt=""How to redelegate with the Fetch wallet"" class=""center"" style=""display: block; margin-left: auto; margin-right: auto;width:400px;""> First you must ensure that you have the Fetch.ai wallet that you're staking with connected to the Fetch Wallet at https://bit.ly/3G31QII. 1. Connect to the Fetch Wallet. 2. In the Fetch.ai Validator Explorer page. at https://browse-fetchhub.fetch.ai/validators, click **Connect** in the top right of the web page. Once you're connected, click on your wallet address that is now listed in the top right on the web page. 3. From there, scroll down to the **Delegations** section. Find the validator you'd like to redelegate from. 4. Click **Transfer Stake**. In the pop-up that appears, select a validator below the top 10 that you'd like to redelegate to. Please keep in mind they are not in order on the drop-down, so you will need to have the Validator Voting Power Distribution List at https://explore.fetch.ai/voting-power-distribution open in another tab to see the order. 5. Enter in the amount of FET you wish to redelegate to this new validator. 6. Select **Transfer Stake**. You will then be prompted by a transaction request. Choose the gas fee (Low is fine) 7. Click **Approve**. And then you're done."
How to Redelegate for Decentralization,"What should you look for in a validator?. People always ask what they should be looking for in a validator. So here is a short list of things you, as a delegator, can look for online or ask validators themselves. * Do they have a website? * Do they have social media? (Twitter, Reddit, Instagram) * Are they easy to contact? (Discord, Telegram) * Do they have FET self-bonded to their node? * Are they active in the community? * Do they have a good uptime? * Do they offer slashing & double sign protection? * Do they vote on proposals? * Do they have a mission and principles that align with your own? Some of these questions can be answered through one of the Fetch.ai block explorers, such as our Native Block Explorer at https://explore.fetch.ai/validators or Mintscan at https://www.mintscan.io/fetchai/validators. But other things on this list will require you to reach out to validators for answers, which is a good opportunity to see if they are active frequently or not. It should also be noted that not every single one of these questions needs to be answered ""yes"" but if they are, then it's extremely helpful."
simple-oef-usage,"simple-oef-usage. You can use the <a href=""../simple-oef"">SOEF</a> in the agent framework by using the SOEF connection as a package in your agent project. <div class=""admonition note""> <p class=""admonition-title"">Note</p> <p>Please consult the <a href=""https://docs.fetch.ai/aea/simple-oef-usage/"">relevant guide</a> for details. </p> </div>"
Simple-OEF: Agent Search and Discovery,Simple-OEF: Agent Search and Discovery. # Simple-OEF: Agent Search and Discovery This documentation has been produced for the Simple-OEF version .
Simple-OEF: Agent Search and Discovery,Concepts. 
Simple-OEF: Agent Search and Discovery,"Describing an Agent. ,Personality Pieces:,Service Keys: Agents can have a number of service keys. Service keys are simple key/value pairs that describe the list of services that the agent provides. Whilst personality pieces can be thought of as how an agent *looks*, service keys are what an agent *has* or *does*. Service keys are user defined and as with personality pieces, currently have no convention for formatting. They are at the agent builder's discretion. As this changes, the documentation will be updated. However, for *buyer* agents, three suggested keys are: This allows searches to look for potential buyers of classifications, genus or with a compatible architecture."
Simple-OEF: Agent Search and Discovery,Finding Agents. 
Simple-OEF: Agent Search and Discovery,"Technical Details. ,Registration: Agents register at the page on the soef. They are expected to provide four pieces of information: 1. An API key 2. A chain identifier, which can be either for the Fetch native network (testnet or mainnet), for the Fetch version 2 network or for the Ethereum network. See the ""Chain identifiers"" table below for a complete list of supported chain identifiers. 3. An address, which must be a valid address for the specified chain identifier 4. A ""given name"" (see ""Concepts"", above), which can be anything from Alice to Bob, or a flight number, or any other user-given context. It must not exceed 128 characters. If registration is successful, the soef will return a result like this: This indicates success and that the agent is now in the **Lobby**. The lobby is a temporary holding pen where newly registered agents wait until the negotiation is complete. If an agent does not respond and complete its registration within 60 seconds, it is removed from the lobby and registration is cancelled. The is the **unique URL** for the new agent. This must be quoted in all subsequent interactions and is how the soef identifies that specific agent. To complete registration, use the unique URL and specify the parameters: * with the token that was returned above and * If this works, you will receive a success response: At this point, your agent is now fully registered and can then communicate with the soef. Agents that do not contact the soef at least once over a specified interval will be automatically unregistered. The typical setting for this is 60 minutes. #### Chain Identifiers The soef supports a selection of chain identifiers designed to allow agents to distinguish networks in searches, but also to identify the type of address used for verification purposes. | Chain identifier | Network | | --------------------------------- | ------------------------------------------------------------ | | | Version 1 Fetch.ai network (testnet or mainnet). Versions prior to 0.2 of the soef used for this, which is retained for compatibility. | | | Version 2 Fetch.ai stable testnet, also known as ""Agentland"". Versions prior to 0.2 of the soef used which is retained for compatibility, but deprecated. | | | Current incentivised testnet. Fetch.ai are running a high-reward sequence of testnets in Q4 2020 and Q1 2021 leading to V2 mainnet. | | | Miscellaneous v2 network. These are temporary or transient testnets where there is a desire to separate the chain ID from other v2 networks. | | | Fetch.ai v2 mainnet. Not yet active. | ,Commands: in Detail and are the big commands. Ultimately, they will cost a small amount of tokens to use, depending on the size of the request, as it involves the most computing time. This provides an incentive for soef operators to maintain soef nodes that correspond to subject areas, geographic areas or both. The command has a number of parameters specifying the filtering required. For , the is *required*, whereas narrowing down agents to be within a certain angle of a direction is optional. This cannot exceed a certain range, typically between 50 and 75km. This, and other configuration items, are available on the soef's configuration page. There are other parameters that are optional, although for at least one or must be specified. The parameters are: | Parameter | Use | | ------------------- | ------------------------------------------------------------ | | | Range in kilometres to include agents in results. | | | Optional: if a pizza-slice type search is required, this is the direction, in degrees, with 0.0 being north. | | | Optional: if a pizza-slice search, this is the angle in degrees from the that is allowed. If either or are specified, **both** must be specified. Example: set to 90.0 and set to 30 would exclude any agents that are not within 30 degrees of direct east of the me agent. | | | Boolean. Must be or . Default is . If specified, this ensures that any agents returned in the search will have the same chain identifier as you. | | | Specify a personality piece filter. Multiple s can be specified. Example use is: . Wildcards can be used where relevant, e.g.: will match all classifications that *start* with , whereas will match all classifications with anywhere in it. | | | Specify a service key filter. Multiple s can be specified. Example use is: which will require any returned results to have a service key of and a value of . Wildcards can be specified, so will match any agent with a service key of that starts , so and would match. | #### SK Filters: filter modes The parameter for also supports a *mode*. Four modes are supported: | Mode string | Description | | ----------- | ---------------------------------------------- | | PS | Key must be present, and success is required | | PF | Key must be present, and failure is required | | OS | Only match if present, and success is required | | OF | Only match if present, and failure is required | For example: In this example, the key must be present, and it must match to . If the key is present, and it is set to , then do not match. I.e., return everything that's a fruit within 50km except where the size is large."
Simple-OEF: Agent Search and Discovery,"Further Information. You can find further information, or talk to us, in the #agents channel on our official developer Discord server, which you can access <a href=""https://discord.com/invite/btedfjPJTj"" target=""_blank"">here</a>. We welcome your feedback and strive to deliver the best decentralised search and discovery service for agents that is possible. There are many upcoming features, including the operation incentive mechanisms, additional security and encryption, active searches (where results happen without being issued), non-geographic searches across one and many soef nodes and dimensional-reduction based approximate searches. [Docs: issue 15, , , TWS]"
How to Use the Wallet,How to Use the Wallet. # How to Use the Wallet
How to Use the Wallet,"Deposit Tokens. ,To Copy Your Account's Address: 1. Either click on the account address at the top of the dashboard (under the account name): 2. Or select **Deposit** and scan the QR code. Once you send the tokens, the balance should be updated. !!! failure If your origin wallet says that the address (which should start with """") is invalid, it is probably expecting an Ethereum address (beginning with """") and is most likely trying to send ERC20 FET. In this case, you need to use the token bridge at https://token-bridge.fetch.ai/ to swap your ERC20 FET for native FET. !!! warning You should **not** send ERC20 FET to this wallet. If you do, you will lose your tokens. The Fetch wallet can only hold native FET tokens and not ERC20 FET tokens."
How to Use the Wallet,"Send Tokens. To send tokens from your account: 1. Select **Send**. 2. Fill in the details of your transaction: * **Recipient**: the address you want to send the tokens to * **Token**: the token denomination or type * **Amount**: the number of tokens you want to send with this transaction (you can see your current balance above the **Amount**) * **Memo (Optional)**: some transactions (e.g. to/from some exchanges) require a specific memo. If not needed, you can leave it blank. * **Fee**: the transaction fee. Choose from **Low**, **Average** and **High** !!! tip Usually, the lower the transaction fee, the longer you need to wait for your transaction to be settled on the network. 3. Press **Send**. 4. In the summary screen, review the details and if everything is correct, select **Approve**. !!! tip You can check the status of your transaction via the explorer at https://explore-fetchhub.fetch.ai."
getting_started,getting_started. The Fetch Wallet allows you to interact with the Fetch network via your browser.
getting_started,"Compatibility. The Fetch Wallet works on all Chromium-based web browsers, including Chrome at https://www.google.com/chrome/, Brave at https://brave.com, Edge at https://www.microsoft.com/edge and Decentr at https://decentr.net."
getting_started,"Get the Wallet. Install the Fetch wallet from the Chrome web store at https://chrome.google.com/webstore/detail/fetchai-network-wallet/ellkdbaphhldpeajbepobaecooaoafpg/related?hl=en-GB. !!! info At this time, you cannot run the Keplr at https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=en and Fetch wallets together because they interfere. Please disable the Keplr wallet before using the Fetch wallet."
getting_started,"Set up. ,To Create a New Account: * Select * Backup your mnemonic seed securely. !!! warning **KEEP IT SAFE!** Anyone with your mnemonic seed can access your wallet and take your assets. !!! danger **DON'T LOSE IT!** Lost mnemonic seed cannot be recovered! If you lose your mnemonic seed you will lose access to your wallet. * Give your account a name and set a password. This password will be used the next time you want to use the wallet or make important changes to your account. * Rearrange the mnemonic phrases by clicking on them in the correct order to confirm your mnemonic seed. ,To Import an Existing Account: If you have an account on the Fetch network, for example having had one already on the Fetch wallet and want to access it again, have an account on another wallet (e.g. Cosmostation, Keplr, ...) and wish to bring it to the Fetch wallet, or having created an address using one of our tools (e.g. the AEA framework at https://docs.fetch.ai/aea), you can import it into the Fetch wallet: * Select * Enter your mnemonic seed (set of words) or private key (hexadecimal) !!! warning **KEEP IT SAFE!** Anyone with your mnemonic seed or private key can access your wallet and take your assets. * Give your account a name and set a password. This password will be used the next time you want to use the wallet or make important changes to your account. ,To Use Ledger Hardware Wallet: If you have a Ledger at https://www.ledger.com/ hardware wallet and wish to keep your key and mnemonics on that device while using the Fetch wallet: !!! info Currently only ledger at https://www.ledger.com/ hardware wallets are supported. * Select * Give your account a name and set a password. This password will be used the next time you want to use the wallet or make important changes to your account. * Follow the instructions on the popup to connect your device. !!! warning Please ensure you keep your mnemonic seed somewhere safe where others cannot access it. If you lose it, your wallet will be inaccessible once you log out. The password for your account should also be kept safe but is not necessary for recovery if you have your mnemonic seed. !!! info If you lose your password, you need to uninstall and re-install the Fetch wallet and select . Then use the mnemonic seed for your account and choose a new password."
how_to_stake,"how_to_stake. On this page, you can find instructions on how to stake FET, remove your stake, and claim your staking rewards."
how_to_stake,"To Stake. 1. Ensure you are logged into your Fetch wallet at /basics/wallet/getting_started. 2. On the wallet dashboard, select **Stake**. You should be redirected to the ledger browser at https://browse-fetchhub.fetch.ai/validators. Here you will find a list of every active validator with whom you can stake your FETs. You can also see the amount of FET staked to each validator and their commission rates. !!! info The validators on this page are ordered according to the number of FETs delegated to them and not their reputation or benefits. See choosing a validator at /basics/staking/redelegation/#choosing-a-validator for more details. 3. Connect your wallet, if it is not yet connected, by pressing **Connect Wallet** at the top right. 4. Choose a validator to stake your FETs with and hit **Stake**. !!! tip To see details of any validator, such as their voting power, self-bonded rate, uptime, active/inactive status at any given time, and contact information, head over to this page at https://explore.fetch.ai/validators. For a visualization of the validators' voting power (more is NOT better) check out this page at https://explore.fetch.ai/voting-power-distribution. 5. In the pop-up, select the amount of FETs you want to delegate to this validator and press **Stake**. !!! tip Don't forget to leave some FETs undelegated, as some amount is necessary to pay for transaction fees when submitting any transaction to the main network. The fee is very minimal, but it is still important to make sure you have some FETs to pay for it. 6. Your Fetch Wallet shows you a summary of the transaction. Review it, select a transaction fee, and if you are happy, hit **Approve** to complete the operation."
how_to_stake,"To Claim your Rewards. ,Using the Fetch Wallet: 1. Ensure you are logged into your Fetch wallet at /basics/wallet/getting_started. 2. From the wallet dashboard select **Claim**. !!! info This will claim the total rewards accrued for your stakes across every validator. 3. The wallet shows you a summary of the transaction. Review it, select a transaction fee, and if you are happy, hit **Approve** to complete the operation. You should now see the rewards added to your **Total Balance**. ,Using the Staking Dashboard: 1. Go to the ledger browser page at https://browse-fetchhub.fetch.ai/validators. 2. Connect your wallet, if it is not yet connected, by pressing **Connect Wallet** at the top right. 3. Click on your wallet address at the top right of the page to go to your **staking dashboard**. 4. In the **Rewards** section, click **Claim Rewards** for any validator to withdraw the rewards from your stakes with this particular validator. 5. The wallet shows you a summary of the transaction. Review it, select a transaction fee, and if you are happy, hit **Approve** to complete the operation. You should now see the rewards added to your **Total Balance**. !!! info Rewards are paid on a per-block basis and added to the existing pending rewards."
how_to_stake,"To Remove your Stake. 1. Go to the ledger browser page at https://browse-fetchhub.fetch.ai/validators. 2. Connect your wallet, if it is not yet connected, by pressing **Connect Wallet** at the top right. 3. Click on your wallet address at the top right of the page to go to your **staking dashboard**. 4. In the **Delegations** section, click **Remove Stake** for the validator you wish to remove your stakes from. 5. In the pop-up, enter the amount of FETs you wish to remove from your stakes with this validator and click **Remove Stake**. 6. The wallet shows you a summary of the transaction. Review it, select a transaction fee, and if you are happy, hit **Approve** to complete the operation. !!! info When you remove your stake, there is an unbonding (also known as, cooldown) period of 21 days. In your staking dashboard, the **Unbonding Delegations** section shows you the stakes you have removed which are now in the unbonding period. You can also see the amount of FET unbonded and the number of days remaining from the unbonding period. This is how long you need to wait before being able to withdraw the funds to your wallet."
redelegation,"redelegation. Re-delegation means moving some or all of the stakes you delegated with one validator to another. !!! note To re-delegate, do not manually remove your stake from one validator and stake with another. This will trigger the unbonding period, causing you to miss out on staking rewards for 21 days while you wait for the unbonding period to end. Re-delegation, unlike manually removing and adding stake, is an instant process for moving some or all of your staked FETs from one validator to another."
redelegation,"Why Re-Delegate. There may be different reasons why you might choose to re-delegate and redistribute your stakes. Some examples are: * **To increase the decentralization and therefore security of the network:** For the Fetch network to be as secure as possible, there should not be a large concentration of stakes (e.g. more than 33% of the delegated FETs) staked within only a small number of (e.g. 10) validators. If you see this is currently the case and that you have also contributed to it by delegating your stakes with one of those validators, you may want to consider redistributing your stakes to some of the other validators. * **To reduce your staking risks:** Remember that when you delegate your tokens with a validator, just as you share the rewards for their contribution to the network's consensus protocol, you also share the punishment they would receive if they misbehave and act against the network's protocol. If this happens, your stake with them will be slashed. To reduce this risk, you may choose to re-delegate parts of your stakes to other validators to have a wider stake distribution."
redelegation,"To Re-Delegate your Stake. 1. Go to the ledger browser page at https://browse-fetchhub.fetch.ai/validators. 2. Connect your wallet, if it is not yet connected, by pressing **Connect Wallet** at the top right. 3. Click on your wallet address at the top right of the page to go to your **staking dashboard**. 4. In the **Delegations** section, click **Transfer Stake** for the validator you wish to re-delegate some or all of your stakes from. 5. In the pop-up, select a validator that you'd like to re-delegate your stakes to. !!! info The validators are not in any order on the drop-down list. To see the validators' details see validator voting power distribution at https://explore.fetch.ai/voting-power-distribution and validator details at https://explore.fetch.ai/validators. 6. Enter the amount of FETs you wish to re-delegate to the new validator and click **Transfer Stake**. 7. The wallet shows you a summary of the transaction. Review it, select a transaction fee, and if you are happy, hit **Approve** to complete the operation."
redelegation,"Choosing a Validator. Choosing a validator to delegate your stake with is an important decision which ultimately impacts the network's security and performance. When you choose a validator, you are essentially casting a vote in the network indicating their trustworthiness, and that it is beneficial to have them participate in the maintenance of the network's operation. When it comes to choosing a validator, it is up to you as the delegator to do your own research and due diligence to find out about their reputation and how well they have performed so far. Delegation is meant to be an active role between you and a validator. To help you choose a suitable validator, here is a list of criteria to look for: * Do they have a website? * Do they have an active presence on social media (e.g. Twitter, Reddit, Instagram, ...)? * Are they easy to contact (e.g. on Discord, Telegram, ...)? * Do they have FET self-bonded to their node? * Are they active in the community? * Do they have a high uptime? * Do they offer slashing & double sign protection? * Do they participate and vote on proposals? * Do they have a mission or set of principles that align with yours? Some of these questions can be answered via our Native Block Explorer at https://explore.fetch.ai/validators or Mintscan at https://www.mintscan.io/fetchai/validators. Some of the others on this list will require you to reach out to validators for answers, which is a good opportunity to see if they are active or not."
