title,text
pull_request_template,pull_request_template. 
pull_request_template,Proposed changes. Describe the changes here.
pull_request_template,Issues. Links to any issues resolved.
pull_request_template,"Types of changes. What types of changes does your code introduce to agents-aea? _Put an in the boxes that apply_ - [ ] Bugfix (non-breaking change that fixes an issue) - [ ] New feature (non-breaking change that adds functionality) - [ ] Breaking change (fix or feature that would cause existing functionality to stop working as expected) - [ ] Something else (e.g. test, package, script, example, deployment, infrastructure, ...)"
pull_request_template,"Checklist. ,If applicable: - [ ] I have added tests that prove my fix is effective or that my feature works. - [ ] I have checked that code coverage does not decrease. - [ ] I have added/updated the documentations. - [ ] Dependent changes have been merged and published in downstream modules."
pull_request_template,"Further comments. If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution you did, what alternatives you considered, etc."
release,release. 
release,Release summary. Version number: [e.g. 1.0.1]
release,Release details. Describe in short the main changes with the new release.
release,"Checklist. _Put an in the boxes that apply._ - [ ] I am making a pull request against the branch from . - [ ] Lint and unit tests pass locally. - [ ] I have checked the fingerprint hashes are correct by running (). - [ ] I have regenerated and updated the latest API docs. - [ ] I built the documentation and updated it with the latest changes. - [ ] I have added an item in for this release. - [ ] I bumped the version number in the file. - [ ] I bumped the version number in every Docker image of the repo and published it. Also, I built and published them with tag (check the READMEs of at https://github.com/fetchai/agents-aea/blob/master/develop-image/README.md#publish and at https://github.com/fetchai/agents-aea/blob/master/develop-image/user-image/README.md#publish) - [ ] I have pushed the latest packages to the registry. - [ ] I have uploaded the latest to PyPI. - [ ] I have uploaded the latest plugins to PyPI."
release,"Further comments. Write here any other comment about the release, if any."
Release Process from develop to main,"Release Process from develop to main. # Release Process from develop to main 1. Make sure all tests pass, coverage is at 100% and the local branch is in a clean state (nothing to commit). Make sure you have a clean develop virtual environment. 2. Determine the next AEA version (we use [semantic versioning v 2.0.0][semver]). Create a new release branch named ""feature/release-<NEW-VERSION>"" (e.g. feature/release-1.0.0). Switch to this branch. Run . Commit if satisfied. 3. Bump plugin versions if necessary by running . Commit if satisfied. 4. Check the protocols are up-to-date by running . Commit if changes occurred. 5. Bump all the packages to their latest versions by running . 6. Check the package upgrades are correct by running and . Commit if satisfied. 7. Check the docs are up-to-date by running and . Ensure all API pages are added into . Ensure documentation can be built: . Commit if satisfied. 8. Write release notes and place them in . Add upgrading tips in . If necessary, adjust version references in . Commit if satisfied. 9. Run spell checker . Run . Commit if required. 10. Open a PR from feature/release-<NEW-VERSION> and merge into develop. 11. Switch to the develop branch, open a PR from develop to main. If there are failures, fix them in a branch off of develop and merge into develop. Repeat until no failure in the develop to main PR. 12. Release packages into registry: . You might have to run the script a few times until all packages are updated due to a specific dependency structure. 13. Merge the develop to main PR. 14. Tag version on main. 15. Pull main, make a clean environment ( and ). 16. Create a distribution: . 17. Publish to PyPI with twine: . Optionally, publish to Test-PyPI with twine: . 18. For each plugin: create a distribution () then perform step 17. > Note, the AEA develop docker image is automatically created as part of the CI process in the develop to main PR. > If something goes wrong and only needs a small fix, do as version, apply fixes, push again to PyPI. [semver]: https://semver.org/spec/v2.0.0.html"
Notes for Development,Notes for Development. # Notes for Development
Notes for Development,Threading. - always join the thread. Setting no timeout means the calling thread's execution will block until the thread is terminated (<https://docs.python.org/3/library/threading.html>)
bash-logging,bash-logging. 
bash-por,bash-por. 
bash-raspberry-set-up,bash-raspberry-set-up. 
bash-gym-skill,bash-gym-skill. 
bash-ledger-integration,bash-ledger-integration. 
bash-tac-skills-contract,bash-tac-skills-contract. 
