title,text
bash-http-connection-and-skill,bash-http-connection-and-skill. 
DEVELOPING,DEVELOPING. 
DEVELOPING,"Development setup. The easiest way to get set up for development is to install Python and poetry at https://pypi.org/project/poetry/, and then run the following from the top-level project directory:"
DEVELOPING,"Development commands. There are various makefile commands that help the development. Some of them are: - To run lint checks: - To run tests: Before committing and opening a PR, use the above commands to run the checks locally. This saves CI hours and ensures you only commit clean code."
Contributing,"Contributing. # Contributing Contributions to this library are welcome. - If you want to report a bug or ask for features, you can check the Issues page at https://github.com/fetchai/jenesis/issues and raise an issue. - If you would like to contribute a bug fix or feature then submit a Pull request at https://github.com/fetchai/jenesis/pulls. Before reading on, please have a look at the code of conduct at CODE_OF_CONDUCT.md."
Contributing,"A few simple rules. - Before working on a feature, reach out to one of the core developers or discuss the feature in an issue. The framework caters a diverse audience and new features require upfront coordination. - Include unit tests when you contribute new features, as they help to a) prove that your code works correctly, and b) guard against future breaking changes to lower the maintenance cost. - Bug fixes also generally require unit tests, because the presence of bugs usually indicates insufficient test coverage. - Keep API compatibility in mind when you change code in . Above version , breaking changes can happen across versions with different left digit. Below version , they can happen across versions with different middle digit. Reviewers of your pull request will comment on any API compatibility issues. - When you contribute a new feature to , the maintenance burden is transferred to the core team. This means that the benefit of the contribution must be compared against the cost of maintaining the feature. - Where possible, extend existing features instead of replacing one. - Before committing and opening a PR, run all tests locally. This saves CI hours and ensures you only commit clean code."
Contributing,"Contributing code. If you have improvements, send us your pull requests! A team member will be assigned to review your pull requests. All tests are run as part of CI as well as various other checks (linters, static type checkers, security checkers, etc). If there are any problems, feedback is provided via GitHub. Once the pull requests is approved and passes continuous integration checks, you or a team member can merge it. If you want to contribute, start working through the codebase, navigate to the Github Issues page at https://github.com/fetchai/jenesis/issues tab and start looking through interesting issues. If you decide to start on an issue, leave a comment so that other people know that you're working on it. If you want to help out, but not alone, use the issue comment thread to coordinate."
Contributing,"Commits and PRs. This project uses Conventional Commits to generate release notes and to determine versioning. Commit messages should adhere to this standard and be of the form: Further details on can be found here: <https://www.conventionalcommits.org/en/v1.0.0/> When merging a branch, PRs should be squashed into one conventional commit by selecting the option. This ensures Release notes are useful and readable when releases are created. <!-- --> <img src=""https://docs.github.com/assets/images/help/pull_requests/select-squash-and-merge-from-drop-down-menu.png"" alt=""drawing"" style=""width:600px;""/>"
Add contract templates,"Add contract templates. # Add contract templates Once you have successfully created your project, you can add contract templates. You first need to navigate to your project's directory and run the following command: You can find all the contract templates available in Jenesis Templates at https://github.com/fetchai/jenesis-templates. An example of how to add the template **cw20-base** with the name is given below: If you need multiple deployments of the same contract, you can use the or flag to specify multiple deployments and name them. Jenesis will add the deployments to all profiles for the specified contract. In the example below, and deployments have been added. This will allow you to deploy contract with two different configurations. You can add as many deployments as you wish. If no deployments are selected when adding a contract, the default deployment name will be equal to the contract name. This command will add a contract template to your jenesis project inside folder. It will also update the configuration file with the contract information. The field can be manually specified, you can choose any private key locally available to deploy any specific contract. You can also leave this field empty since the command has an optional argument to deploy all contracts inside a specified profile with the same key, overriding this argument in the file. See deploy contracts at deploy-contracts.md for more information. Finally, the section contains the parameters needed in the instantiation message for this contract to be deployed. The required parameters are taken from the schema file inside the directory. Since this contract template doesn't include a schema, it will be generated when compiling at compile-contracts.md the contract loading the init fields to the file. You will need to manually add the values for these parameters in their correct variable type, which are listed on the schema file. For this **my_token** contract, we need to fill the following init fields for each deployment after compiling at compile-contracts.md. Here is an example: If your contract requires nested instantiation messages you may add fields following this structure: > *NOTE: Before editing the configuration file with the desired and parameters, make sure to first compile at compile-contracts.md your contract. All configuration parameters will restart every time a contract is compiled if the schema has changed.* You can also add contracts manually by copying and pasting the contract directory from another project you may have, however, they need to follow the same directory structure as the **starter** template mentioned above. When you add a contract manually, you need to update the file with the contract information by running: The command will automatically detect which contract is missing in the configuration file by revising the contracts directory. # Add contract deployments You can also add further deployments for a given contract by specifying the contract name and the deployment name. If we want to add a third token called using contract, we can run: This will automatically create another deployment entry called . # Attach deployed contracts If you add a contract into the project's contract folder that has already been deployed in the network, you can attach the deployment to your project for future interaction using the command. To add a deployment to yout project you can run: Then compile the contract: To attach the contract, you will need to specify the deployment's name and address. You can optionally specify the profile where you wish to insert the contract into. If this is not specified, the deployment will be attached to the default profile, which is the first profile created in your project, unless the settings are manually changed. This will add the relevant deployment information into a file and you will now be able to interact with using contract interactions at use-contracts.md."
Introduction,"Introduction. # Introduction Jenesis is a command line tool for rapid contract and service development for the Fetch.ai blockchain ecosystem and other CosmWasm-enabled blockchains. # System Requirements Jenesis currently requires: - OS: Linux, MacOS - Python: 3.8 to 3.10 - Docker: 20.10.22 or higher recommended - git: Any # Installation Install via PyPI: # Getting started There are multiple commands integrated into jenesis that allow you to perform a variety of tasks these commands are: - - - - - - - - - - -"
Introduction,"Create a new project. Create a project using the command This will create a new directory called . You can use and optional arguments; when they aren't used, profile and network will be set to and respectively. Inside this directory a file will be created containing the following information: The project name is the argument passed to the command while the authors field is populated by querying the user's GitHub username and email address. The profile's network will be filled with the relevant configuration variables. The contracts field will remain empty until new contracts are added. This profile will be set as the default profile, this means that every time you use a jenesis command without specifying a profile, will be used. An empty folder will also be created inside directory that will eventually contain all the information needed to compile and deploy the desired contracts. The command is similar to the command, but in this case, you won't need a project name argument since this command is intended to run inside an existing project directory. This command will create the same files and folders inside your project directory as the ones described for the command. If using a cargo workspace, you just need to navigate to the top level of your project and run the command shown above. This will create the configuration file inside your workspace including all the relevant information from existing contracts."
Introduction,"Configure a network. By default, jenesis will configure the project to run on the latest stable Fetch.ai testnet. Use to configure for the Fetch.ai mainnet or directly edit the file to configure for other networks. To test on a local node, pass the argument when creating a project: or The configuration can be found under the heading in the file and can be changed as desired: In particular, to fund some accounts for testing, replace the field with the addresses to be funded. When running any of the commands , , , and , jenesis will check for a currently running local node, and if there is none, a new one will be created in a docker container. If you wish to keep a local node running, you need to set the parameter to . Otherwise, nodes will be stopped after any of the command mentioned above finish running. At any time, you can start or stop a local node by running: or To view the logs from the local node, run:"
Contract Interaction,Contract Interaction. # Contract Interaction You can interact with your project's contracts by using the or commands.
Contract Interaction,"Previous steps. To reproduce the examples in this document, add and compile a basic starter contract and a cw20 token contract to your project with the following commands: For more contract template examples visit Jenesis Templates at https://github.com/fetchai/jenesis-templates"
Contract Interaction,"Interactive Shell. To open a shell where you can easily interact with your contracts, run: If a profile is not selected, the default profile will be selected automatically. You can specify any profile using the optional argument: You will observe the following text indicating the available contracts in your project. > *NOTE: currently requires that contract names use accepted python variable names. For example, using instead of will generate an error when trying to interact with it.* In this case, we can see that and deployments are available for this project. If these contracts have been already deployed you can directly interact with them by performing contract querys and executions such as: A ledger client () and your locally stored wallet keys will also be available in the shell. For example, if you have a local key named , you will find this under and you can query the balance as follows: If the ledger is a testnet with a faucet url, you can get funds using the :"
Contract Interaction,"Dynamic Methods. Jenesis also attaches the contract query, execution and deploy messages as dynamic methods. For example, the following query can also be run with: Similarly, instead of using , a transfer can be executed with: Jensesis also has an autocompletion helper for query, execution and deployment arguments. It will show automatically when typing in the shell. We will now show an example assuming that the deployment contract has only been compiled and not yet deployed, going through deployment, execution, and querying using dynamic methods. For this example, we will first generate two wallets. We provide wealth to the sender wallet in atestfet so it can pay for transaction fees. We now proceed to deploy contract using deployment configuration, we define the arguments for the cw20 token: name, symbol, decimal, and the addresses that will be funded with these cw20 tokens. In this case we will fund wallet's address with 5000 tokens. We can query wallet balance to make sure it has been funded with cw20 tokens We now execute a cw20 token transfer of 1000 tokens from wallet to wallet2 Finally, we query both wallet's balance We can observe that wallet has sent 1000 tokens to wallet2."
Contract Interaction,"Executing Scripts. You can also assemble the above commands into a script that is executable by the command: If we paste the above code into the file script.py inside the project's directory, we can run it with: And you will observe the same output as before. You can also specify the profile as an optional argument using . Finally, you can pass arguments to the script just as you would to a standard python script by placing all the arguments to the script after the delimiter: You can visit CosmPy at https://docs.fetch.ai/CosmPy/ for more contract interaction examples."
compile-contracts,compile-contracts. 
compile-contracts,"Compile contracts. Compile your contracts by running the following command inside your project directory: This will compile all packages in your project's contracts directory and output the wasm code under the artifacts directory. If using a cargo workspace, jenesis will automatically detect this and the compiled contracts will appear in the . Otherwise, they will go to the directory under the individual contracts. By default, the contracts are simply compiled and not optimized. For an optimized build, use the flag or . To force a rebuild, use the flag or . To suppress contract compilation logs, use the flag . In case of compilation failure, the logs will show by default. > *Note: requires that docker is running and configured with permissions for your user.*"
add-profile,"add-profile. You can add more profiles than the one specified using the command by running the following command: By default, the profile's network will be set to , but you can specify it using the optional argument. The following will be added to the existing information in your file: Currently available network configurations are , , and , but Jenesis is easily configurable for other networks by directly editing the file."
Deploy contracts,"Deploy contracts. # Deploy contracts Once you have successfully compiled your contracts, make sure to fill out the necessary instantiation message information under the field in the file. > *Note: currently requires that each contract's directory name matches the file name under the directory. To deploy all the contracts inside a profile you have two options: 1. Fill the field for each contract inside the file (keys can be different for each contract) and run the following command: Each contract inside the specified profile will be deployed with the specified key. 2. Simply specify a certain key as an argument of the deploy command: The field will be ignored in this case and all contracts inside the specified profile will be deployed using the key . After running either of the commands mentioned above, all the deployment information will be saved in the file inside your project's directory"
Deploy contracts,"Deploy contracts that depend on other deployments. You can point to other contract addresses in any contract's instantiation message if required. For example: if you have contracts , , and within your project, but contract requires contract's deployment address in its instantiation message and contract requires contract's deployment address, they will need to be deployed in the following order: , , . In order to provide this information to you will need to specify where exactly these contract addresses need to be inserted inside the instantiation messages. You can do this by writing the symbol followed by the contract name in the corresponding field in the init parameters: Finally, will detect this information and deploy the contracts in the correct order: , , ."
keys,"keys. With the command you can either list all the locally available keys or show the address of a specific key. To list all the keys available run the following command: To look up the address for a specified key you can use the command and pass the key name as an argument: To access other key functionalities such as adding new keys, looking up an address, and recovering keys you can use fetchd CLI - Managing Keys at https://docs.fetch.ai/ledger_v2/cli-keys/"
