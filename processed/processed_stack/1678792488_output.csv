title,text
aea.runtime,"aea.runtime. <a id=""aea.runtime""></a> # aea.runtime This module contains the implementation of runtime for economic agent (AEA). <a id=""aea.runtime.RuntimeStates""></a>"
aea.runtime,"RuntimeStates Objects. Runtime states. <a id=""aea.runtime.BaseRuntime""></a>"
aea.runtime,"BaseRuntime Objects. Abstract runtime class to create implementations. <a id=""aea.runtime.BaseRuntime.__init__""></a> #### init Init runtime. **Arguments**: - : Agent to run. - : options for the multiplexer. - : agent main loop mode. - : optional event loop. if not provided a new one will be created. - : if True, run in threaded mode, else async - : mode of the task manager. <a id=""aea.runtime.BaseRuntime.storage""></a> #### storage Get optional storage. <a id=""aea.runtime.BaseRuntime.loop_mode""></a> #### loopmode Get current loop mode. <a id=""aea.runtime.BaseRuntime.task_manager""></a> #### taskmanager Get the task manager. <a id=""aea.runtime.BaseRuntime.loop""></a> #### loop Get event loop. <a id=""aea.runtime.BaseRuntime.agent_loop""></a> #### agentloop Get the agent loop. <a id=""aea.runtime.BaseRuntime.multiplexer""></a> #### multiplexer Get multiplexer. <a id=""aea.runtime.BaseRuntime.is_running""></a> #### isrunning Get running state of the runtime. <a id=""aea.runtime.BaseRuntime.is_stopped""></a> #### isstopped Get stopped state of the runtime. <a id=""aea.runtime.BaseRuntime.state""></a> #### state Get runtime state. **Returns**: RuntimeStates <a id=""aea.runtime.BaseRuntime.decision_maker""></a> #### decisionmaker Return decision maker if set. <a id=""aea.runtime.BaseRuntime.set_decision_maker""></a> #### setdecisionmaker Set decision maker with handler provided. <a id=""aea.runtime.BaseRuntime.set_loop""></a> #### setloop Set event loop to be used. **Arguments**: - : event loop to use. <a id=""aea.runtime.AsyncRuntime""></a>"
aea.runtime,"AsyncRuntime Objects. Asynchronous runtime: uses asyncio loop for multiplexer and async agent main loop. <a id=""aea.runtime.AsyncRuntime.__init__""></a> #### init Init runtime. **Arguments**: - : Agent to run. - : options for the multiplexer. - : agent main loop mode. - : optional event loop. if not provided a new one will be created. - : if True, run in threaded mode, else async - : mode of the task manager. <a id=""aea.runtime.AsyncRuntime.set_loop""></a> #### setloop Set event loop to be used. **Arguments**: - : event loop to use. <a id=""aea.runtime.AsyncRuntime.run""></a> #### run Start runtime task. Starts multiplexer and agent loop. <a id=""aea.runtime.AsyncRuntime.stop_runtime""></a> #### stopruntime Stop runtime coroutine. Stop main loop. Tear down the agent.. Disconnect multiplexer. <a id=""aea.runtime.AsyncRuntime.run_runtime""></a> #### runruntime Run runtime which means start agent loop, multiplexer and storage. <a id=""aea.runtime.ThreadedRuntime""></a>"
aea.runtime,ThreadedRuntime Objects. Run agent and multiplexer in different threads with own asyncio loops.
aea.multiplexer,"aea.multiplexer. <a id=""aea.multiplexer""></a> # aea.multiplexer Module for the multiplexer class and related classes. <a id=""aea.multiplexer.MultiplexerStatus""></a>"
aea.multiplexer,"MultiplexerStatus Objects. The connection status class. <a id=""aea.multiplexer.MultiplexerStatus.__init__""></a> #### init Initialize the connection status. <a id=""aea.multiplexer.MultiplexerStatus.is_connected""></a> #### isconnected Return is connected. <a id=""aea.multiplexer.MultiplexerStatus.is_connecting""></a> #### isconnecting Return is connecting. <a id=""aea.multiplexer.MultiplexerStatus.is_disconnected""></a> #### isdisconnected Return is disconnected. <a id=""aea.multiplexer.MultiplexerStatus.is_disconnecting""></a> #### isdisconnecting Return is disconnected. <a id=""aea.multiplexer.AsyncMultiplexer""></a>"
aea.multiplexer,AsyncMultiplexer Objects. 
aea.multiplexer,"Multiplexer Objects. Transit sync multiplexer for compatibility. <a id=""aea.multiplexer.Multiplexer.__init__""></a> #### init Initialize the connection multiplexer. **Arguments**: - : arguments - : keyword arguments <a id=""aea.multiplexer.Multiplexer.set_loop""></a> #### setloop Set event loop and all event loop related objects. **Arguments**: - : asyncio event loop. <a id=""aea.multiplexer.Multiplexer.connect""></a> #### connect Connect the multiplexer. Synchronously in thread spawned if new loop created. <a id=""aea.multiplexer.Multiplexer.disconnect""></a> #### disconnect Disconnect the multiplexer. Also stops a dedicated thread for event loop if spawned on connect. <a id=""aea.multiplexer.Multiplexer.put""></a> #### put Schedule an envelope for sending it. Notice that the output queue is an asyncio.Queue which uses an event loop running on a different thread than the one used in this function. **Arguments**: - : the envelope to be sent. <a id=""aea.multiplexer.InBox""></a>"
aea.multiplexer,"InBox Objects. A queue from where you can only consume envelopes. <a id=""aea.multiplexer.InBox.__init__""></a> #### init Initialize the inbox. **Arguments**: - : the multiplexer <a id=""aea.multiplexer.InBox.empty""></a> #### empty Check for a envelope on the in queue. **Returns**: boolean indicating whether there is an envelope or not <a id=""aea.multiplexer.InBox.get""></a> #### get Check for a envelope on the in queue. **Arguments**: - : make the call blocking (ignore the timeout). - : times out the block after timeout seconds. **Raises**: - : if the attempt to get an envelope fails. **Returns**: the envelope object. <a id=""aea.multiplexer.InBox.get_nowait""></a> #### getnowait Check for a envelope on the in queue and wait for no time. **Returns**: the envelope object <a id=""aea.multiplexer.InBox.async_get""></a> #### asyncget Check for a envelope on the in queue. **Returns**: the envelope object. <a id=""aea.multiplexer.InBox.async_wait""></a> #### asyncwait Check for a envelope on the in queue. <a id=""aea.multiplexer.OutBox""></a>"
aea.multiplexer,"OutBox Objects. A queue from where you can only enqueue envelopes. <a id=""aea.multiplexer.OutBox.__init__""></a> #### init Initialize the outbox. **Arguments**: - : the multiplexer <a id=""aea.multiplexer.OutBox.empty""></a> #### empty Check for a envelope on the in queue. **Returns**: boolean indicating whether there is an envelope or not <a id=""aea.multiplexer.OutBox.put""></a> #### put Put an envelope into the queue. **Arguments**: - : the envelope. <a id=""aea.multiplexer.OutBox.put_message""></a> #### putmessage Put a message in the outbox. This constructs an envelope with the input arguments. **Arguments**: - : the message - : the envelope context"
aea.identity.base,"aea.identity.base. <a id=""aea.identity.base""></a> # aea.identity.base This module contains the identity class. <a id=""aea.identity.base.Identity""></a>"
aea.identity.base,"Identity Objects. The identity holds the public elements identifying an agent. It includes: - the agent name - the addresses, a map from address identifier to address (can be a single key-value pair) <a id=""aea.identity.base.Identity.__init__""></a> #### init Instantiate the identity. **Arguments**: - : the name of the agent. - : the default address of the agent. - : the public key of the agent. - : the addresses of the agent. - : the public keys of the agent. - : the key for the default address. <a id=""aea.identity.base.Identity.default_address_key""></a> #### defaultaddresskey Get the default address key. <a id=""aea.identity.base.Identity.name""></a> #### name Get the agent name. <a id=""aea.identity.base.Identity.addresses""></a> #### addresses Get the addresses. <a id=""aea.identity.base.Identity.address""></a> #### address Get the default address. <a id=""aea.identity.base.Identity.public_keys""></a> #### publickeys Get the public keys. <a id=""aea.identity.base.Identity.public_key""></a> #### publickey Get the default public key."
aea.helpers.installdependency,"aea.helpers.installdependency. <a id=""aea.helpers.install_dependency""></a> # aea.helpers.installdependency Helper to install python dependencies. <a id=""aea.helpers.install_dependency.install_dependency""></a> #### installdependency Install python dependency to the current python environment. **Arguments**: - : name of the python package - : Dependency specification - : the logger - : timeout to wait pip to install <a id=""aea.helpers.install_dependency.install_dependencies""></a> #### installdependencies Install python dependencies to the current python environment. **Arguments**: - : dict of dependency name and specification - : the logger - : timeout to wait pip to install <a id=""aea.helpers.install_dependency.call_pip""></a> #### callpip Run pip install command. **Arguments**: - : list strings of the command - : timeout to wait pip to install - : bool, try one more time if command failed <a id=""aea.helpers.install_dependency.run_install_subprocess""></a> #### runinstallsubprocess Try executing install command. **Arguments**: - : list strings of the command - : timeout to wait pip to install **Returns**: the return code of the subprocess"
aea.helpers.exectimeout,"aea.helpers.exectimeout. <a id=""aea.helpers.exec_timeout""></a> # aea.helpers.exectimeout Python code execution time limit tools. <a id=""aea.helpers.exec_timeout.TimeoutResult""></a>"
aea.helpers.exectimeout,"TimeoutResult Objects. Result of ExecTimeout context manager. <a id=""aea.helpers.exec_timeout.TimeoutResult.__init__""></a> #### init Init. <a id=""aea.helpers.exec_timeout.TimeoutResult.set_cancelled_by_timeout""></a> #### setcancelledbytimeout Set code was terminated cause timeout. <a id=""aea.helpers.exec_timeout.TimeoutResult.is_cancelled_by_timeout""></a> #### iscancelledbytimeout Return True if code was terminated by ExecTimeout cause timeout. **Returns**: bool <a id=""aea.helpers.exec_timeout.TimeoutException""></a>"
aea.helpers.exectimeout,"TimeoutException Objects. TimeoutException raised by ExecTimeout context managers in thread with limited execution time. Used internally, does not propagated outside of context manager <a id=""aea.helpers.exec_timeout.BaseExecTimeout""></a>"
aea.helpers.exectimeout,"BaseExecTimeout Objects. Base class for implementing context managers to limit python code execution time. exception_class - is exception type to raise in code controlled in case of timeout. <a id=""aea.helpers.exec_timeout.BaseExecTimeout.__init__""></a> #### init Init. **Arguments**: - : number of seconds to execute code before interruption <a id=""aea.helpers.exec_timeout.BaseExecTimeout.__enter__""></a> #### enter Enter context manager. **Returns**: TimeoutResult <a id=""aea.helpers.exec_timeout.BaseExecTimeout.__exit__""></a> #### exit Exit context manager. **Arguments**: - : the exception type - : the exception - : the traceback <a id=""aea.helpers.exec_timeout.ExecTimeoutSigAlarm""></a>"
aea.helpers.exectimeout,"ExecTimeoutSigAlarm Objects. ExecTimeout context manager implementation using signals and SIGALARM. Does not support threads, have to be used only in main thread. <a id=""aea.helpers.exec_timeout.ExecTimeoutThreadGuard""></a>"
aea.helpers.exectimeout,"ExecTimeoutThreadGuard Objects. ExecTimeout context manager implementation using threads and PyThreadState_SetAsyncExc. Support threads. Requires supervisor thread start/stop to control execution time control. Possible will be not accurate in case of long c functions used inside code controlled. <a id=""aea.helpers.exec_timeout.ExecTimeoutThreadGuard.__init__""></a> #### init Init ExecTimeoutThreadGuard variables. **Arguments**: - : number of seconds to execute code before interruption <a id=""aea.helpers.exec_timeout.ExecTimeoutThreadGuard.start""></a> #### start Start supervisor thread to check timeouts. Supervisor starts once but number of start counted. <a id=""aea.helpers.exec_timeout.ExecTimeoutThreadGuard.stop""></a> #### stop Stop supervisor thread. Actual stop performed on force == True or if number of stops == number of starts **Arguments**: - : force stop regardless number of start."
aea.helpers.httprequests,"aea.helpers.httprequests. <a id=""aea.helpers.http_requests""></a> # aea.helpers.httprequests Wrapper over requests library. <a id=""aea.helpers.http_requests.add_default_timeout""></a> #### adddefaulttimeout Add default timeout for requests methods."
aea.helpers.asyncfriendlyqueue,"aea.helpers.asyncfriendlyqueue. <a id=""aea.helpers.async_friendly_queue""></a> # aea.helpers.asyncfriendlyqueue This module contains the implementation of AsyncFriendlyQueue. <a id=""aea.helpers.async_friendly_queue.AsyncFriendlyQueue""></a>"
aea.helpers.asyncfriendlyqueue,"AsyncFriendlyQueue Objects. queue.Queue with async_get method. <a id=""aea.helpers.async_friendly_queue.AsyncFriendlyQueue.__init__""></a> #### init Init queue. <a id=""aea.helpers.async_friendly_queue.AsyncFriendlyQueue.put""></a> #### put Put an item into the queue. **Arguments**: - : item to put in the queue - : similar to queue.Queue.put - : similar to queue.Queue.put <a id=""aea.helpers.async_friendly_queue.AsyncFriendlyQueue.get""></a> #### get Get an item into the queue. **Arguments**: - : similar to queue.Queue.get - : similar to queue.Queue.get **Returns**: similar to queue.Queue.get <a id=""aea.helpers.async_friendly_queue.AsyncFriendlyQueue.async_wait""></a> #### asyncwait Wait an item appears in the queue. **Returns**: None <a id=""aea.helpers.async_friendly_queue.AsyncFriendlyQueue.async_get""></a> #### asyncget Wait and get an item from the queue. **Returns**: item from queue"
aea.helpers.fileio,"aea.helpers.fileio. <a id=""aea.helpers.file_io""></a> # aea.helpers.fileio Read to and write from file with envelopes. <a id=""aea.helpers.file_io.lock_file""></a> #### lockfile Lock file in context manager. **Arguments**: - : file descriptor of file to lock. - : the logger. **Returns**: generator <a id=""aea.helpers.file_io.write_envelope""></a> #### writeenvelope Write envelope to file. <a id=""aea.helpers.file_io.write_with_lock""></a> #### writewithlock Write bytes to file protected with file lock. <a id=""aea.helpers.file_io.envelope_from_bytes""></a> #### envelopefrombytes Decode bytes to get the envelope. **Arguments**: - : the encoded envelope - : the separator used - : the logger **Returns**: Envelope"
aea.helpers.filelock,"aea.helpers.filelock. <a id=""aea.helpers.file_lock""></a> # aea.helpers.filelock Patch of 'fnctl' to make it compatible with Windows."
aea.helpers.multipleexecutor,"aea.helpers.multipleexecutor. <a id=""aea.helpers.multiple_executor""></a> # aea.helpers.multipleexecutor This module contains the helpers to run multiple stoppable tasks in different modes: async, threaded, multiprocess . <a id=""aea.helpers.multiple_executor.ExecutorExceptionPolicies""></a>"
aea.helpers.multipleexecutor,"ExecutorExceptionPolicies Objects. Runner exception policy modes. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask""></a>"
aea.helpers.multipleexecutor,"AbstractExecutorTask Objects. Abstract task class to create Task classes. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.__init__""></a> #### init Init task. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.future""></a> #### future Return awaitable to get result of task execution. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.future""></a> #### future Set awaitable to get result of task execution. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.start""></a> #### start Implement start task function here. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.stop""></a> #### stop Implement stop task function here. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.create_async_task""></a> #### createasynctask Create asyncio task for task run in asyncio loop. **Arguments**: - : the event loop **Returns**: task to run in asyncio loop. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.id""></a> #### id Return task id. <a id=""aea.helpers.multiple_executor.AbstractExecutorTask.failed""></a> #### failed Return was exception failed or not. If it's running it's not failed. **Returns**: bool <a id=""aea.helpers.multiple_executor.AbstractMultiprocessExecutorTask""></a>"
aea.helpers.multipleexecutor,"AbstractMultiprocessExecutorTask Objects. Task for multiprocess executor. <a id=""aea.helpers.multiple_executor.AbstractMultiprocessExecutorTask.start""></a> #### start Return function and arguments to call within subprocess. <a id=""aea.helpers.multiple_executor.AbstractMultiprocessExecutorTask.create_async_task""></a> #### createasynctask Create asyncio task for task run in asyncio loop. Raise error, cause async mode is not supported, cause this task for multiprocess executor only. **Arguments**: - : the event loop **Raises**: - : async task construction not possible <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor""></a>"
aea.helpers.multipleexecutor,"AbstractMultipleExecutor Objects. Abstract class to create multiple executors classes. <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.__init__""></a> #### init Init executor. **Arguments**: - : sequence of AbstractExecutorTask instances to run. - : the exception policy of all the tasks <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.is_running""></a> #### isrunning Return running state of the executor. <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.start""></a> #### start Start tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.stop""></a> #### stop Stop tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.num_failed""></a> #### numfailed Return number of failed tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.failed_tasks""></a> #### failedtasks Return sequence failed tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleExecutor.not_failed_tasks""></a> #### notfailedtasks Return sequence successful tasks. <a id=""aea.helpers.multiple_executor.ThreadExecutor""></a>"
aea.helpers.multipleexecutor,"ThreadExecutor Objects. Thread based executor to run multiple agents in threads. <a id=""aea.helpers.multiple_executor.ProcessExecutor""></a>"
aea.helpers.multipleexecutor,"ProcessExecutor Objects. Subprocess based executor to run multiple agents in threads. <a id=""aea.helpers.multiple_executor.AsyncExecutor""></a>"
aea.helpers.multipleexecutor,"AsyncExecutor Objects. Thread based executor to run multiple agents in threads. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner""></a>"
aea.helpers.multipleexecutor,"AbstractMultipleRunner Objects. Abstract multiple runner to create classes to launch tasks with selected mode. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.__init__""></a> #### init Init with selected executor mode. **Arguments**: - : one of supported executor modes - : one of ExecutorExceptionPolicies to be used with Executor <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.is_running""></a> #### isrunning Return state of the executor. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.start""></a> #### start Run agents. **Arguments**: - : run in dedicated thread without blocking current thread. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.stop""></a> #### stop Stop agents. **Arguments**: - : timeout in seconds to wait thread stopped, only if started in thread mode. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.num_failed""></a> #### numfailed Return number of failed tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.failed""></a> #### failed Return sequence failed tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.not_failed""></a> #### notfailed Return sequence successful tasks. <a id=""aea.helpers.multiple_executor.AbstractMultipleRunner.try_join_thread""></a> #### tryjointhread Try to join thread if running in thread mode."
