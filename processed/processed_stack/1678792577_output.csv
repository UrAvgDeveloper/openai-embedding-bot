title,text
aea.manager.utils,"aea.manager.utils. <a id=""aea.manager.utils""></a> # aea.manager.utils Multiagent manager utils. <a id=""aea.manager.utils.get_lib_path""></a> #### getlibpath Get librarty path for env dir. <a id=""aea.manager.utils.make_venv""></a> #### makevenv Make venv and update variable to use it. **Arguments**: - : str, path for new env dir - : bool. use evn within this python process (update, sys.executable and sys.path) <a id=""aea.manager.utils.project_install_and_build""></a> #### projectinstallandbuild Install project dependencies and build required components. <a id=""aea.manager.utils.get_venv_dir_for_project""></a> #### getvenvdirforproject Get virtual env directory for project specified. <a id=""aea.manager.utils.project_check""></a> #### projectcheck Perform project loads well. <a id=""aea.manager.utils.run_in_venv""></a> #### runinvenv Run python function in a dedicated process with virtual env specified."
aea.contracts.base,"aea.contracts.base. <a id=""aea.contracts.base""></a> # aea.contracts.base The base contract. <a id=""aea.contracts.base.Contract""></a>"
aea.contracts.base,"Contract Objects. Abstract definition of a contract. <a id=""aea.contracts.base.Contract.__init__""></a> #### init Initialize the contract. **Arguments**: - : the contract configurations. - : the keyword arguments. <a id=""aea.contracts.base.Contract.id""></a> #### id Get the name. <a id=""aea.contracts.base.Contract.configuration""></a> #### configuration Get the configuration. <a id=""aea.contracts.base.Contract.get_instance""></a> #### getinstance Get the instance. **Arguments**: - : the ledger api we are using. - : the contract address. **Returns**: the contract instance <a id=""aea.contracts.base.Contract.from_dir""></a> #### fromdir Load the protocol from a directory. **Arguments**: - : the directory to the skill package. - : the keyword arguments. **Returns**: the contract object. <a id=""aea.contracts.base.Contract.from_config""></a> #### fromconfig Load contract from configuration. **Arguments**: - : the contract configuration. - : the keyword arguments. **Returns**: the contract object. <a id=""aea.contracts.base.Contract.get_deploy_transaction""></a> #### getdeploytransaction Handler method for the 'GET_DEPLOY_TRANSACTION' requests. Implement this method in the sub class if you want to handle the contract requests manually. **Arguments**: - : the ledger apis. - : The address that will deploy the contract. - : keyword arguments. **Returns**: the tx <a id=""aea.contracts.base.Contract.get_raw_transaction""></a> #### getrawtransaction Handler method for the 'GET_RAW_TRANSACTION' requests. Implement this method in the sub class if you want to handle the contract requests manually. **Arguments**: - : the ledger apis. - : the contract address. - : the keyword arguments. **Returns**: the tx # noqa: DAR202 <a id=""aea.contracts.base.Contract.get_raw_message""></a> #### getrawmessage Handler method for the 'GET_RAW_MESSAGE' requests. Implement this method in the sub class if you want to handle the contract requests manually. **Arguments**: - : the ledger apis. - : the contract address. - : the keyword arguments. **Returns**: the tx # noqa: DAR202 <a id=""aea.contracts.base.Contract.get_state""></a> #### getstate Handler method for the 'GET_STATE' requests. Implement this method in the sub class if you want to handle the contract requests manually. **Arguments**: - : the ledger apis. - : the contract address. - : the keyword arguments. **Returns**: the tx # noqa: DAR202"
aea.registries.resources,"aea.registries.resources. <a id=""aea.registries.resources""></a> # aea.registries.resources This module contains the resources class. <a id=""aea.registries.resources.Resources""></a>"
aea.registries.resources,"Resources Objects. This class implements the object that holds the resources of an AEA. <a id=""aea.registries.resources.Resources.__init__""></a> #### init Instantiate the resources. **Arguments**: - : the name of the agent <a id=""aea.registries.resources.Resources.agent_name""></a> #### agentname Get the agent name. <a id=""aea.registries.resources.Resources.component_registry""></a> #### componentregistry Get the agent component registry. <a id=""aea.registries.resources.Resources.behaviour_registry""></a> #### behaviourregistry Get the behaviour registry. <a id=""aea.registries.resources.Resources.handler_registry""></a> #### handlerregistry Get the handler registry. <a id=""aea.registries.resources.Resources.model_registry""></a> #### modelregistry Get the model registry. <a id=""aea.registries.resources.Resources.add_component""></a> #### addcomponent Add a component to resources. <a id=""aea.registries.resources.Resources.add_protocol""></a> #### addprotocol Add a protocol to the set of resources. **Arguments**: - : a protocol <a id=""aea.registries.resources.Resources.get_protocol""></a> #### getprotocol Get protocol for given protocol id. **Arguments**: - : the protocol id **Returns**: a matching protocol, if present, else None <a id=""aea.registries.resources.Resources.get_protocol_by_specification_id""></a> #### getprotocolbyspecificationid Get protocol for given protocol_specification_id. **Arguments**: - : the protocol id **Returns**: a matching protocol, if present, else None <a id=""aea.registries.resources.Resources.get_all_protocols""></a> #### getallprotocols Get the list of all the protocols. **Returns**: the list of protocols. <a id=""aea.registries.resources.Resources.remove_protocol""></a> #### removeprotocol Remove a protocol from the set of resources. **Arguments**: - : the protocol id for the protocol to be removed. <a id=""aea.registries.resources.Resources.add_contract""></a> #### addcontract Add a contract to the set of resources. **Arguments**: - : a contract <a id=""aea.registries.resources.Resources.get_contract""></a> #### getcontract Get contract for given contract id. **Arguments**: - : the contract id **Returns**: a matching contract, if present, else None <a id=""aea.registries.resources.Resources.get_all_contracts""></a> #### getallcontracts Get the list of all the contracts. **Returns**: the list of contracts. <a id=""aea.registries.resources.Resources.remove_contract""></a> #### removecontract Remove a contract from the set of resources. **Arguments**: - : the contract id for the contract to be removed. <a id=""aea.registries.resources.Resources.add_connection""></a> #### addconnection Add a connection to the set of resources. **Arguments**: - : a connection <a id=""aea.registries.resources.Resources.get_connection""></a> #### getconnection Get connection for given connection id. **Arguments**: - : the connection id **Returns**: a matching connection, if present, else None <a id=""aea.registries.resources.Resources.get_all_connections""></a> #### getallconnections Get the list of all the connections. **Returns**: the list of connections. <a id=""aea.registries.resources.Resources.remove_connection""></a> #### removeconnection Remove a connection from the set of resources. **Arguments**: - : the connection id for the connection to be removed. <a id=""aea.registries.resources.Resources.add_skill""></a> #### addskill Add a skill to the set of resources. **Arguments**: - : a skill <a id=""aea.registries.resources.Resources.get_skill""></a> #### getskill Get the skill for a given skill id. **Arguments**: - : the skill id **Returns**: a matching skill, if present, else None <a id=""aea.registries.resources.Resources.get_all_skills""></a> #### getallskills Get the list of all the skills. **Returns**: the list of skills. <a id=""aea.registries.resources.Resources.remove_skill""></a> #### removeskill Remove a skill from the set of resources. **Arguments**: - : the skill id for the skill to be removed. <a id=""aea.registries.resources.Resources.get_handler""></a> #### gethandler Get a specific handler. **Arguments**: - : the protocol id the handler is handling - : the skill id of the handler's skill **Returns**: the handler <a id=""aea.registries.resources.Resources.get_handlers""></a> #### gethandlers Get all handlers for a given protocol. **Arguments**: - : the protocol id the handler is handling **Returns**: the list of handlers matching the protocol <a id=""aea.registries.resources.Resources.get_all_handlers""></a> #### getallhandlers Get all handlers from all skills. **Returns**: the list of handlers <a id=""aea.registries.resources.Resources.get_behaviour""></a> #### getbehaviour Get a specific behaviours for a given skill. **Arguments**: - : the skill id - : the behaviour name **Returns**: the behaviour, if it is present, else None <a id=""aea.registries.resources.Resources.get_behaviours""></a> #### getbehaviours Get all behaviours for a given skill. **Arguments**: - : the skill id **Returns**: the list of behaviours of the skill <a id=""aea.registries.resources.Resources.get_all_behaviours""></a> #### getallbehaviours Get all behaviours from all skills. **Returns**: the list of all behaviours <a id=""aea.registries.resources.Resources.setup""></a> #### setup Set up the resources. Calls setup on all resources. <a id=""aea.registries.resources.Resources.teardown""></a> #### teardown Teardown the resources. Calls teardown on all resources."
aea.registries.base,"aea.registries.base. <a id=""aea.registries.base""></a> # aea.registries.base This module contains registries. <a id=""aea.registries.base.Registry""></a>"
aea.registries.base,Registry Objects. 
aea.registries.base,"PublicIdRegistry Objects. This class implement a registry whose keys are public ids. In particular, it is able to handle the case when the public id points to the 'latest' version of a package. <a id=""aea.registries.base.PublicIdRegistry.__init__""></a> #### init Initialize the registry. <a id=""aea.registries.base.PublicIdRegistry.register""></a> #### register Register an item. <a id=""aea.registries.base.PublicIdRegistry.unregister""></a> #### unregister Unregister an item. <a id=""aea.registries.base.PublicIdRegistry.fetch""></a> #### fetch Fetch an item associated with a public id. **Arguments**: - : the public id. **Returns**: an item, or None if the key is not present. <a id=""aea.registries.base.PublicIdRegistry.fetch_all""></a> #### fetchall Fetch all the items. <a id=""aea.registries.base.PublicIdRegistry.ids""></a> #### ids Get all the item ids. <a id=""aea.registries.base.PublicIdRegistry.setup""></a> #### setup Set up the items. <a id=""aea.registries.base.PublicIdRegistry.teardown""></a> #### teardown Tear down the items. <a id=""aea.registries.base.AgentComponentRegistry""></a>"
aea.registries.base,AgentComponentRegistry Objects. 
aea.registries.base,"ComponentRegistry Objects. This class implements a generic registry for skill components. <a id=""aea.registries.base.ComponentRegistry.__init__""></a> #### init Instantiate the registry. **Arguments**: - : kwargs <a id=""aea.registries.base.ComponentRegistry.register""></a> #### register Register a item. **Arguments**: - : a pair (skill id, item name). - : the item to register. - : whether or not the item is dynamically added. **Raises**: - : ValueError if an item is already registered with that item id. <a id=""aea.registries.base.ComponentRegistry.unregister""></a> #### unregister Unregister a item. **Arguments**: - : a pair (skill id, item name). **Raises**: - : ValueError if no item registered with that item id. **Returns**: skill component <a id=""aea.registries.base.ComponentRegistry.fetch""></a> #### fetch Fetch an item. **Arguments**: - : the public id of the item. **Returns**: the Item <a id=""aea.registries.base.ComponentRegistry.fetch_by_skill""></a> #### fetchbyskill Fetch all the items of a given skill. <a id=""aea.registries.base.ComponentRegistry.fetch_all""></a> #### fetchall Fetch all the items. <a id=""aea.registries.base.ComponentRegistry.unregister_by_skill""></a> #### unregisterbyskill Unregister all the components by skill. <a id=""aea.registries.base.ComponentRegistry.ids""></a> #### ids Get the item ids. <a id=""aea.registries.base.ComponentRegistry.setup""></a> #### setup Set up the items in the registry. <a id=""aea.registries.base.ComponentRegistry.teardown""></a> #### teardown Teardown the registry. <a id=""aea.registries.base.HandlerRegistry""></a>"
aea.registries.base,"HandlerRegistry Objects. This class implements the handlers registry. <a id=""aea.registries.base.HandlerRegistry.__init__""></a> #### init Instantiate the registry. **Arguments**: - : kwargs <a id=""aea.registries.base.HandlerRegistry.register""></a> #### register Register a handler. **Arguments**: - : the item id. - : the handler. - : whether or not the item is dynamically added. **Raises**: - : if the protocol is None, or an item with pair (skill_id, protocol_id_ already exists. <a id=""aea.registries.base.HandlerRegistry.unregister""></a> #### unregister Unregister a item. **Arguments**: - : a pair (skill id, item name). **Raises**: - : ValueError if no item is registered with that item id. **Returns**: the unregistered handler <a id=""aea.registries.base.HandlerRegistry.unregister_by_skill""></a> #### unregisterbyskill Unregister all the components by skill. <a id=""aea.registries.base.HandlerRegistry.fetch_by_protocol""></a> #### fetchbyprotocol Fetch the handler by the pair protocol id and skill id. **Arguments**: - : the protocol id **Returns**: the handlers registered for the protocol_id and skill_id <a id=""aea.registries.base.HandlerRegistry.fetch_by_protocol_and_skill""></a> #### fetchbyprotocolandskill Fetch the handler by the pair protocol id and skill id. **Arguments**: - : the protocol id - : the skill id. **Returns**: the handlers registered for the protocol_id and skill_id"
aea.registries.filter,"aea.registries.filter. <a id=""aea.registries.filter""></a> # aea.registries.filter This module contains registries. <a id=""aea.registries.filter.Filter""></a>"
aea.registries.filter,"Filter Objects. This class implements the filter of an AEA. <a id=""aea.registries.filter.Filter.__init__""></a> #### init Instantiate the filter. **Arguments**: - : the resources - : the decision maker queue <a id=""aea.registries.filter.Filter.resources""></a> #### resources Get resources. <a id=""aea.registries.filter.Filter.decision_maker_out_queue""></a> #### decisionmakeroutqueue Get decision maker (out) queue. <a id=""aea.registries.filter.Filter.get_active_handlers""></a> #### getactivehandlers Get active handlers based on protocol id and optional skill id. **Arguments**: - : the protocol id - : the skill id **Returns**: the list of handlers currently active <a id=""aea.registries.filter.Filter.get_active_behaviours""></a> #### getactivebehaviours Get the active behaviours. **Returns**: the list of behaviours currently active <a id=""aea.registries.filter.Filter.handle_new_handlers_and_behaviours""></a> #### handlenewhandlersandbehaviours Handle the messages from the decision maker. <a id=""aea.registries.filter.Filter.get_internal_message""></a> #### getinternalmessage Get a message from decision_maker_out_queue. <a id=""aea.registries.filter.Filter.handle_internal_message""></a> #### handleinternalmessage Handle internal message."
aea.decisionmaker.gop,"aea.decisionmaker.gop. <a id=""aea.decision_maker.gop""></a> # aea.decisionmaker.gop This module contains the decision maker class. <a id=""aea.decision_maker.gop.GoalPursuitReadiness""></a>"
aea.decisionmaker.gop,"GoalPursuitReadiness Objects. The goal pursuit readiness. <a id=""aea.decision_maker.gop.GoalPursuitReadiness.Status""></a>"
aea.decisionmaker.gop,"Status Objects. The enum of the readiness status. In particular, it can be one of the following: - Status.READY: when the agent is ready to pursuit its goal - Status.NOT_READY: when the agent is not ready to pursuit its goal <a id=""aea.decision_maker.gop.GoalPursuitReadiness.__init__""></a> #### init Instantiate the goal pursuit readiness. <a id=""aea.decision_maker.gop.GoalPursuitReadiness.is_ready""></a> #### isready Get the readiness. <a id=""aea.decision_maker.gop.GoalPursuitReadiness.update""></a> #### update Update the goal pursuit readiness. **Arguments**: - : the new status <a id=""aea.decision_maker.gop.OwnershipState""></a>"
aea.decisionmaker.gop,"OwnershipState Objects. Represent the ownership state of an agent (can proxy a ledger). <a id=""aea.decision_maker.gop.OwnershipState.__init__""></a> #### init Instantiate an ownership state object. <a id=""aea.decision_maker.gop.OwnershipState.set""></a> #### set Set values on the ownership state. **Arguments**: - : the currency endowment of the agent in this state. - : the good endowment of the agent in this state. - : the keyword arguments. <a id=""aea.decision_maker.gop.OwnershipState.apply_delta""></a> #### applydelta Apply a state update to the ownership state. This method is used to apply a raw state update without a transaction. **Arguments**: - : the delta in the currency amounts - : the delta in the quantities by good - : the keyword arguments <a id=""aea.decision_maker.gop.OwnershipState.is_initialized""></a> #### isinitialized Get the initialization status. <a id=""aea.decision_maker.gop.OwnershipState.amount_by_currency_id""></a> #### amountbycurrencyid Get currency holdings in this state. <a id=""aea.decision_maker.gop.OwnershipState.quantities_by_good_id""></a> #### quantitiesbygoodid Get good holdings in this state. <a id=""aea.decision_maker.gop.OwnershipState.is_affordable_transaction""></a> #### isaffordabletransaction Check if the transaction is affordable (and consistent). E.g. check that the agent state has enough money if it is a buyer or enough holdings if it is a seller. Note, the agent is the sender of the transaction message by design. **Arguments**: - : the transaction terms **Returns**: True if the transaction is legal wrt the current state, false otherwise. <a id=""aea.decision_maker.gop.OwnershipState.is_affordable""></a> #### isaffordable Check if the tx is affordable. **Arguments**: - : the transaction terms **Returns**: whether the transaction is affordable or not <a id=""aea.decision_maker.gop.OwnershipState.update""></a> #### update Update the agent state from a transaction. **Arguments**: - : the transaction terms <a id=""aea.decision_maker.gop.OwnershipState.apply_transactions""></a> #### applytransactions Apply a list of transactions to (a copy of) the current state. **Arguments**: - : the sequence of transaction terms. **Returns**: the final state. <a id=""aea.decision_maker.gop.OwnershipState.__copy__""></a> #### copy Copy the object. <a id=""aea.decision_maker.gop.Preferences""></a>"
aea.decisionmaker.gop,"Preferences Objects. Class to represent the preferences. <a id=""aea.decision_maker.gop.Preferences.__init__""></a> #### init Instantiate an agent preference object. <a id=""aea.decision_maker.gop.Preferences.set""></a> #### set Set values on the preferences. **Arguments**: - : the exchange params. - : the utility params for every asset. - : the keyword arguments. <a id=""aea.decision_maker.gop.Preferences.is_initialized""></a> #### isinitialized Get the initialization status. **Returns**: True if exchange_params_by_currency_id and utility_params_by_good_id are not None. <a id=""aea.decision_maker.gop.Preferences.exchange_params_by_currency_id""></a> #### exchangeparamsbycurrencyid Get exchange parameter for each currency. <a id=""aea.decision_maker.gop.Preferences.utility_params_by_good_id""></a> #### utilityparamsbygoodid Get utility parameter for each good. <a id=""aea.decision_maker.gop.Preferences.logarithmic_utility""></a> #### logarithmicutility Compute agent's utility given her utility function params and a good bundle. **Arguments**: - : the good holdings (dictionary) with the identifier (key) and quantity (value) for each good **Returns**: utility value <a id=""aea.decision_maker.gop.Preferences.linear_utility""></a> #### linearutility Compute agent's utility given her utility function params and a currency bundle. **Arguments**: - : the currency holdings (dictionary) with the identifier (key) and quantity (value) for each currency **Returns**: utility value <a id=""aea.decision_maker.gop.Preferences.utility""></a> #### utility Compute the utility given the good and currency holdings. **Arguments**: - : the good holdings - : the currency holdings **Returns**: the utility value. <a id=""aea.decision_maker.gop.Preferences.marginal_utility""></a> #### marginalutility Compute the marginal utility. **Arguments**: - : the ownership state against which to compute the marginal utility. - : the change in good holdings - : the change in money holdings - : the keyword arguments **Returns**: the marginal utility score <a id=""aea.decision_maker.gop.Preferences.utility_diff_from_transaction""></a> #### utilitydifffromtransaction Simulate a transaction and get the resulting utility difference (taking into account the fee). **Arguments**: - : the ownership state against which to apply the transaction. - : the transaction terms. **Returns**: the score. <a id=""aea.decision_maker.gop.Preferences.is_utility_enhancing""></a> #### isutilityenhancing Check if the tx is utility enhancing. **Arguments**: - : the ownership state against which to apply the transaction. - : the transaction terms **Returns**: whether the transaction is utility enhancing or not <a id=""aea.decision_maker.gop.Preferences.__copy__""></a> #### copy Copy the object. <a id=""aea.decision_maker.gop.DecisionMakerHandler""></a>"
aea.decisionmaker.gop,"DecisionMakerHandler Objects. This class implements the decision maker. <a id=""aea.decision_maker.gop.DecisionMakerHandler.SigningDialogues""></a>"
aea.decisionmaker.gop,"SigningDialogues Objects. This class keeps track of all oef_search dialogues. <a id=""aea.decision_maker.gop.DecisionMakerHandler.SigningDialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the keyword arguments <a id=""aea.decision_maker.gop.DecisionMakerHandler.StateUpdateDialogues""></a>"
aea.decisionmaker.gop,"StateUpdateDialogues Objects. This class keeps track of all oef_search dialogues. <a id=""aea.decision_maker.gop.DecisionMakerHandler.StateUpdateDialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the keyword arguments <a id=""aea.decision_maker.gop.DecisionMakerHandler.__init__""></a> #### init Initialize the decision maker. **Arguments**: - : the identity - : the wallet - : the user defined configuration of the handler <a id=""aea.decision_maker.gop.DecisionMakerHandler.handle""></a> #### handle Handle an internal message from the skills. **Arguments**: - : the internal message"
aea.decisionmaker.base,"aea.decisionmaker.base. <a id=""aea.decision_maker.base""></a> # aea.decisionmaker.base This module contains the decision maker class. <a id=""aea.decision_maker.base.OwnershipState""></a>"
aea.decisionmaker.base,"OwnershipState Objects. Represent the ownership state of an agent (can proxy a ledger). <a id=""aea.decision_maker.base.OwnershipState.set""></a> #### set Set values on the ownership state. **Arguments**: - : the relevant keyword arguments <a id=""aea.decision_maker.base.OwnershipState.apply_delta""></a> #### applydelta Apply a state update to the ownership state. This method is used to apply a raw state update without a transaction. **Arguments**: - : the relevant keyword arguments <a id=""aea.decision_maker.base.OwnershipState.is_initialized""></a> #### isinitialized Get the initialization status. <a id=""aea.decision_maker.base.OwnershipState.is_affordable_transaction""></a> #### isaffordabletransaction Check if the transaction is affordable (and consistent). **Arguments**: - : the transaction terms **Returns**: True if the transaction is legal wrt the current state, false otherwise. <a id=""aea.decision_maker.base.OwnershipState.apply_transactions""></a> #### applytransactions Apply a list of transactions to (a copy of) the current state. **Arguments**: - : the sequence of transaction terms. **Returns**: the final state. <a id=""aea.decision_maker.base.OwnershipState.__copy__""></a> #### copy Copy the object. <a id=""aea.decision_maker.base.Preferences""></a>"
aea.decisionmaker.base,"Preferences Objects. Class to represent the preferences. <a id=""aea.decision_maker.base.Preferences.set""></a> #### set Set values on the preferences. **Arguments**: - : the relevant key word arguments <a id=""aea.decision_maker.base.Preferences.is_initialized""></a> #### isinitialized Get the initialization status. Returns True if exchange_params_by_currency_id and utility_params_by_good_id are not None. <a id=""aea.decision_maker.base.Preferences.marginal_utility""></a> #### marginalutility Compute the marginal utility. **Arguments**: - : the ownership state against which to compute the marginal utility. - : optional keyword arguments **Returns**: the marginal utility score <a id=""aea.decision_maker.base.Preferences.utility_diff_from_transaction""></a> #### utilitydifffromtransaction Simulate a transaction and get the resulting utility difference (taking into account the fee). **Arguments**: - : the ownership state against which to apply the transaction. - : the transaction terms. **Returns**: the score. <a id=""aea.decision_maker.base.Preferences.__copy__""></a> #### copy Copy the object. <a id=""aea.decision_maker.base.ProtectedQueue""></a>"
aea.decisionmaker.base,"ProtectedQueue Objects. A wrapper of a queue to protect which object can read from it. <a id=""aea.decision_maker.base.ProtectedQueue.__init__""></a> #### init Initialize the protected queue. **Arguments**: - : the access code to read from the queue <a id=""aea.decision_maker.base.ProtectedQueue.put""></a> #### put Put an internal message on the queue. If optional args block is true and timeout is None (the default), block if necessary until a free slot is available. If timeout is a positive number, it blocks at most timeout seconds and raises the Full exception if no free slot was available within that time. Otherwise (block is false), put an item on the queue if a free slot is immediately available, else raise the Full exception (timeout is ignored in that case). **Arguments**: - : the internal message to put on the queue - : whether to block or not - : timeout on block **Raises**: - : ValueError, if the item is not an internal message <a id=""aea.decision_maker.base.ProtectedQueue.put_nowait""></a> #### putnowait Put an internal message on the queue. Equivalent to put(item, False). **Arguments**: - : the internal message to put on the queue **Raises**: - : ValueError, if the item is not an internal message <a id=""aea.decision_maker.base.ProtectedQueue.get""></a> #### get Inaccessible get method. **Arguments**: - : whether to block or not - : timeout on block **Raises**: - : ValueError, access not permitted. <a id=""aea.decision_maker.base.ProtectedQueue.get_nowait""></a> #### getnowait Inaccessible get_nowait method. **Raises**: - : ValueError, access not permitted. <a id=""aea.decision_maker.base.ProtectedQueue.protected_get""></a> #### protectedget Access protected get method. **Arguments**: - : the access code - : If optional args block is true and timeout is None (the default), block if necessary until an item is available. - : If timeout is a positive number, it blocks at most timeout seconds and raises the Empty exception if no item was available within that time. **Raises**: - : ValueError, if caller is not permitted **Returns**: internal message <a id=""aea.decision_maker.base.DecisionMakerHandler""></a>"
aea.decisionmaker.base,"DecisionMakerHandler Objects. This class implements the decision maker. <a id=""aea.decision_maker.base.DecisionMakerHandler.__init__""></a> #### init Initialize the decision maker handler. **Arguments**: - : the identity - : the wallet - : the user defined configuration of the handler - : the key word arguments <a id=""aea.decision_maker.base.DecisionMakerHandler.agent_name""></a> #### agentname Get the agent name. <a id=""aea.decision_maker.base.DecisionMakerHandler.identity""></a> #### identity Get identity of the agent. <a id=""aea.decision_maker.base.DecisionMakerHandler.wallet""></a> #### wallet Get wallet of the agent. <a id=""aea.decision_maker.base.DecisionMakerHandler.config""></a> #### config Get user defined configuration <a id=""aea.decision_maker.base.DecisionMakerHandler.context""></a> #### context Get the context. <a id=""aea.decision_maker.base.DecisionMakerHandler.message_out_queue""></a> #### messageoutqueue Get (out) queue. <a id=""aea.decision_maker.base.DecisionMakerHandler.handle""></a> #### handle Handle an internal message from the skills. **Arguments**: - : the internal message <a id=""aea.decision_maker.base.DecisionMaker""></a>"
aea.decisionmaker.base,"DecisionMaker Objects. This class implements the decision maker. <a id=""aea.decision_maker.base.DecisionMaker.__init__""></a> #### init Initialize the decision maker. **Arguments**: - : the decision maker handler <a id=""aea.decision_maker.base.DecisionMaker.agent_name""></a> #### agentname Get the agent name. <a id=""aea.decision_maker.base.DecisionMaker.message_in_queue""></a> #### messageinqueue Get (in) queue. <a id=""aea.decision_maker.base.DecisionMaker.message_out_queue""></a> #### messageoutqueue Get (out) queue. <a id=""aea.decision_maker.base.DecisionMaker.decision_maker_handler""></a> #### decisionmakerhandler Get the decision maker handler. <a id=""aea.decision_maker.base.DecisionMaker.start""></a> #### start Start the decision maker. <a id=""aea.decision_maker.base.DecisionMaker.stop""></a> #### stop Stop the decision maker. <a id=""aea.decision_maker.base.DecisionMaker.execute""></a> #### execute Execute the decision maker. Performs the following while not stopped: - gets internal messages from the in queue and calls handle() on them <a id=""aea.decision_maker.base.DecisionMaker.handle""></a> #### handle Handle an internal message from the skills. **Arguments**: - : the internal message"
aea.decisionmaker.default,"aea.decisionmaker.default. <a id=""aea.decision_maker.default""></a> # aea.decisionmaker.default This module contains the decision maker class. <a id=""aea.decision_maker.default.DecisionMakerHandler""></a>"
aea.decisionmaker.default,"DecisionMakerHandler Objects. This class implements the decision maker. <a id=""aea.decision_maker.default.DecisionMakerHandler.SigningDialogues""></a>"
aea.decisionmaker.default,"SigningDialogues Objects. This class keeps track of all oef_search dialogues. <a id=""aea.decision_maker.default.DecisionMakerHandler.SigningDialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the keyword arguments <a id=""aea.decision_maker.default.DecisionMakerHandler.__init__""></a> #### init Initialize the decision maker. **Arguments**: - : the identity - : the wallet - : the user defined configuration of the handler <a id=""aea.decision_maker.default.DecisionMakerHandler.handle""></a> #### handle Handle an internal message from the skills. **Arguments**: - : the internal message"
aea.context.base,"aea.context.base. <a id=""aea.context.base""></a> # aea.context.base This module contains the agent context class. <a id=""aea.context.base.AgentContext""></a>"
aea.context.base,"AgentContext Objects. Provide read access to relevant objects of the agent for the skills. <a id=""aea.context.base.AgentContext.__init__""></a> #### init Initialize an agent context. **Arguments**: - : the identity object - : the connection status of the multiplexer - : the outbox - : the (in) queue of the decision maker - : the decision maker's name space - : the task manager - : the default ledger id - : mapping from ledger ids to currency denominations - : the default connection - : the default routing - : the address of the search service - : the address of the decision maker - : directory where to put local files. - : function that returns optional storage attached to agent. - : callable for sending envelopes to skills. - : keyword arguments to be attached in the agent context namespace. <a id=""aea.context.base.AgentContext.send_to_skill""></a> #### sendtoskill Send message or envelope to another skill. If message passed it will be wrapped into envelope with optional envelope context. **Arguments**: - : envelope to send to another skill. - : the optional envelope context <a id=""aea.context.base.AgentContext.storage""></a> #### storage Return storage instance if enabled in AEA. <a id=""aea.context.base.AgentContext.data_dir""></a> #### datadir Return assets directory. <a id=""aea.context.base.AgentContext.shared_state""></a> #### sharedstate Get the shared state dictionary. The shared state is the only object which skills can use to exchange state directly. It is accessible (read and write) from all skills. **Returns**: dictionary of the shared state. <a id=""aea.context.base.AgentContext.identity""></a> #### identity Get the identity. <a id=""aea.context.base.AgentContext.agent_name""></a> #### agentname Get agent name. <a id=""aea.context.base.AgentContext.addresses""></a> #### addresses Get addresses. <a id=""aea.context.base.AgentContext.public_keys""></a> #### publickeys Get public keys. <a id=""aea.context.base.AgentContext.address""></a> #### address Get the default address. <a id=""aea.context.base.AgentContext.public_key""></a> #### publickey Get the default public key. <a id=""aea.context.base.AgentContext.connection_status""></a> #### connectionstatus Get connection status of the multiplexer. <a id=""aea.context.base.AgentContext.outbox""></a> #### outbox Get outbox. <a id=""aea.context.base.AgentContext.decision_maker_message_queue""></a> #### decisionmakermessagequeue Get decision maker queue. <a id=""aea.context.base.AgentContext.decision_maker_handler_context""></a> #### decisionmakerhandlercontext Get the decision maker handler context. <a id=""aea.context.base.AgentContext.task_manager""></a> #### taskmanager Get the task manager. <a id=""aea.context.base.AgentContext.search_service_address""></a> #### searchserviceaddress Get the address of the search service. <a id=""aea.context.base.AgentContext.decision_maker_address""></a> #### decisionmakeraddress Get the address of the decision maker. <a id=""aea.context.base.AgentContext.default_ledger_id""></a> #### defaultledgerid Get the default ledger id. <a id=""aea.context.base.AgentContext.currency_denominations""></a> #### currencydenominations Get a dictionary mapping ledger ids to currency denominations. <a id=""aea.context.base.AgentContext.default_connection""></a> #### defaultconnection Get the default connection. <a id=""aea.context.base.AgentContext.default_routing""></a> #### defaultrouting Get the default routing. <a id=""aea.context.base.AgentContext.namespace""></a> #### namespace Get the agent context namespace."
aea.crypto.helpers,"aea.crypto.helpers. <a id=""aea.crypto.helpers""></a> # aea.crypto.helpers Module wrapping the helpers of public and private key cryptography. <a id=""aea.crypto.helpers.try_validate_private_key_path""></a> #### tryvalidateprivatekeypath Try validate a private key path. **Arguments**: - : one of 'fetchai', 'ethereum' - : the path to the private key. - : the password to encrypt/decrypt the private key. **Raises**: - : ValueError if the identifier is invalid. <a id=""aea.crypto.helpers.create_private_key""></a> #### createprivatekey Create a private key for the specified ledger identifier. **Arguments**: - : the ledger identifier. - : the private key file. - : the password to encrypt/decrypt the private key. **Raises**: - : ValueError if the identifier is invalid. <a id=""aea.crypto.helpers.try_generate_testnet_wealth""></a> #### trygeneratetestnetwealth Try generate wealth on a testnet. **Arguments**: - : the identifier of the ledger - : the address to check for - : the url - : whether to wait to sync or not; currently unused <a id=""aea.crypto.helpers.private_key_verify""></a> #### privatekeyverify Check key. **Arguments**: - : AgentConfig - : Path, where project placed. - : the password to encrypt/decrypt the private key. <a id=""aea.crypto.helpers.make_certificate""></a> #### makecertificate Create certificate. **Arguments**: - : the ledger id - : the path to the private key. - : the message to be signed. - : the location where to save the certificate. - : the password to encrypt/decrypt the private keys. **Returns**: the signature/certificate <a id=""aea.crypto.helpers.get_wallet_from_agent_config""></a> #### getwalletfromagentconfig Get wallet from agent_cofig provided. **Arguments**: - : the agent configuration object - : the password to encrypt/decrypt the private keys. **Returns**: wallet <a id=""aea.crypto.helpers.DecryptError""></a>"
aea.crypto.helpers,"DecryptError Objects. Error on bytes decryption with password. <a id=""aea.crypto.helpers.DecryptError.__init__""></a> #### init Init exception. <a id=""aea.crypto.helpers.KeyIsIncorrect""></a>"
aea.crypto.helpers,"KeyIsIncorrect Objects. Error decoding hex string to bytes for private key. <a id=""aea.crypto.helpers.hex_to_bytes_for_key""></a> #### hextobytesforkey Convert hex string to bytes with error handling."
