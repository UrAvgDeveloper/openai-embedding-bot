title,text
Multi Agent Manager,"Multi Agent Manager. # Multi Agent Manager The <a href=""../api/manager/manager""></a> allows managing multiple agent projects programmatically."
Multi Agent Manager,Setup. We instantiate the manager by providing it with the working directory in which to operate and starting it:
Multi Agent Manager,Adding Projects. We first add a couple of finished AEA project:
Multi Agent Manager,Adding Agent Instances. Add the agent instances Save the following private keys in the respective files.
Multi Agent Manager,Running the Agents. 
Multi Agent Manager,Stopping the Agents. 
Multi Agent Manager,Cleaning up. 
Multi Agent Manager,"Limitations. The can only be used with compatible package versions, in particular the same package (with respect to author and name) cannot be used in different versions. If you want to run multiple agents with differing versions of the same package then use the command in the multi-processing mode, or simply launch each agent individually with ."
Setting up,"Setting up. # Setting up Once you successfully <a href=""../install"">install the AEA framework</a>, you can set it up for agent development."
Setting up,"Specify Author Handle. ,Pick Author Handle and Register: If you are intending to use the registry: This will let you pick a new author handle and register it at the same time. ,Pick Author Handle Only: If you are unsure whether you will need a registry account, or intending not to use it, simply pick a new author handle: ,Register Author Handle: To register an already created author handle with the AEA registry: !!! info ""Note"" The author handle is your unique author (or developer) name in the AEA ecosystem."
Known Limitations,"Known Limitations. # Known Limitations The AEA framework makes a multitude of tradeoffs. Here we present an incomplete list of known limitations: - The <a href=""../api/aea_builder#aeabuilder-objects""></a> checks the consistency of packages at the stage. However, it does not currently check the consistency again at the stage. This means, if a package is tampered with after it is added to the then these inconsistencies might not be detected by the . - The <a href=""../api/aea_builder#aeabuilder-objects""></a> assumes that packages with public ids of identical author and package name have a matching version. As a result, if a developer uses a package with matching author and package name but different version in the public id, then the will not detect this and simply use the last loaded package. - The order in which and are called on the skills, and is called on the behaviours, is not guaranteed. Skills should be designed to work independently. Where skills use the to exchange information they must do so safely."
P2P Connection,"P2P Connection. # P2P Connection The connection allows AEAs to create a peer-to-peer communication network. In particular, the connection creates an overlay network which maps agents' public keys to IP addresses."
P2P Connection,Local Demo. 
P2P Connection,"Local Demo with Skills. Explore the <a href=""../weather-skills"">demo section</a> for further examples."
P2P Connection,"Deployed Agent Communication Network. You can connect to the deployed public test network by adding one or multiple of the following addresses as the connection's : Specifically, in an AEA's configuration add the above addresses for as follows: Note, this configuration change must be made for all agents attempting to communicate with each other via the Agent Communication Network. For example, in demos involving two agents, both agents will need the above modifications to their respective file. However, remember to use different ports in This will allow both agents to default to this communication network without the added overhead of opening ports and specifying hosts on the individual host machines running each agent."
P2P Connection,Configuring the  Entries. To learn more about how to configure your connection consult the file supplied with the connection package.
P2P Connection,"Running Go Peer Standalone. You can run a peer node in _standalone mode_; that is, as a Go process with no dependency on the AEA framework. To facilitate such a deployment, we provide a script <a href=""https://github.com/fetchai/agents-aea/blob/main/scripts/acn/run_acn_node_standalone.py"" target=""_blank""></a> and a corresponding <a href=""https://github.com/fetchai/agents-aea/blob/main/scripts/acn/Dockerfile"" target=""_blank"">Dockerfile</a>. First, you need to build the node's binary () either: - locally Make sure you satisfy the <a href=""../quickstart"">system requirements</a>. - or within a docker image using the provided Dockerfile: Next, to run the node binary in standalone mode, it requires values for the following entries: - : the node's private key, will be used as its identity - : the local host and port to use by node - : the URI under which the peer is publicly reachable - : the URI under which the peer receives delegate connections - : an optionally supplied list of comma-separated () entry multiaddresses for the peer to bootstrap The script allows different methods to pass these values to the node: - As environment variables exported in the format for each entry. Then: - Using an environment file containing the entries and their values in the format , one entry per line. Then: or - Using command line arguments: or Note that the script will always save the configuration of the running node as a file under the name in the current working directory. This can be handy when you want the exact same configuration for future runs of the node."
Gym Skill,"Gym Skill. # Gym Skill The AEA gym skill demonstrates how a custom Reinforcement Learning agent, that uses OpenAI's <a href=""https://www.gymlibrary.dev/"" target=""_blank"">gym</a> library, may be embedded into an AEA skill and connection."
Gym Skill,"Discussion. The gym skills demonstrate how to wrap a Reinforcement Learning agent in a skill. The example decouples the RL agent from the allowing them to run in separate execution environments, potentially owned by different entities."
Gym Skill,"Preparation Instructions. ,Dependencies: Follow the <a href=""../quickstart/#preliminaries"">Preliminaries</a> and <a href=""../quickstart/#installation"">Installation</a> sections from the AEA quick start. Download the necessary directories into your working directory: Install the and library."
Gym Skill,"Demo Instructions. ,Create the AEA: In the root directory, create the gym AEA and enter the project. ### Add the gym skill ### Set gym connection as default ### Install the skill dependencies To install the package, a dependency of the gym skill, from PyPI run ,Set up the Training Environment: #### Copy the Gym Environment to the AEA Directory #### Update the Connection Configuration #### Create and Add a Private Key ,Run the AEA with the Gym Connection: You will see the gym training logs. <img src=""../assets/gym-training.png"" alt=""AEA gym training logs"" class=""center""> ,Delete the AEA: When you're done, you can go up a level and delete the AEA."
Gym Skill,Communication. This diagram shows the communication between the AEA and the gym environment
Gym Skill,"Skill Architecture. The skill consists of two core components: and . In the method of the the is initialized, as well as its and methods called. The handler, which is registered against the then filters for messages of that protocol with the performative . These messages are passed to the of the task. The is responsible for training the RL agent. In particular, is initialized and trained against . The instantiates a class and therefore implements its API. This means the proxy environment is compatible with any compatible RL agent. However, unlike other environments it only acts as a proxy and does not implement an environment of its own. It allows for the decoupling of the process environment of the from the process environment of the RL agent. The actual against which the agent is trained is wrapped by the connection. The proxy environment and gym connection communicate via a protocol, the protocol. Note, it would trivially be possible to implement the environment in another AEA; this way one AEA could provide environments as a service. Naturally, the overhead created by the introduction of the extra layers causes a higher latency when training the RL agent. In this particular skill, which chiefly serves for demonstration purposes, we implement a very basic RL agent. The agent trains a model of price of goods: it aims to discover the most likely price of each good. To this end, the agent randomly selects one of the goods on each training step and then chooses as an the price which it deems is most likely accepted. Each good is represented by an id and the possible price range divided into 100 integer bins. For each price bin, a is created which models the likelihood of this price. In particular, a price bandit maintains a <a href=""https://en.wikipedia.org/wiki/Beta_distribution"" target=""_blank"">beta distribution</a>. The beta distribution is initialized to the uniform distribution. Each time the price associated with a given is accepted or rejected the distribution maintained by the is updated. For each good, the agent can therefore over time learn which price is most likely. <img src=""../assets/gym-skill.jpg"" alt=""Gym skill illustration"" class=""center"" style=""display: block; margin-left: auto; margin-right: auto;width:80%;""> The illustration shows how the RL agent only interacts with the proxy environment by sending it and receiving , , and ."
AEA Quick Start,"AEA Quick Start. # AEA Quick Start If you want to create Autonomous Economic Agents (AEAs) that can act independently of constant user input and autonomously execute actions to achieve their objective, you can use the AEA framework. <iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/mwkAUh-_uxA"" frameborder=""0"" allow=""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe> This example will take you through a simple AEA to familiarise you with the basics of the framework."
AEA Quick Start,"Echo Skill Demo. ,Echo Skill: Just like humans, AEAs can have _skills_ to achieve their tasks. As an agent developer, you can create skills to add to your own AEAs. You can also choose to publish your skills so others add them to their AEAs. More details on skills can be found on <a href=""../skill/""> this page </a>. The above agent has an <a href=""https://aea-registry.fetch.ai/details/skill/fetchai/echo/latest"" target=""_blank"">echo skill</a>, fetched from <a href=""https://aea-registry.fetch.ai"" target=""_blank"">the registry</a>, which simply echoes any messages it receives back to its sender. ,Communication via Envelopes and Messages: AEAs use envelopes containing messages for communication. To learn more, check out the <a href=""../core-components-1/"">next section</a>. ,Stub Connection: Besides skills, AEAs may have one or more _connections_ enabling them to interface with entities in the outside world. For example, an HTTP client connection allows an AEA to communicate with HTTP servers. To read more about connections see <a href=""../connection/"">this page</a>. In this demo, we use the stub connection () to send envelopes to and receive envelopes from the AEA. A stub connection provides an I/O reader and writer. It uses two files for communication: one for incoming envelopes and the other for outgoing envelopes. The AEA waits for a new envelope posted to the file , and adds a response to the file . The format of each envelope is the following: For example: ,Install AEA Dependencies: ,Add and Create a Private Key: All AEAs need a private key to run. Add one now: ,Run the AEA:. You will see the echo skill running in the terminal window (an output similar to the one below). The framework first calls the methods in the skill's and classes in that order; after which it repeatedly calls the method of class. This is the main agent loop in action. #### Add a Message to the Input File You can send the AEA a message wrapped in an envelope using the CLI's command. From a different terminal and same directory (ensure you are in the same virtual environment: ): You can now send messages to this AEA via an interactive tool by typing anything into the prompt and hitting enter twice (once to send the message and once more to check for a response). Let us send to this AEA (type and press enter twice). In the original terminal, you will see the dealing with this envelope and its contained message. You should see an output similar to the one below but with a different . ??? note ""Manual approach:"" Optionally, from a different terminal and same directory (i.e. the project), you can send the AEA a message wrapped in an envelope via the input file. You will see the <code>Echo Handler</code> dealing with the envelope and responding with the same message to the <code>output_file</code>, and also decoding the Base64 encrypted message in this case. Note, due to the dialogue reference having to be incremented, you can only send the above envelope once! This approach does not work in conjunction with the <code>aea interact</code> command. ,Stop the AEA: You can stop an AEA by pressing . Once you do, you should see the AEA being interrupted and then calling the methods: ,Write a Test for the AEA: We can write an end-to-end test for the AEA utilising helper classes provided by the framework. ??? note ""Writing tests:"" The following test class replicates the preceding demo and tests its correct behaviour. The classes are a tool for AEA developers to write useful end-to-end tests of their AEAs. First, get the directory from the AEA repository (execute from the working directory which contains the <code>my_first_aea</code> folder): Then write the test: Place the above code into a file <code>test.py</code> in your AEA project directory (the same level as the <code>aea-config.yaml</code> file). To run, execute the following: ,Delete the AEA: from the parent directory ( to go to the parent directory)."
AEA Quick Start,"Next Steps. To gain an understanding of the core components of the framework, please continue to the next page: - <a href=""../core-components-1/"">Core components - Part 1</a> For more demos, use cases or step-by-step guides, please check the following: - <a href=""../generic-skills"">Generic skill use case</a> - <a href='../weather-skills/'>Weather skill demo</a> - <a href='../generic-skills-step-by-step/'> Generic step by step guide </a>"
Glossary,"Glossary. # Glossary This glossary defines a number of terms commonly used across the documentation. For the definitions of framework components consult the API docs. - **AEA (Autonomous Economic Agent)**: An AEA is ""an intelligent agent acting on an owner's behalf, with limited or no interference, and whose goal is to generate economic value to its owner"". AEAs are a special type of agent. [<a href=""../index"">more</a>] - **Software Agent**: a software agent is a computer program that acts on behalf of an entity (e.g. individual, organisation, business). [<a href=""https://en.wikipedia.org/wiki/Software_agent"" target=""_blank"">more</a>] - **sOEF (Simple Open Economic Framework)**: The simple-OEF, or sOEF, is a search and discovery service for autonomous economic agents. [<a href=""../simple-oef"">more</a>] - **ACN (Agent Communication Network)**: The ACN is a peer-to-peer communication network for autonomous economic agents. [<a href=""../acn"">more</a>]"
Create Decision-Maker Transaction,"Create Decision-Maker Transaction. # Create Decision-Maker Transaction This guide can be considered as a part 2 of the <a href=""../standalone-transaction/"">the stand-alone transaction demo</a>. The main difference is that now we are going to use the decision-maker to sign the transaction. First, import the libraries and the set the constant values. (Get the directory from the AEA repository .)"
Create Decision-Maker Transaction,"Create a Private Key and an AEA. To have access to the decision-maker, which is responsible for signing transactions, we need to create an AEA. We can create an AEA with the builder, providing it with a private key we generate first."
Create Decision-Maker Transaction,Add a Simple Skill. Add a simple skill with a signing handler and the signing dialogues.
Create Decision-Maker Transaction,Create a Second Identity. 
Create Decision-Maker Transaction,"Create the Signing Message. Next, we are creating the signing message and sending it to the decision-maker."
Create Decision-Maker Transaction,"Run the Agent. Finally, we are running the agent and expect the signed transaction to be printed in the terminal. After the completion of the signing, we get the signed transaction."
Create Decision-Maker Transaction,"More Details. To be able to register a handler that reads the internal messages, we have to create a class at the end of the file which processes the signing messages. You can find the full code for this example below: ??? note ""Transaction via decision-maker full code:"""
Core Components,"Core Components. # Core Components AEAs can be made from various components, much like legos, and these components can be of differing types. Below are some of the more important types of components an agent can have."
Core Components,"Skill. encapsulates implementations of three base classes , , , and is closely related with : - Handler: Handlers implement AEAs' **reactive** behaviour. If an AEA understands a protocol referenced in a received , this envelope is sent to the corresponding handler which executes the AEA's reaction to this message. - Behaviour: Behaviours implement AEAs' **proactiveness**, encapsulating actions which further an AEA's goals, and are initiated by internals of the AEA rather than external events. - Model: Encapsulate arbitrary objects and is made available to all components of the skill. - Task: Tasks encapsulate background work internal to the AEA. A skill can read (parts of) an AEA's state and propose actions to the AEA according to its specific logic. As such, more than one skill could exist per protocol, competing with each other in suggesting to the AEA the best course of actions to take. For instance, an AEA which is trading goods, could subscribe to more than one skill, where each corresponds to a different trading strategy. The framework places no limits on the complexity of . They can implement simple (e.g. if-this-then-that) logic or be complex (e.g. a deep learning model or reinforcement learning agent). The framework provides one default skill. Additional can be added as packages. For more details on skills, head over to the <a href=""../skill""> guide </a>."
Core Components,"Protocol. specific messages, wrapped in , are sent and received to other agents, agent components and services via"
Core Components,"Connection. is responsible for translating between the framework specific with its contained message and the external service or third-party protocol (e.g. HTTP). The framework provides one default connection. It implements an I/O reader and writer to send messages to the agent from a local file. Additional connections can be added as packages. For more details on read the <a href=""../connection""> guide</a>."
Skills,"Skills. # Skills <a href=""../api/skills/base#skill-objects""></a> are the core focus of the framework's extensibility as they implement business logic to deliver economic value for the AEA. They are self-contained capabilities that AEAs can dynamically take on board, in order to expand their effectiveness in different situations. <img src=""../assets/skill-components.jpg"" alt=""Skill components of an AEA"" class=""center"" style=""display: block; margin-left: auto; margin-right: auto;width:80%;""> A skill encapsulates implementations of the three abstract base classes , , , and is closely related with the abstract base class : - <a href=""../api/skills/base#handler-objects""></a>: each skill has zero, one or more objects, each responsible for the registered messaging protocol. Handlers implement AEAs' **reactive** behaviour. If the AEA understands the protocol referenced in a received , the reacts appropriately to the corresponding message. Each is responsible for only one protocol. A is also capable of dealing with internal messages (see next section). - <a href=""../api/skills/base#behaviour-objects""></a>: zero, one or more encapsulate actions which further the AEAs goal and are initiated by internals of the AEA, rather than external events. Behaviours implement AEAs' **pro-activeness**. The framework provides a number of <a href=""../api/skills/behaviours"">abstract base classes</a> implementing different types of behaviours (e.g. cyclic/one-shot/finite-state-machine/etc.). - <a href=""../api/skills/base#model-objects""></a>: zero, one or more that inherit from the class. encapsulate custom objects which are made accessible to any part of a skill via the . - <a href=""../api/skills/tasks#task-objects""></a>: zero, one or more encapsulate background work internal to the AEA. differs from the other three in that it is not a part of skills, but s are declared in or from skills if a packaging approach for AEA creation is used. A skill can read (parts of) the state of the AEA (as summarised in the <a href=""../api/context/base#agentcontext-objects""></a>), and propose actions to the AEA according to its specific logic. As such, more than one skill could exist per protocol, competing with each other in suggesting to the AEA the best course of actions to take. In technical terms this means skills are horizontally arranged. For instance, an AEA who is trading goods, could subscribe to more than one skill, where each skill corresponds to a different trading strategy. The skills could then read the preference and ownership state of the AEA, and independently suggest profitable transactions. The framework places no limits on the complexity of skills. They can implement simple (e.g. ) or complex (e.g. a deep learning model or reinforcement learning agent). The framework provides one default skill, called . Additional skills can be added as packages."
Skills,"Independence of Skills. Skills are , that is they run independently of each other. They also cannot access each other's state. Two skills can communicate with each other in two ways. The skill context provides access via to a key-value store which allows skills to share state. A skill can also define as a callback another skill in <a href=""../decision-maker-transaction"">a message to the decision maker</a>."
Skills,"Context. The skill has a <a href=""../api/skills/base#skillcontext-objects""></a> object which is shared by all , , and objects. The skill context also has a link to the . The provides read access to AEA specific information like the public key and address of the AEA, its preferences and ownership state. It also provides access to the . This means it is possible to, at any point, grab the and have access to the code in other parts of the skill and the AEA. For example, in the class, the code often grabs a reference to its context and by doing so can access initialised and running framework objects such as an for putting messages into. Moreover, you can read/write to the _agent context namespace_ by accessing the attribute . Importantly, however, a skill does not have access to the context of another skill or protected AEA components like the ."
Skills,"What to Code. ,:,:,:,Models: The developer might want to add other classes on the context level which are shared equally across the , and classes. To this end, the developer can subclass an abstract <a href=""../api/skills/base#model-objects""></a>. These models are made available on the context level upon initialization of the AEA. Say, the developer has a class called Then, an instance of this class is available on the context level like so: ,Skill Configuration: Each skill has a configuration file which lists all , , and objects pertaining to the skill. It also details the protocol types used in the skill and points to shared modules, i.e. modules of type , which allow custom classes within the skill to be accessible in the skill context."
Skills,Error Skill. All AEAs have a default skill that contains error handling code for a number of scenarios: - Received envelopes with unsupported protocols - Received envelopes with unsupported skills (i.e. protocols for which no handler is registered) - Envelopes with decoding errors - Invalid messages with respect to the registered protocol The error skill relies on the protocol which provides error codes for the above.
Skills,"Custom Error Handler. The framework implements a default <a href=""../api/error_handler/default#errorhandler-objects""></a>. You can implement your own and mount it. The easiest way to do this is to run the following command to scaffold a custom : Now you will see a file called in the AEA project root. You can then implement your own custom logic to process messages."
