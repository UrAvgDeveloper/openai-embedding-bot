title,text
Security,"Security. # Security The AEA framework takes every care to follow best practice around security. The following advice will help you when writing your own code: - Many potential common security vulnerabilities can be caught by static code analysis. We recommend you use , and to analyse your code. - Don't use relative import paths, these can lead to malicious code being executed. - Try to avoid using the module. If needed, make sure you sanitise commands passed to . - Try to avoid using the module. Pickle should never be used for agent-to-agent communication protocols. - By design, the framework prevents skill code from accessing private keys directly, as they are not reachable from the skill execution context through attribute getters. However, if the flag or the option are not used when generating private keys for an AEA project via the aea CLI tool, the private keys will be stored in plaintext. This allows the skills to access them via interaction with the OS file system. We recommend to always specify a password to encrypt private keys by using the flag argument."
aea.aeabuilder,"aea.aeabuilder. <a id=""aea.aea_builder""></a> # aea.aeabuilder This module contains utilities for building an AEA. <a id=""aea.aea_builder._DependenciesManager""></a>"
aea.aeabuilder,"DependenciesManager Objects. Class to manage dependencies of agent packages. <a id=""aea.aea_builder._DependenciesManager.__init__""></a> #### init Initialize the dependency graph. <a id=""aea.aea_builder._DependenciesManager.all_dependencies""></a> #### alldependencies Get all dependencies. <a id=""aea.aea_builder._DependenciesManager.dependencies_highest_version""></a> #### dependencieshighestversion Get the dependencies with highest version. <a id=""aea.aea_builder._DependenciesManager.get_components_by_type""></a> #### getcomponentsbytype Get the components by type. <a id=""aea.aea_builder._DependenciesManager.protocols""></a> #### protocols Get the protocols. <a id=""aea.aea_builder._DependenciesManager.connections""></a> #### connections Get the connections. <a id=""aea.aea_builder._DependenciesManager.skills""></a> #### skills Get the skills. <a id=""aea.aea_builder._DependenciesManager.contracts""></a> #### contracts Get the contracts. <a id=""aea.aea_builder._DependenciesManager.add_component""></a> #### addcomponent Add a component to the dependency manager. **Arguments**: - : the component configuration to add. <a id=""aea.aea_builder._DependenciesManager.remove_component""></a> #### removecomponent Remove a component. **Arguments**: - : the component id **Raises**: - : if some component depends on this package. <a id=""aea.aea_builder._DependenciesManager.pypi_dependencies""></a> #### pypidependencies Get all the PyPI dependencies. We currently consider only dependency that have the default PyPI index url and that specify only the version field. **Returns**: the merged PyPI dependencies <a id=""aea.aea_builder._DependenciesManager.install_dependencies""></a> #### installdependencies Install extra dependencies for components. <a id=""aea.aea_builder.AEABuilder""></a>"
aea.aeabuilder,"AEABuilder Objects. This class helps to build an AEA. It follows the fluent interface. Every method of the builder returns the instance of the builder itself. Note: the method 'build()' is guaranteed of being re-entrant with respect to the 'add_component(path)' method. That is, you can invoke the building method many times against the same builder instance, and the returned agent instance will not share the components with other agents, e.g.: builder = AEABuilder() builder.add_component(...) ... # first call my_aea_1 = builder.build() # following agents will have different components. my_aea_2 = builder.build() # all good However, if you manually loaded some of the components and added them with the method 'add_component_instance()', then calling build more than one time is prevented: builder = AEABuilder() builder.add_component_instance(...) ... # other initialization code # first call my_aea_1 = builder.build() # second call to would raise a Value Error. # call reset builder.reset() # re-add the component and private keys builder.add_component_instance(...) ... # add private keys # second call my_aea_2 = builder.builder() <a id=""aea.aea_builder.AEABuilder.__init__""></a> #### init Initialize the builder. **Arguments**: - : add the default packages. - : the registry directory. - : the root of the build directory. <a id=""aea.aea_builder.AEABuilder.reset""></a> #### reset Reset the builder. A full reset causes a reset of all data on the builder. A partial reset only resets: - name, - private keys, and - component instances **Arguments**: - : whether it is a full reset or not. <a id=""aea.aea_builder.AEABuilder.set_period""></a> #### setperiod Set agent act period. **Arguments**: - : period in seconds **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_execution_timeout""></a> #### setexecutiontimeout Set agent execution timeout in seconds. **Arguments**: - : execution_timeout in seconds **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_max_reactions""></a> #### setmaxreactions Set agent max reaction in one react. **Arguments**: - : int **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_decision_maker_handler_details""></a> #### setdecisionmakerhandlerdetails Set error handler details. **Arguments**: - : the dotted path to the decision maker handler - : the file path to the file which contains the decision maker handler - : the configuration passed to the decision maker handler on instantiation **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_error_handler_details""></a> #### seterrorhandlerdetails Set error handler details. **Arguments**: - : the dotted path to the error handler - : the file path to the file which contains the error handler - : the configuration passed to the error handler on instantiation **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_skill_exception_policy""></a> #### setskillexceptionpolicy Set skill exception policy. **Arguments**: - : the policy **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_connection_exception_policy""></a> #### setconnectionexceptionpolicy Set connection exception policy. **Arguments**: - : the policy **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_default_routing""></a> #### setdefaultrouting Set default routing. This is a map from public ids (protocols) to public ids (connections). **Arguments**: - : the default routing mapping **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_loop_mode""></a> #### setloopmode Set the loop mode. **Arguments**: - : the agent loop mode **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_runtime_mode""></a> #### setruntimemode Set the runtime mode. **Arguments**: - : the agent runtime mode **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_task_manager_mode""></a> #### settaskmanagermode Set the task_manager_mode. **Arguments**: - : the agent task_manager_mode **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_storage_uri""></a> #### setstorageuri Set the storage uri. **Arguments**: - : storage uri **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_data_dir""></a> #### setdatadir Set the data directory. **Arguments**: - : path to directory where to store data. **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_logging_config""></a> #### setloggingconfig Set the logging configurations. The dictionary must satisfy the following schema: https://docs.python.org/3/library/logging.config.html#logging-config-dictschema **Arguments**: - : the logging configurations. **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_search_service_address""></a> #### setsearchserviceaddress Set the search service address. **Arguments**: - : the search service address **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_name""></a> #### setname Set the name of the agent. **Arguments**: - : the name of the agent. **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.set_default_connection""></a> #### setdefaultconnection Set the default connection. **Arguments**: - : the public id of the default connection package. **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_private_key""></a> #### addprivatekey Add a private key path. **Arguments**: - : the identifier for that private key path. - : an (optional) path to the private key file. If None, the key will be created at build time. - : if the pair is for the connection cryptos **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.remove_private_key""></a> #### removeprivatekey Remove a private key path by identifier, if present. **Arguments**: - : the identifier of the private key. - : if the pair is for the connection cryptos **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.private_key_paths""></a> #### privatekeypaths Get the private key paths. <a id=""aea.aea_builder.AEABuilder.connection_private_key_paths""></a> #### connectionprivatekeypaths Get the connection private key paths. <a id=""aea.aea_builder.AEABuilder.set_default_ledger""></a> #### setdefaultledger Set a default ledger API to use. **Arguments**: - : the identifier of the ledger api **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.set_required_ledgers""></a> #### setrequiredledgers Set the required ledger identifiers. These are the ledgers for which the AEA requires a key pair. **Arguments**: - : the required ledgers. **Returns**: the AEABuilder. <a id=""aea.aea_builder.AEABuilder.set_build_entrypoint""></a> #### setbuildentrypoint Set build entrypoint. **Arguments**: - : path to the builder script. **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.set_currency_denominations""></a> #### setcurrencydenominations Set the mapping from ledger ids to currency denominations. **Arguments**: - : the mapping **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_component""></a> #### addcomponent Add a component, given its type and the directory. **Arguments**: - : the component type. - : the directory path. - : if True, the consistency check are skipped. **Raises**: - : if a component is already registered with the same component id. # noqa: DAR402 | or if there's a missing dependency. # noqa: DAR402 **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_component_instance""></a> #### addcomponentinstance Add already initialized component object to resources or connections. Please, pay attention, all dependencies have to be already loaded. Notice also that this will make the call to 'build()' non re-entrant. You will have to the builder before calling again. **Arguments**: - : Component instance already initialized. **Returns**: self <a id=""aea.aea_builder.AEABuilder.set_context_namespace""></a> #### setcontextnamespace Set the context namespace. <a id=""aea.aea_builder.AEABuilder.set_agent_pypi_dependencies""></a> #### setagentpypidependencies Set agent PyPI dependencies. **Arguments**: - : PyPI dependencies for the agent. **Returns**: the AEABuilder. <a id=""aea.aea_builder.AEABuilder.remove_component""></a> #### removecomponent Remove a component. **Arguments**: - : the public id of the component. **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_protocol""></a> #### addprotocol Add a protocol to the agent. **Arguments**: - : the path to the protocol directory **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.remove_protocol""></a> #### removeprotocol Remove protocol. **Arguments**: - : the public id of the protocol **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_connection""></a> #### addconnection Add a connection to the agent. **Arguments**: - : the path to the connection directory **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.remove_connection""></a> #### removeconnection Remove a connection. **Arguments**: - : the public id of the connection **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_skill""></a> #### addskill Add a skill to the agent. **Arguments**: - : the path to the skill directory **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.remove_skill""></a> #### removeskill Remove protocol. **Arguments**: - : the public id of the skill **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.add_contract""></a> #### addcontract Add a contract to the agent. **Arguments**: - : the path to the contract directory **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.remove_contract""></a> #### removecontract Remove protocol. **Arguments**: - : the public id of the contract **Returns**: the AEABuilder <a id=""aea.aea_builder.AEABuilder.call_all_build_entrypoints""></a> #### callallbuildentrypoints Call all the build entrypoints. <a id=""aea.aea_builder.AEABuilder.get_build_root_directory""></a> #### getbuildrootdirectory Get build directory root. <a id=""aea.aea_builder.AEABuilder.run_build_for_component_configuration""></a> #### runbuildforcomponentconfiguration Run a build entrypoint script for component configuration. <a id=""aea.aea_builder.AEABuilder.install_pypi_dependencies""></a> #### installpypidependencies Install components extra dependencies. <a id=""aea.aea_builder.AEABuilder.build""></a> #### build Build the AEA. This method is re-entrant only if the components have been added through the method 'add_component'. If some of them have been loaded with 'add_component_instance', it can be called only once, and further calls are only possible after a call to 'reset' and re-loading of the components added via 'add_component_instance' and the private keys. **Arguments**: - : select only these connections to run the AEA. - : the password to encrypt/decrypt the private key. **Returns**: the AEA object. <a id=""aea.aea_builder.AEABuilder.get_default_ledger""></a> #### getdefaultledger Return default ledger. **Returns**: the default ledger identifier. <a id=""aea.aea_builder.AEABuilder.get_required_ledgers""></a> #### getrequiredledgers Get the required ledger identifiers. These are the ledgers for which the AEA requires a key pair. **Returns**: the list of required ledgers. <a id=""aea.aea_builder.AEABuilder.try_to_load_agent_configuration_file""></a> #### trytoloadagentconfigurationfile Try to load the agent configuration file.. <a id=""aea.aea_builder.AEABuilder.set_from_configuration""></a> #### setfromconfiguration Set builder variables from AgentConfig. **Arguments**: - : AgentConfig to get values from. - : PathLike root directory of the agent project. - : if True, the consistency check are skipped. <a id=""aea.aea_builder.AEABuilder.from_aea_project""></a> #### fromaeaproject Construct the builder from an AEA project. - load agent configuration file - set name and default configurations - load private keys - load ledger API configurations - set default ledger - load every component **Arguments**: - : path to the AEA project. - : if True, the consistency check are skipped. - : the password to encrypt/decrypt private keys. **Returns**: an AEABuilder. <a id=""aea.aea_builder.AEABuilder.get_configuration_file_path""></a> #### getconfigurationfilepath Return path to aea-config file for the given aea project path. <a id=""aea.aea_builder.make_component_logger""></a> #### makecomponentlogger Make the logger for a component. **Arguments**: - : the component configuration - : the agent name **Returns**: the logger."
aea.aea,"aea.aea. <a id=""aea.aea""></a> # aea.aea This module contains the implementation of an autonomous economic agent (AEA). <a id=""aea.aea.AEA""></a>"
aea.aea,"AEA Objects. This class implements an autonomous economic agent. <a id=""aea.aea.AEA.__init__""></a> #### init Instantiate the agent. **Arguments**: - : the identity of the agent - : the wallet of the agent. - : the resources (protocols and skills) of the agent. - : directory where to put local files. - : the event loop to run the connections. - : period to call agent's act - : amount of time to limit single act/handle to execute. - : the processing rate of envelopes per tick (i.e. single loop). - : the class implementing the error handler - : the configuration of the error handler - : the class implementing the decision maker handler to be used. - : the configuration of the decision maker handler - : the skill exception policy enum - : the connection exception policy enum - : loop_mode to choose agent run loop. - : runtime mode (async, threaded) to run AEA in. - : default ledger id - : mapping from ledger id to currency denomination - : public id to the default connection - : dictionary for default routing. - : active connection ids. Default: consider all the ones in the resources. - : the address of the search service used. - : optional uri to set generic storage - : task manager mode (threaded) to run tasks with. - : keyword arguments to be attached in the agent context namespace. <a id=""aea.aea.AEA.get_build_dir""></a> #### getbuilddir Get agent build directory. <a id=""aea.aea.AEA.context""></a> #### context Get (agent) context. <a id=""aea.aea.AEA.resources""></a> #### resources Get resources. <a id=""aea.aea.AEA.resources""></a> #### resources Set resources. <a id=""aea.aea.AEA.filter""></a> #### filter Get the filter. <a id=""aea.aea.AEA.active_behaviours""></a> #### activebehaviours Get all active behaviours to use in act. <a id=""aea.aea.AEA.setup""></a> #### setup Set up the agent. Calls setup() on the resources. <a id=""aea.aea.AEA.act""></a> #### act Perform actions. Adds new handlers and behaviours for use/execution by the runtime. <a id=""aea.aea.AEA.handle_envelope""></a> #### handleenvelope Handle an envelope. Performs the following: - fetching the protocol referenced by the envelope, and - handling if the protocol is unsupported, using the error handler, or - handling if there is a decoding error, using the error handler, or - handling if no active handler is available for the specified protocol, using the error handler, or - handling the message recovered from the envelope with all active handlers for the specified protocol. **Arguments**: - : the envelope to handle. **Returns**: None <a id=""aea.aea.AEA.get_periodic_tasks""></a> #### getperiodictasks Get all periodic tasks for agent. **Returns**: dict of callable with period specified <a id=""aea.aea.AEA.get_message_handlers""></a> #### getmessagehandlers Get handlers with message getters. **Returns**: List of tuples of callables: handler and coroutine to get a message <a id=""aea.aea.AEA.exception_handler""></a> #### exceptionhandler Handle exception raised during agent main loop execution. **Arguments**: - : exception raised - : a callable exception raised in. **Returns**: bool, propagate exception if True otherwise skip it. <a id=""aea.aea.AEA.teardown""></a> #### teardown Tear down the agent. Performs the following: - tears down the resources. <a id=""aea.aea.AEA.get_task_result""></a> #### gettaskresult Get the result from a task. **Arguments**: - : the id of the task **Returns**: async result for task_id <a id=""aea.aea.AEA.enqueue_task""></a> #### enqueuetask Enqueue a task with the task manager. **Arguments**: - : the callable instance to be enqueued - : the positional arguments to be passed to the function. - : the keyword arguments to be passed to the function. **Returns**: the task id to get the the result."
aea.agentloop,"aea.agentloop. <a id=""aea.agent_loop""></a> # aea.agentloop This module contains the implementation of an agent loop using asyncio. <a id=""aea.agent_loop.AgentLoopException""></a>"
aea.agentloop,"AgentLoopException Objects. Exception for agent loop runtime errors. <a id=""aea.agent_loop.AgentLoopStates""></a>"
aea.agentloop,"AgentLoopStates Objects. Internal agent loop states. <a id=""aea.agent_loop.BaseAgentLoop""></a>"
aea.agentloop,"BaseAgentLoop Objects. Base abstract agent loop class. <a id=""aea.agent_loop.BaseAgentLoop.__init__""></a> #### init Init loop. **Arguments**: - : Agent or AEA to run. - : optional asyncio event loop. if not specified a new loop will be created. - : if True, run in threaded mode, else async <a id=""aea.agent_loop.BaseAgentLoop.agent""></a> #### agent Get agent. <a id=""aea.agent_loop.BaseAgentLoop.state""></a> #### state Get current main loop state. <a id=""aea.agent_loop.BaseAgentLoop.wait_state""></a> #### waitstate Wait state to be set. **Arguments**: - : state or list of states. **Returns**: tuple of previous state and new state. <a id=""aea.agent_loop.BaseAgentLoop.is_running""></a> #### isrunning Get running state of the loop. <a id=""aea.agent_loop.BaseAgentLoop.set_loop""></a> #### setloop Set event loop and all event loop related objects. <a id=""aea.agent_loop.BaseAgentLoop.run""></a> #### run Run agent loop. <a id=""aea.agent_loop.BaseAgentLoop.send_to_skill""></a> #### sendtoskill Send message or envelope to another skill. If message passed it will be wrapped into envelope with optional envelope context. **Arguments**: - : envelope to send to another skill. - : envelope context <a id=""aea.agent_loop.BaseAgentLoop.skill2skill_queue""></a> #### skill2skillqueue Get skill to skill message queue. <a id=""aea.agent_loop.AsyncAgentLoop""></a>"
aea.agentloop,"AsyncAgentLoop Objects. Asyncio based agent loop suitable only for AEA. <a id=""aea.agent_loop.AsyncAgentLoop.__init__""></a> #### init Init agent loop. **Arguments**: - : AEA instance - : asyncio loop to use. optional - : is a new thread to be started for the agent loop <a id=""aea.agent_loop.AsyncAgentLoop.skill2skill_queue""></a> #### skill2skillqueue Get skill to skill message queue. <a id=""aea.agent_loop.AsyncAgentLoop.send_to_skill""></a> #### sendtoskill Send message or envelope to another skill. If message passed it will be wrapped into envelope with optional envelope context. **Arguments**: - : envelope to send to another skill. - : envelope context"
aea.runner,"aea.runner. <a id=""aea.runner""></a> # aea.runner This module contains the implementation of AEA multiple instances runner. <a id=""aea.runner.AEAInstanceTask""></a>"
aea.runner,"AEAInstanceTask Objects. Task to run agent instance. <a id=""aea.runner.AEAInstanceTask.__init__""></a> #### init Init aea instance task. **Arguments**: - : AEA instance to run within task. <a id=""aea.runner.AEAInstanceTask.id""></a> #### id Return agent name. <a id=""aea.runner.AEAInstanceTask.start""></a> #### start Start task. <a id=""aea.runner.AEAInstanceTask.stop""></a> #### stop Stop task. <a id=""aea.runner.AEAInstanceTask.create_async_task""></a> #### createasynctask Return asyncio Task for task run in asyncio loop. **Arguments**: - : abstract event loop **Returns**: task to run runtime <a id=""aea.runner.AEARunner""></a>"
aea.runner,"AEARunner Objects. Run multiple AEA instances. <a id=""aea.runner.AEARunner.__init__""></a> #### init Init AEARunner. **Arguments**: - : sequence of AEA instances to run. - : executor name to use. - : one of ExecutorExceptionPolicies to be used with Executor"
aea.abstractagent,"aea.abstractagent. <a id=""aea.abstract_agent""></a> # aea.abstractagent This module contains the interface definition of the abstract agent. <a id=""aea.abstract_agent.AbstractAgent""></a>"
aea.abstractagent,"AbstractAgent Objects. This class provides an abstract base interface for an agent. <a id=""aea.abstract_agent.AbstractAgent.name""></a> #### name Get agent's name. <a id=""aea.abstract_agent.AbstractAgent.storage_uri""></a> #### storageuri Return storage uri. <a id=""aea.abstract_agent.AbstractAgent.start""></a> #### start Start the agent. **Returns**: None <a id=""aea.abstract_agent.AbstractAgent.stop""></a> #### stop Stop the agent. **Returns**: None <a id=""aea.abstract_agent.AbstractAgent.setup""></a> #### setup Set up the agent. **Returns**: None <a id=""aea.abstract_agent.AbstractAgent.act""></a> #### act Perform actions on period. **Returns**: None <a id=""aea.abstract_agent.AbstractAgent.handle_envelope""></a> #### handleenvelope Handle an envelope. **Arguments**: - : the envelope to handle. **Returns**: None <a id=""aea.abstract_agent.AbstractAgent.get_periodic_tasks""></a> #### getperiodictasks Get all periodic tasks for agent. **Returns**: dict of callable with period specified <a id=""aea.abstract_agent.AbstractAgent.get_message_handlers""></a> #### getmessagehandlers Get handlers with message getters. **Returns**: List of tuples of callables: handler and coroutine to get a message <a id=""aea.abstract_agent.AbstractAgent.exception_handler""></a> #### exceptionhandler Handle exception raised during agent main loop execution. **Arguments**: - : exception raised - : a callable exception raised in. **Returns**: skip exception if True, otherwise re-raise it <a id=""aea.abstract_agent.AbstractAgent.teardown""></a> #### teardown Tear down the agent. **Returns**: None"
aea.launcher,"aea.launcher. <a id=""aea.launcher""></a> # aea.launcher This module contains the implementation of multiple AEA configs launcher. <a id=""aea.launcher.load_agent""></a> #### loadagent Load AEA from directory. **Arguments**: - : agent configuration directory - : the password to encrypt/decrypt the private key. **Returns**: AEA instance <a id=""aea.launcher.AEADirTask""></a>"
aea.launcher,"AEADirTask Objects. Task to run agent from agent configuration directory. <a id=""aea.launcher.AEADirTask.__init__""></a> #### init Init aea config dir task. **Arguments**: - : directory with aea config. - : the password to encrypt/decrypt the private key. <a id=""aea.launcher.AEADirTask.id""></a> #### id Return agent_dir. <a id=""aea.launcher.AEADirTask.start""></a> #### start Start task. <a id=""aea.launcher.AEADirTask.stop""></a> #### stop Stop task. <a id=""aea.launcher.AEADirTask.create_async_task""></a> #### createasynctask Return asyncio Task for task run in asyncio loop. <a id=""aea.launcher.AEADirMultiprocessTask""></a>"
aea.launcher,"AEADirMultiprocessTask Objects. Task to run agent from agent configuration directory. Version for multiprocess executor mode. <a id=""aea.launcher.AEADirMultiprocessTask.__init__""></a> #### init Init aea config dir task. **Arguments**: - : directory with aea config. - : debug level applied for AEA in subprocess - : the password to encrypt/decrypt the private key. <a id=""aea.launcher.AEADirMultiprocessTask.id""></a> #### id Return agent_dir. <a id=""aea.launcher.AEADirMultiprocessTask.failed""></a> #### failed Return was exception failed or not. If it's running it's not failed. **Returns**: bool <a id=""aea.launcher.AEADirMultiprocessTask.start""></a> #### start Return function and arguments to call within subprocess. <a id=""aea.launcher.AEADirMultiprocessTask.stop""></a> #### stop Stop task. <a id=""aea.launcher.AEALauncher""></a>"
aea.launcher,"AEALauncher Objects. Run multiple AEA instances. <a id=""aea.launcher.AEALauncher.__init__""></a> #### init Init AEALauncher. **Arguments**: - : sequence of AEA config directories. - : executor name to use. - : one of ExecutorExceptionPolicies to be used with Executor - : debug level applied for AEA in subprocesses - : the password to encrypt/decrypt the private key."
aea.common,"aea.common. <a id=""aea.common""></a> # aea.common This module contains the common types and interfaces used in the aea framework."
aea.agent,"aea.agent. <a id=""aea.agent""></a> # aea.agent This module contains the implementation of a generic agent. <a id=""aea.agent.Agent""></a>"
aea.agent,"Agent Objects. This class provides an abstract base class for a generic agent. <a id=""aea.agent.Agent.__init__""></a> #### init Instantiate the agent. **Arguments**: - : the identity of the agent. - : the list of connections of the agent. - : the event loop to run the connections. - : period to call agent's act - : loop_mode to choose agent run loop. - : runtime mode to up agent. - : optional uri to set generic storage - : task manager mode. - : the logger. - : mode of the task manager. <a id=""aea.agent.Agent.storage_uri""></a> #### storageuri Return storage uri. <a id=""aea.agent.Agent.is_running""></a> #### isrunning Get running state of the runtime and agent. <a id=""aea.agent.Agent.is_stopped""></a> #### isstopped Get running state of the runtime and agent. <a id=""aea.agent.Agent.identity""></a> #### identity Get the identity. <a id=""aea.agent.Agent.inbox""></a> #### inbox Get the inbox. The inbox contains Envelopes from the Multiplexer. The agent can pick these messages for processing. **Returns**: InBox instance <a id=""aea.agent.Agent.outbox""></a> #### outbox Get the outbox. The outbox contains Envelopes for the Multiplexer. Envelopes placed in the Outbox are processed by the Multiplexer. **Returns**: OutBox instance <a id=""aea.agent.Agent.name""></a> #### name Get the agent name. <a id=""aea.agent.Agent.tick""></a> #### tick Get the tick or agent loop count. Each agent loop (one call to each one of act(), react(), update()) increments the tick. **Returns**: tick count <a id=""aea.agent.Agent.state""></a> #### state Get state of the agent's runtime. **Returns**: RuntimeStates <a id=""aea.agent.Agent.period""></a> #### period Get a period to call act. <a id=""aea.agent.Agent.runtime""></a> #### runtime Get the runtime. <a id=""aea.agent.Agent.setup""></a> #### setup Set up the agent. <a id=""aea.agent.Agent.start""></a> #### start Start the agent. Performs the following: - calls start() on runtime. - waits for runtime to complete running (blocking) <a id=""aea.agent.Agent.handle_envelope""></a> #### handleenvelope Handle an envelope. **Arguments**: - : the envelope to handle. <a id=""aea.agent.Agent.act""></a> #### act Perform actions on period. <a id=""aea.agent.Agent.stop""></a> #### stop Stop the agent. Performs the following: - calls stop() on runtime - waits for runtime to stop (blocking) <a id=""aea.agent.Agent.teardown""></a> #### teardown Tear down the agent. <a id=""aea.agent.Agent.get_periodic_tasks""></a> #### getperiodictasks Get all periodic tasks for agent. **Returns**: dict of callable with period specified <a id=""aea.agent.Agent.get_message_handlers""></a> #### getmessagehandlers Get handlers with message getters. **Returns**: List of tuples of callables: handler and coroutine to get a message <a id=""aea.agent.Agent.exception_handler""></a> #### exceptionhandler Handle exception raised during agent main loop execution. **Arguments**: - : exception raised - : a callable exception raised in. **Returns**: bool, propagate exception if True otherwise skip it."
aea.exceptions,"aea.exceptions. <a id=""aea.exceptions""></a> # aea.exceptions Exceptions for the AEA package. <a id=""aea.exceptions.AEAException""></a>"
aea.exceptions,"AEAException Objects. User-defined exception for the AEA framework. <a id=""aea.exceptions.AEAPackageLoadingError""></a>"
aea.exceptions,"AEAPackageLoadingError Objects. Class for exceptions that are raised for loading errors of AEA packages. <a id=""aea.exceptions.AEASetupError""></a>"
aea.exceptions,"AEASetupError Objects. Class for exceptions that are raised for setup errors of AEA packages. <a id=""aea.exceptions.AEATeardownError""></a>"
aea.exceptions,"AEATeardownError Objects. Class for exceptions that are raised for teardown errors of AEA packages. <a id=""aea.exceptions.AEAActException""></a>"
aea.exceptions,"AEAActException Objects. Class for exceptions that are raised for act errors of AEA packages. <a id=""aea.exceptions.AEAHandleException""></a>"
aea.exceptions,"AEAHandleException Objects. Class for exceptions that are raised for handler errors of AEA packages. <a id=""aea.exceptions.AEAInstantiationException""></a>"
aea.exceptions,"AEAInstantiationException Objects. Class for exceptions that are raised for instantiation errors of AEA packages. <a id=""aea.exceptions.AEAPluginError""></a>"
aea.exceptions,"AEAPluginError Objects. Class for exceptions that are raised for wrong plugin setup of the working set. <a id=""aea.exceptions.AEAEnforceError""></a>"
aea.exceptions,"AEAEnforceError Objects. Class for enforcement errors. <a id=""aea.exceptions.AEAValidationError""></a>"
aea.exceptions,"AEAValidationError Objects. Class for validation errors of an AEA. <a id=""aea.exceptions.AEAComponentLoadException""></a>"
aea.exceptions,"AEAComponentLoadException Objects. Class for component loading errors of an AEA. <a id=""aea.exceptions.AEAWalletNoAddressException""></a>"
aea.exceptions,"AEAWalletNoAddressException Objects. Class for attempts to instantiate a wallet without addresses. <a id=""aea.exceptions._StopRuntime""></a>"
aea.exceptions,"StopRuntime Objects. Exception to stop runtime. For internal usage only! Used to perform asyncio call from sync callbacks. <a id=""aea.exceptions._StopRuntime.__init__""></a> #### init Init _StopRuntime exception. **Arguments**: - : exception to reraise. <a id=""aea.exceptions.enforce""></a> #### enforce Evaluate a condition and raise an exception with the provided text if it is not satisfied. **Arguments**: - : the valid condition - : the exception to be raised - : the class of exception <a id=""aea.exceptions.parse_exception""></a> #### parseexception Parse an exception to get the relevant lines. **Arguments**: - : the exception to be parsed - : the limit **Returns**: exception as string"
