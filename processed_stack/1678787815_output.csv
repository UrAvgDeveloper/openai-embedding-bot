title,text
Remote agents,"Remote agents. # Remote agents μAgents can also interact remotely from different locations across the internet. All you need to know is the recipient agent's address to query it's information in the Almanac contract at almanac-overview.md. See Addresses at addresses.md for more information about μAgent addresses. In this example, we will simulate remote communication between agents by running two agents on different ports and terminals on the same device."
Remote agents,Alice. 
Remote agents,"Bob. and Alice"" In bob's terminal: <div id=""termynal1"" data-termynal data-ty-typeDelay=""100"" data-ty-lineDelay=""700""> <span data-ty>INFO:root:Adding funds to agent...complete</span> <span data-ty>INFO:root:Registering Agent bob...</span> <span data-ty>INFO:root:Registering Agent bob...complete.</span> <span data-ty>Wallet address: fetch1cr9ghmxrf943dmw484ma3v3nz2v0q6u9pynqdk</span> <span data-ty>[bob] From: agent1qdp9j2ev86k3h5acaayjm8tpx36zv4mjxn05pa2kwesspstzj697xy5vk2a hello there bob</span> <span data-ty>[bob] From: agent1qdp9j2ev86k3h5acaayjm8tpx36zv4mjxn05pa2kwesspstzj697xy5vk2a hello there bob</span> <span data-ty>[bob] From: agent1qdp9j2ev86k3h5acaayjm8tpx36zv4mjxn05pa2kwesspstzj697xy5vk2a hello there bob</span> </div> In alice's terminal: <div id=""termynal2"" data-termynal data-ty-typeDelay=""100"" data-ty-lineDelay=""700""> <span data-ty>INFO:root:Adding funds to agent...complete</span> <span data-ty>INFO:root:Registering Agent alice...</span> <span data-ty>INFO:root:Registering Agent alice...complete.</span> <span data-ty>Wallet address: fetchnfu3hd87323mw484ma3v3nz2v0q6uhds7d</span> <span data-ty>[alice] From: agent5kdyfj2ev86k3h5acaa93kdnch8shv4mjxn05pa2kwesspstzj023jdus93j hello there alice</span> <span data-ty>[alice] From: agent5kdyfj2ev86k3h5acaa93kdnch8shv4mjxn05pa2kwesspstzj023jdus93j hello there alice</span> <span data-ty>[alice] From: agent5kdyfj2ev86k3h5acaa93kdnch8shv4mjxn05pa2kwesspstzj023jdus93j hello there alice</span> </div> For a more complex example visit restaurant booking demo at booking-demo.md."
Agent interactions,Agent interactions. # Agent interactions
Agent interactions,"Add a second agent. To show μAgents interacting, we'll need to create a second agent. Importing the class will allow us to create a collection of agents and run them together in the same script. Then we can simply add agents and to the and run it. Yoy should observe alice and bob printing out their name in the terminal. !!! example ""Run your agents"" You will see the message printed out every 2 seconds. You might see a message indicating insufficient funds to register, check out agent registration at almanac-registration.md for more information. <div id=""termynal1"" data-termynal data-ty-typeDelay=""100"" data-ty-lineDelay=""700""> <span data-ty>Hello, my name is alice</span> <span data-ty>Hello, my name is bob</span> <span data-ty>Hello, my name is alice</span> <span data-ty>Hello, my name is bob</span> </div>"
Agent interactions,"Agent communication. To allow our agents to communicate with each other we will need a message structure, and for that, we need to import to define a generic message. We can use the function from the class to send a message from alice to bob on an interval. We also need to introduce a message handler for bob. We will do this inside the decorator that will activate the once bob receives the message. Finally, we need to add both agents to the in order to run them from the same script. When running the script above, you should see alice's message printed on the terminal: !!! example ""Run your agents"" <div id=""termynal2"" data-termynal data-ty-typeDelay=""100"" data-ty-lineDelay=""700""> <span data-ty>[bob]: message received from agent1qww3ju3h6kfcuqf54gkghvt2pqe8qp97a7nzm2vp8plfxflc0epzcjsv79t: hello there bob my name is alice</span> <span data-ty>[bob]: message received from agent1qww3ju3h6kfcuqf54gkghvt2pqe8qp97a7nzm2vp8plfxflc0epzcjsv79t: hello there bob my name is alice</span> </div> You could also try to add a response from bob to alice, for that you would need to add a message from bob after alice's message is received and a new message handler for alice to be able to manage and print out bob's message. For a slightly more complex example check out the next section remote agents at remote-agents.md."
Endpoint weighting,"Endpoint weighting. # Endpoint weighting When an agent registers in the almanac contract, it must specify the service endpoints that they provide along with a weight parameter for each endpoint. Then, when any agent tries to communicate with your agent, the service endpoint will be chosen using a weighted random selection. You will have two format options when defining your agent's endpoints:"
Endpoint weighting,"List format. Define your agent's endpoints as a list of strings, the weights will be automatically assigned a value of 1."
Endpoint weighting,"Dict format. specifying the weight for each endpoint, if the weight parameter is not specified, it will be assigned a value of 1."
Interval tasks,"Interval tasks. # Interval tasks μAgents can use interval tasks to periodically perform actions with some time interval. We can use the decorator to repeat a task in a specified period. We also need to import to have access to the information that the agent needs to function. In this case, we will just define a function that will print out the agent name every 2 seconds. !!! example ""Run your agent"" You should see the message printed out in the terminal every 2 seconds. <div id=""termynal1"" data-termynal data-ty-typeDelay=""100"" data-ty-lineDelay=""200""> <span data-ty>Hello my name is alice.</span> <span data-ty>Hello my name is alice.</span> <span data-ty>Hello my name is alice.</span> <span data-ty>Hello my name is alice.</span> </div> For another interval task example see agent communication at simple-interaction.md."
Installation,Installation. # Installation
Installation,"System requirements. "" The Python μAgents pacakge runs on , , and . You need <a href=""https://www.python.org/downloads/"" target=""_blank"">Python</a> 3.8, 3.9 or 3.10 on your system."
Installation,"Install from PyPI. !!! Info ""We recommend first creating a clean Python virtual environment, for example using poetry at https://python-poetry.org/docs/ or pipenv at https://pipenv.pypa.io/en/latest/install/."" === ""poetry"" Create and enter a new virtual environment: === ""pipenv"" Create and enter a new environment: Now install μAgents from the PyPI package registry: ??? note ""Alternatively, install from source code:"" Download the latest released version from Github and navigate to the uAgents directory Install the required dependencies Open the virtual environment"
Almanac Contract,"Almanac Contract. # Almanac Contract Agents of the system will be registered at almanac-registration.md in the Almanac contract. Users can query a particular agent's information directly from the contract to communicate. A central part of the system is that registrations are strictly time (in blocks) limited. This primarily helps with the liveness problem when dealing with a large ecosystem of agents. In order to keep the registration information up to date, the agent will need to intermittently re-register their information with the Almanac contract. When an agent’s information times out, queries for that agent will no longer return the registered information. With each registration, the agent will need to prove ownership of the agent address at addresses.md by signing a sequence number with their μAgent private key and submitting the signature for verification on the contract. This sequence number should increment with each successful registration and should also be queryable. This will be performed automatically."
Storage,"Storage. # Storage You can store information using the agent's local storage by simply running: within a handler, where is the agent's object. This will save the information in a JSON file, you can retreive it a any time using: See the restaurant booking demo at booking-demo.md for an example that makes use of the agent's storage to store table information."
Restaurant Booking Demo,"Restaurant Booking Demo. # Restaurant Booking Demo To showcase how easy it is to create μAgents for a particular application, here is an example of how to create a custom message type using the class. For this example, we will create a restaurant booking service with two agents: a with tables available and a requesting table availability."
Restaurant Booking Demo,"Restaurant Setup. ,Storage: We will now store the information in the restaurant agent and run it. The restaurant agent is now online and listing for messages."
Restaurant Booking Demo,"User Setup. We will first import the needed objects and protocols. We will also need the restaurant agent's address to be able to communicate with it. Now we create the table query to generate the using the restaurant address. If the request has not been completed before, we send the request to the restaurant agent. The function below activates when a message is received back from the restaurant agent. will evaluate if there is a table available, and if so, respond with a to complete the reservation. Then, will handle messages from the restaurant agent on whether the reservation was successful or unsuccessful. Finally, run the restaurant agent and then the user agent from different terminals. !!! example ""Run restaurant agent from one terminal"" !!! example ""Run user agent from a second terminal"" You should see this printed on the user terminal: <div id=""termynal1"" data-termynal data-ty-typeDelay=""100"" data-ty-lineDelay=""700""> <span data-ty>INFO:root:Adding funds to agent...complete</span> <span data-ty>INFO:root:Registering Agent user...</span> <span data-ty>INFO:root:Registering Agent user...complete.</span> <span data-ty>Wallet address: fetchnfu3hd87323mw484ma3v3nz2v0q6uhds7d</span> <span data-ty>There is a free table, attempting to book one now</span> <span data-ty>Table reservation was successful</span> </div> See the full example scripts at restaurant at https://github.com/fetchai/uAgents/blob/master/examples/09-booking-protocol-demo/restaurant.py and user at https://github.com/fetchai/uAgents/blob/master/examples/09-booking-protocol-demo/user.py."
Agent addresses,Agent addresses. # Agent addresses You can print your agent's addresses in the following way: Your agent will have two types of addresses: - represents the main μAgent identifier. Other μAgents can use this to query the agent's information in the Almanac contract. - provides the agent with the capabilities for interacting with the Fetch ledger such as registering in the Almanac contract.
Exchange protocol,Exchange protocol. # Exchange protocol
Exchange protocol,"Overview. The **μAgents Exchange Protocol** defines a simple standard by which the agents communicate. In this protocol, agents can send ***messages*** enclosed in ***envelopes***, which are then encoded and sent via HTTP to the ***endpoints*** of other agents. We break down each of these concepts in more detail below."
Exchange protocol,"Messages. consist of key-value pairs following the standard JSON format. Here are a few examples: Once created, messages are then enclosed in envelopes containing some important metadata."
Exchange protocol,Envelopes. are then JSON encoded and sent to endpoints of other agents or services.
Exchange protocol,Endpoints. The protocol supports only one standardised endpoint: and expects data which is broadly JSON compatible. The protocol currently supports MIME content type .
