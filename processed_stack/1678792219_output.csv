title,text
Authors,Authors. # Authors This is the official list of the AEA Framework authors: ### Lead - Ali Hosseini <ali.hosseini@fetch.ai> 5A11 at https://github.com/5A11 ### Primary Current and Past Contributors - James Riehl jrriehl at https://github.com/jrriehl - David Minarsch DavidMinarsch at https://github.com/DavidMinarsch - Marco Favorito MarcoFavorito at https://github.com/MarcoFavorito - Yuri Turchenkov solarw at https://github.com/solarw - Oleg Panasevych Panasevychol at https://github.com/panasevychol - Lokman Rahmani lrahmani at https://github.com/lrahmani - Jiří Vestfál MissingNO57 at https://github.com/MissingNO57
Development Guidelines,Development Guidelines. # Development Guidelines - Getting the Source at #get - Setting up a New Development Environment at #setup - Development at #dev - General code quality checks at #general - Updating API documentation at #api - Updating documentation at #docs - Updating dependencies at #deps - Updating packages at #package - Tests at #tests - Miscellaneous checks at #misc - Contributing at #contributing - Making Releases at #release
Development Guidelines,"<a name=""get""></a> Getting the Source. 1. Fork the [agents-aea repository][repo]. 2. Clone your fork of the agents-aea repository: 3. Define an remote pointing back to the main agents-aea repository:"
Development Guidelines,"<a name=""setup""></a> Setting up a New Development Environment. 1. Ensure you have Python (version , or ) and [][poetry]. 2. This will create a new virtual environment using poetry with the project and all the development dependencies installed. > We use <a href=""https://python-poetry.org"" target=""_blank"">poetry</a> to manage dependencies. All python specific dependencies are specified in and installed with the framework. > > You can have more control on the installed dependencies by leveraging poetry's features. 3. To enter the virtual environment. Depending on what you want to do, you might need extra tools on your system: - The project uses [Google Protocol Buffers][protobuf] compiler for message serialization. The compiler's version must match the library installed with the project (see ). - The package is partially developed in Go. To make changes, [install Golang][go]. - To update fingerprint hashes of packages, you will need the [IPFS daemon][ipfs]."
Development Guidelines,"<a name=""dev""></a>Development. ,<a name=""general""></a>General code quality checks: To run general code quality checkers, formatters and linters: - Automatically formats your code and sorts your imports, checks your code's quality and scans for any unused code. - Statically checks the correctness of the types. - Analyses the quality of your code. - Checks the code for known vulnerabilities and common security issues. - Cleans your development environment and deletes temporary files and directories. - For the Go parts, we use [][golines] and [][golangci-lint] for linting. ,<a name=""docs""></a>Updating documentation: We use [][mkdocs] and [][material] for static documentation pages. To make changes to the documentation: - This starts a live-reloading docs server on localhost which you can access by going to <http://127.0.0.1:8000/> in your browser. Making changes to the documentation automatically reloads this page, showing you the latest changes. To create a new documentation page, add a markdown file under and add a reference to this page in under . ,<a name=""api""></a>Updating API documentation: If you've made changes to the core package that affects the public API: - This regenerates the API docs. If pages are added/deleted, or there are changes in their structure, these need to be reflected manually in the section of . ,<a name=""deps""></a>Updating dependencies: We use [][poetry] and to manage the project's dependencies. If you've made any changes to the dependencies (e.g. added/removed dependencies, or updated package version requirements): - This re-locks the dependencies. Ensure that the file is pushed into the repository (by default it is). - Checks that the licence for the framework is correct, taking into account the licences for all dependencies, their dependencies and so forth. ,<a name=""package""></a>Updating packages: If you've made changes to the packages included in the repository (e.g. skills, protocols, connections, contracts): - Updates the fingerprint hashes of every package in the repository. - Checks, a. that the package hashes are correct, b. the documentation correctly references the latest packages, and c) runs other correctness checks on packages. ,<a name=""tests""></a>Tests: To test the Python part of the project, we use . To run the tests: - Runs all the tests. - Runs all plugin tests. - Runs the tests for . For example, to run the tests for the CLI: To test the Go parts of the project: - from the root directory of a Go package (e.g. ) to run the Golang tests. If you experience installation or build issues, run . ,<a name=""misc""></a>Miscellaneous checks: - Checks that all files have the correct copyright header (where applicable). - Checks that the links in the documentations are valid and alive. - Checks the libp2p code under and in the connection packages aren't different. - Checks the plugin licenses and the codes under and ledger plugins aren't different."
Development Guidelines,"<a name=""contributing""></a>Contributing. For instructions on how to contribute to the project (e.g. creating Pull Requests, commit message convention, etc), see the [contributing guide][contributing guide]."
Development Guidelines,"<a name=""release""></a>Making Releases. For instructions on how to make a release, see the [release process][release process] guide. [protobuf]: https://developers.google.com/protocol-buffers/ [ipfs]: https://docs.ipfs.tech/install/ [go]: https://golang.org/doc/install [golines]: https://github.com/segmentio/golines [golangci-lint]: https://golangci-lint.run [mkdocs]: https://www.mkdocs.org [material]: https://squidfunk.github.io/mkdocs-material/ [poetry]: https://python-poetry.org [contributing guide]: https://github.com/fetchai/agents-aea/blob/main/CONTRIBUTING.md [release process]: https://github.com/fetchai/agents-aea/blob/main/scripts/RELEASE_PROCESS.md [repo]: https://github.com/fetchai/agents-aea"
Release History,Release History. # Release History
Release History,1.2.5 (2023-01-18). Docs: - Sweeping foundational updates across all documentation Misc: - Update some dependencies - Update copyright headers across all files (including year 2023) - Remove submodule - Various bug fixes
Release History,"1.2.4 (2022-11-30). Agents: - Add hello_world skill and agent Docs: - Update repository documentations - Update installation guide for Raspberry Pis (add a link to prebuilt image for Raspberry Pis) Misc: - Update the dependencies (protobuf, jsonschema, cosmpy) - Various improvements in the repository structure (e.g. makefile, tox, workflows) - Speed up CI/CD - Various bug fixes"
Release History,1.2.3 (2022-11-03). AEA: - core and development are dependencies updated. - ci improvements - cosmpy updated to 0.6.0 - Small code format improvements and better linting Plugins: - Small code format improvements - cosmpy updated to 0.6.0 Packages: - Small code format improvements
Release History,"1.2.2 (2022-10-17). AEA: - Dependency management switched from pipenv to poetry. - Protocol generator updated to support Unions - Dependencies versions updates: click, mypy, black, ipfshttpclient - Small code format improvements Plugins: - Update web3 to version 5.31 - Small code format improvements - ipfshttpclient dependency version updated to 0.8.0a2 Packages: - Protocols regenerated according to the latest protocol generator improvements: Union support - Small code format improvements"
Release History,1.2.1 (2022-07-12). AEA: - Protocol generator uses int64 instead of int32 - Dependencies versions updates Plugins: - Upgrades fetchai plugin to use cosmpy>=0.5.0 - Upgrades cosmos plugin to use cosmpy>=0.5.0 Packages: - Fixes for skills to work with dorado testnet (tx fee adjusted)
Release History,"1.2.0 (2022-05-05). AEA: - Adds support for Python 3.10 - Updates protobuf dependency - Updates asyncio dependency - Updates golang modules - Updates many dependencies to their latest versions - Fixes dependency issues Plugins: - Upgrades fetchai plugin to be compatible with Dorado networks - Upgrades cosmos plugin to be compatible with Dorado networks Packages: - Adds more logging to the p2p_libp2p packages (vanilla, client, mailbox) - Aries demo updated to cover the full base scenario - Protocols were regenerated with newer protobuf Chores: - Fixed various tests - Fixed docker container issue in tests - Added automated script to add support for new versions of the Fetchai network - Added automated script to update copyright headers and check their validity - Apply the above script on all packages - Adds tests for BaseContractTestTool - Improves the script that automatically updates package versions"
Release History,1.1.1 (2021-12-15). AEA: - Updates the protocol generator to generate protocols that satisfy linter constraints Plugins: - aea-cli-ipfs plugin small update Packages: - Fixes fetchai/p2p_libp2p connection to address a slow DHT lookup problem - Updates protocols with the latest protocol generator - Updates random beacon agent so it produces block data instead of the (now deprecated feature of the test-net) random beacon data Misc - Bumps go library versions - Various fixes and improvements
Release History,"1.1.0 (2021-10-13). AEA: - Adds public keys to agent identity and skill context - Adds contract test tool - Adds multiprocess support for task manager - Adds multiprocess backed support to - Adds support for excluding connection on - Adds support for adding a key that is being generated ( option for command) - Adds check for dependencies to be present in registry on a package push - Makes more efficient installing of project dependencies on - Adds dependency conflict detection on - Improves pip install error details on - Adds validation of when loading configuration - Adds a check for consistency of package versions in - Adds better error reporting for aea registry requests - Fixes IPFS hash calculation for large files - Fixes protobuf dictionary serializer's uncovered cases and makes it deterministic - Fixes scaffolding of error and decision maker handlers - Fixes pywin32 problem when checking dependency - Improves existing testing tools Benchmarks: - Adds agents construction and decision maker benchmark cases Plugins: - Upgrades fetchai plugin to use CosmPy instead of CLI calls - Upgrades cosmos plugin to use CosmPy instead of CLI calls - Upgrades fetchai plugin to use StargateWorld - Upgrades cosmos plugin to Stargate - Sets the correct maximum Gas for fetch.ai plugin Packages: - Adds support for Tac to be run against fetchai StargateWorld test-net - Adds more informative error messages to CosmWasm ERC1155 contract - Adds support for atomic swap to CosmWasm ERC1155 contract - Adds an ACN protocol that formalises ACN communication using the framework's protocol language - Adds protocol for preparing atomic swap transactions for cosmos-based networks - Adds https support for server connection - Adds parametrising of http(s) in soef connection - Fixes http server content length response problem - Updates Oracle contract to 0.14 - Implements the full ACN spec throughout the ACN packages - Implements correct error code usage in ACN packages - Refactors ACN packages to unify reused logic - Adds tests for gym skills - Adds dockerised SOEF - Adds libp2p mailbox connection - Multiple fixes and stability improvements for connections Docs: - Adds ACN internals documentation - Fixes tutorial for HTTP connection and skill - Multiple additional docs updates - Adds more context to private keys docs Chores: - Various development features bumped - Bumped Mermaid-JS, for UML diagrams to major version 8 - Applies darglint to the code Examples: - Adds a unified script for running various versions/modes of Tac"
Release History,1.0.2 (2021-06-03). AEA: - Bounds versions of dependencies by next major - Fixes incoherent warning message during package loading - Improves various incomprehensible error messages - Adds debug log message when abstract components are loaded - Adds tests and minor fixes for password related CLI commands and password usage in - Adds default error handler in - Ensures private key checks are performed after override setting in - Applies docstring fixes suggested by - Fixes command to use correct author - Fixes command to consider overrides Plugins: - Bounds versions of dependencies by next major Packages: - Updates connection to use TCP sockets for all platforms - Multiple fixes on including better error handling and stream creation - Adds sending queue in connection to handle sending failures - Adds unit tests for utils - Adds additional tests for connection - Fixes location bug in AW5 - Improves connection check handling in soef connection - Updates oracle and oracle client contracts for better access control - Adds skill tests for skills - Adds skill tests for skills - Fixes minor bug in ML skills - Multiple additional tests and test stability fixes Docs: - Extends demo docs to include guidance of usage in AEA Manager - Adds short guide on Kubernetes deployment - Multiple additional docs updates Chores: - Adds option to script - Adds script to detect if aea or plugins need bumping - Bumps various development dependencies - Adds Golang and GCC in Windows install script - Adds to CI Examples: - Updates TAC deployment scripts and images
Release History,- (2021-05-05). Packages: - Adds node watcher to connection - Improves logging and error handling in node - Addresses potential overflow issue in node - Fixes concurrency issue in node which could lead to wrongly ordered envelopes - Improves logging in TAC skills - Fixes Exception handling in connect/disconnect calls of soef connection - Extends public DHT tests to include staging - Adds tests for envelope ordering for all routes - Multiple additional tests and test stability fixes
Release History,1.0.1 (2021-04-30). AEA: - Fixes wheels issue for Windows - Fixes password propagation for certificate issuance in - Improves error message when local registry not present AEALite: - Adds full protocol support - Adds end-to-end interaction example with AEA (based on protocol) - Multiple additional tests and test stability fixes Packages: - Fixes multiple bugs in version of TAC - Refactors p2p connections for better separation of concerns and maintainability - Integrates aggregation with simple oracle skill - Ensures genus and classifications are used in all skills using SOEF - Extends SOEF connection to implement protocol fully - Handles SOEF failures in skills - Adds simple aggregation skills including tests and docs - Adds tests for registration AW agents - Adds tests for reconnection logic in p2p connections - Multiple additional tests and test stability fixes Docs: - Extends car park demo with usage guide for AEA manager - Multiple additional docs updates Examples: - Adds TAC deployment example
Release History,1.0.0 (2021-03-30). - Improves contributor guide - Enables additional pylint checks - Adds configuration support on exception behaviour in ledger plugins - Improves exception handling in and plugins - Improves quickstart guide - Fixes multiple flaky tests - Fixes various outdated metadata - Resolves a CVE (CVE-2021-27291) affecting development dependencies - Adds end-to-end support and tests for simple oracle on Ethereum and Fetch.ai ledgers - Multiple minor fixes - Multiple additional tests and test stability fixes
Release History,1.0.0rc2 (2021-03-28). - Extends CLI command to allow fingerprinting of agents - Improves Docker example - Fixes a bug in which leaves it in an unclean state when project adding fails - Fixes dependencies of - Improves guide on HTTP client and server connection - Removes pickle library usage in the ML skills - Adds various consistency checks in configurations - Replaces usage of with in plugins - Changes generator to avoid non-idiomatic usage of type checks - Multiple minor fixes - Multiple additional tests and test stability fixes
Release History,"1.0.0rc1 (2021-03-24). - Adds CLI command - Adds support for encrypting private keys at rest - Adds support for configuration of decision maker and error handler instances from - Adds support for explicitly marking behaviours and handlers as dynamic - Adds support for fetchai ledger to oracle skills and contract - Adds timeout support on multiplexer calls to connections - Fixes bug in regex constrained string for id validation - Adds docs section on how AEAs satisfy 12-factor methodology - Adds docs section on tradeoffs made in - Adds example for logs streaming to browser - Removes multiple temporary hacks for backwards compatibility - Adds skills tests coverage for and skills - Adds field in - Removes field in - Adds field to cert requests - Removes requirement for exact protocol buffers compiler, prints version used in protocols - Adds support to configure task manager mode via - Fixed spelling across docstrings in code base - Multiple minor fixes - Multiple docs updates to fix order of CLI commands with respect to installing dependencies - Multiple additional tests and test stability fixes"
Release History,"0.11.2 (2021-03-17). - Fixes a package import issue - Fixes an issue where did not teardown properly under certain conditions - Fixes a bug in testing tools - Fixes a bug where plugins are not loaded after installation in - Adds unit tests for weather, thermometer and car park skills - Fixes a missing dependency in Windows - Improves SOEF connections' error handling - Fixes bug in ML skills and adds unit tests - Adds script to bump plugin versions - Adds gas price strategy support in plugin - Adds CLI plugin for IPFS interactions (add/get) - Adds support for CLI plugins to framework - Multiple additional tests and test stability fixes"
Release History,"0.11.1 (2021-03-06). - Bumps to to address a CVE affecting , and connections - Adds script to ensure Pipfile and dependencies align - Enforces presence of in - Adds support for installation of agent-level PyPI dependencies in - Sets default ledger plugin during - Updates various agent packages with missing ledger plugin dependencies - Bumps various development dependencies - Renames skill to skill and generalises it - Updates skill to use connection - Multiple docs updates to fix order of CLI commands with respect to installing dependencies - Multiple additional tests and test stability fixes"
Release History,"0.11.0 (2021-03-04). - Adds slots usage in frequently used framework objects, including - Fixes a bug in command where eject prompt was not offered - Refactors skill component configurations to allow for skill components (, , ) to be placed anywhere in a skill - Extends skill component configuration to specify optional field - Extracts all ledger specific functionality in plugins - Improves error logging in http server connection - Updates documentation - Adds restart support to connection on read/write failure - Adds validation of default routing and default connection configuration - Refactors and significantly simplifies routing between components - Limits usage of - Adds support for new CosmWasm message format in ledger plugins - Adds project loading checks and optional auto removal in - Adds support for reuse of threaded - Fixes bug in TAC which caused agents to make suboptimal trades - Adds support to specify dependencies on level - Improves release scripts - Adds lightweight Golang AEALite library - Adds support for skill-to-skill messages - Removes CLI GUI - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes"
Release History,"0.10.1 (2021-02-21). - Changes default URL of connection to https - Improves teardown, retry and edge case handling of and connections - Adds auto-generation of private keys to - Exposes address getters on - Improves package validation error messages - Simplifies default and extracts advanced features in separate class - Fixes task manager and its usage in skills - Adds support for multi-language protocol stub generation - Adds usage to additional connections - Adds IO helper function for consistent file usage - Extends release helper scripts - Removes stub connection as default connection - Adds support for AEA usage without connections - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes"
Release History,"0.10.0 (2021-02-11). - Removes error skill from agents which do not need it - Adds support for relay connection reconnect in ACN - Multiplexer refactoring for easier connection handling - Fix skill tests on CosmWasm chains - Extends docs on usage of CosmWasm chains - Adds version compatibility in command - Introduces protocol specification id and related changes for better interoperability - Adds synchronous connection base class - Exposes state setter in connection base class - Adds Yoti protocol and connection - Multiple updates to generic buyer - Adds additional automation to , including automated handling of certs, keys and other package specific data - Multiple test improvements and fixes - Add stricter typing and checks - Fixes to MacOS install script - Adds threading patch for web3 - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes"
Release History,"0.9.2 (2021-01-21). - Fixes , in particular for CosmWasm - Fixes error output from CLI command - Update in non-vendor packages when calling CLI command - Extend command to fetch newer agent if present on registry - Add support for mixed fetch mode in - Fixes logging overrides in - Configuration overrides now properly handle values - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes"
Release History,0.9.1 (2021-01-14). - Fixes multiple issues with including overrides not being correctly applied - Restructures docs navigation - Updates documentation - Extends functionality of command to cover more cases - Fixes a bug in the command which prevented upgrading across version minors - Fixes a bug in where the console output was inconsistent with the actual error - Fixes scaffold connection constructor - Multiple additional tests to improve stability - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,0.9.0 (2021-01-06). - Adds multiple bug fixes on - Adds for better programmatic configuration management - Fixes auto-filling of field in AEA configuration - Adds tests for confirmation skills AW2/3 - Extends to support proper configuration overriding - Fixes ML skills demo - Fixes environment variable resolution in configuration files - Adds support to fingerprint packages by providing a path - Adds CLI command to sync local and remote registry - Adds support to push vendorised packages to local registry - Adds missing tests for code in documentation - Adds prompt in CLI command to hint at protocol generator - Adds CLI command for Proof of Representation - Adds support in connections for Proof of Representation - Adds support for Proof of Representation in ACN ( connections) - Adds automated spell checking for all files and makes related fixes - Multiple additional tests to improve stability - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,0.8.0 (2020-12-17). - Adds support for protocol dialogue rules validation - Fixes URL forwarding in http server connection - Revises protocols to correctly define terminal states - Adds a build command - Adds build command support for libp2p connection - Adds multiple fixes to libp2p connection - Adds prometheus connection and protocol - Adds tests for confirmation AW1 skill - Adds oracle demo docs - Replaces pickle with protobuf in all protocols - Refactors OEF models to account for semantic irregularities - Updates docs for demos relying on Ganache - Adds generic storage support - Adds configurable dialogue offloading - Fixes transaction generation on confirmation bugs - Fixes transaction processing order in all buyer skills - Extends ledger API protocol to query ledger state - Adds remove-key command in CLI - Multiple tac stability fixes - Adds support for configurable error handler - Multiple additional tests to improve stability - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,0.7.5 (2020-11-25). - Adds AW3 AEAs - Adds basic oracle skills and contracts - Replaces usage of Ropsten testnet with Ganache in packages - Fixes multiplexer setup when used outside AEA - Improves help command output of CLI - Adds integration tests for simple skills - Adds version check on CLI push - Adds integration tests for tac negotiation skills - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,0.7.4 (2020-11-18). - Replaces error skill handler usage with built in handler - Extends to support persistence between runs - Replaces usage of Ropsten testnet with Ganache - Adds support for symlink creation during scaffold and add - Makes contract interface loading extensible - Adds support for PEP561 - Adds integration tests for launcher command - Adds support for storage of unique page address in SOEF - Fixes publish command bug on Windows - Refactors constants usage throughout - Adds support for profiling on - Multiple stability improvements to core asynchronous modules - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,0.7.3 (2020-11-12). - Extends AW AEAs - Fixes overwriting of private key files on startup - Fixes behaviour bugs - Adds tests for tac participation skill - Adds development setup guide - Improves exception logging for easier debugging - Fixes mixed mode in upgrade command - Reduces verbosity of some CLI commands - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,"0.7.2 (2020-11-09). - Fixes some AW2 AEAs - Improves generic buyer AEA - Fixes a few backwards incompatibilities on CLI (upgrade, add, fetch) introduced in 0.7.1 - Fixes geolocation in some tests - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes"
Release History,0.7.1 (2020-11-05). - Adds two AEAs for Agent World 2 - Refactors dialogue class to optimize for memory - Refactors message class to optimize for memory - Adds mixed registry mode to CLI and makes it default - Extends upgrade command to automatically update references of non-vendor packages - Adds deployment scripts for - Extends configuration set/get support for lists and dictionaries - Fixes location specifiers throughout code base - Imposes limits on length of user defined strings like author and package name - Relaxes version specifiers for some dependencies - Adds support for skills to reference connections as dependencies - Makes ledger and currency ids configurable - Adds test coverage for the tac control skills - Improves quick start guidance and adds docker images - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,"0.7.0 (2020-10-22). - Adds two AEAs for Agent World 1 - Adds support to apply configuration overrides to CLI calls transfer and get-wealth - Adds install scripts to install AEA and dependencies on all major OS (Windows, MacOs, Ubuntu) - Adds developer mailing list opt-in step to CLI - Modifies custom configurations in to use public id - Adds all non-optional fields in by default - Fixes upgrade command to properly handle dependencies of non-vendor packages - Remove all distributed packages and add them to registry - Adds public ids to all skill files and makes it a requirement - Adds primitive benchmarks for libp2p node - Adds Prometheus monitoring to libp2p node - Makes body a private attribute in message base class - Renames to in HTTP protocol - Adds support for abstract connections - Refactors protobuf schemas for protocols to avoid code duplication - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes"
Release History,0.6.3 (2020-10-16). - Adds skill testing tools and documentation - Adds human readable log output regarding configuration for connection - Adds support to install PyPI dependencies from and - Adds CLI upgrade command to upgrade entire agent project and components - Extends CLI remove command to include option to remove dependencies - Extends SOEF chain identifier support - Adds CLI transfer command to transfer wealth - Adds integration tests for skills generic buyer and seller using skill testing tool - Adds validation of component configurations when setting component configuration overrides - Multiple refactoring of internal configuration and helper objects and methods - Fix a bug on CLI push local with latest rather than version specifier - Adds files in all agent projects - Adds agent name in logger paths of runnable objects - Fixes tac skills to work with and without ERC1155 contract - Adds additional validations on message flow - Multiple docs updates based on user feedback - Multiple additional tests and test stability fixes
Release History,0.6.2 (2020-10-01). - Adds to manage multiple agent projects programmatically - Improves SOEF connection reliability on unregister - Extends configuration classes to handle overriding configurations programmatically - Improves configuration schemas and validations - Fixes Multiplexer termination errors - Allow finer-grained override of component configurations from - Fixes tac controller to work with Ethereum contracts again - Fixes multiple deploy and development scripts - Introduces to development dependencies for automated import sorting - Adds reset password command to CLI - Adds support for abbreviated public ids (latest) to CLI and configurations - Adds additional documentation string linters for improved API documentation checks - Multiple docs updates including additional explanations of ACN architecture - Multiple additional tests and test stability fixes
Release History,0.6.1 (2020-09-17). - Adds a standalone script to deploy an ACN node - Adds filtering of out-dated addresses in DHT lookups - Updates multiple developer scripts - Increases code coverage of all protocols to 100% - Fixes a disconnection issue of the multiplexer - Extends soef connection to support additional registration commands and search responses - Extends protocol to include success performative and agent info in search response - Adds files to all skills - Adds configurable exception policy handling for multiplexer - Fixes support for http headers in http server connection - Adds additional consistency checks on addresses in dialogues - Exposes decision maker address on skill context - Adds comprehensive benchmark scripts - Multiple docs updates including additional explanations of soef usage - Multiple additional tests and test stability fixes
Release History,"0.6.0 (2020-09-01). - Makes default again - Bumps dependencies - Introduces support for arbitrary protocol handling by DM - Removes custom fields in signing protocol - Refactors and updates dialogue and dialogues models - Moves dialogue module to protocols module - Introduces to collect aggregate connection status - Moves Address types from mail to common - Updates to work with Agentland - Fixes circular dependencies in helpers and configurations - Unifies contract loading with loading mechanism of other packages - Adds get-multiaddress command to CLI - Updates helpers scripts - Introduces to unify internal message handling - Adds additional linters (eradicate, more options) - Improves error reporting in libp2p connection - Replaces all assert statements with proper exceptions - Adds skill id to envelope context for improved routing - Refactors IPC pipes - Refactors core dependencies - Adds support for multi-page agent configurations - Adds type field to all package configurations - Multiple docs updates including additional explanations of contracts usage - Multiple additional tests and test stability fixes"
Release History,0.5.4 (2020-08-13). - Adds support for Windows in P2P connections - Makes all tests Windows compatible - Adds integration tests for P2P public DHT - Modifies contract base class to make it cross-ledger compatible - Changes dialogue reference nonce generation - Fixes tac skills (non-contract versions) - Fixes Aries identity skills - Extends cosmos crypto API to support - Adds full test coverage for framework and connection packages - Multiple docs updates including automated link integrity checks - Multiple additional tests and test stability fixes
Release History,0.5.3 (2020-08-05). - Adds support for re-starting agent after stopping it - Adds full test coverage for protocols generator - Adds support for dynamically adding handlers - Improves P2P connection startup reliability - Addresses P2P connection race condition with long running processes - Adds connection states in connections - Applies consistent logger usage throughout - Adds key rotation and randomised locations for integration tests - Adds request delays in SOEF connection to avoid request limits - Exposes runtime states on agent and removes agent liveness object - Adds readme files in protocols and connections - Improves edge case handling in dialogue models - Adds support for message signing - Adds test coverage for test tools - Adds dialogues models in all connections where required - Transitions ERC1155 skills and simple search to SOEF and P2P - Adds full test coverage for skills modules - Multiple docs updates - Multiple additional tests and test stability fixes
Release History,"0.5.2 (2020-07-21). - Transitions demos to agent-land test network, P2P and SOEF connections - Adds full test coverage for helpers modules - Adds full test coverage for core modules - Adds CLI functionality to upload files with packages - Adds full test coverage for registries module - Multiple docs updates - Multiple additional tests and test stability fixes"
Release History,"0.5.1 (2020-07-14). - Adds support for agent name being appended to all log statements - Adds redesigned GUI - Extends dialogue API for easier dialogue maintenance - Resolves blocking logic in OEF and gym connections - Adds full test coverage on AEA modules configurations, components and mail - Adds ping background task for soef connection - Adds full test coverage for all connection packages - Multiple docs updates - Multiple additional tests and test stability fixes"
Release History,"0.5.0 (2020-07-06). - Refactors all connections to be fully asynchronous friendly - Adds almost complete test coverage on connections - Adds complete test coverage for CLI and CLI GUI - Fixes CLI GUI functionality and removes OEF node dependency - Refactors P2P go code and increases test coverage - Refactors protocol generator for higher code reusability - Adds option for skills to depend on other skills - Adds abstract skills option - Adds ledger connections to execute ledger related queries and transactions, removes ledger APIs from skill context - Adds contracts registry and removes them from skill context - Rewrites all skills to be fully message based - Replaces internal messages with protocols (signing and state update) - Multiple refactoring to improve adherence - Multiple docs updates - Multiple test stability fixes"
Release History,0.4.1 (2020-06-15). - Updates component package module loading for skill and connection - Unifies component package loading across package types - Adds connections registry to resources - Upgrades CLI commands for easier programmatic usage - Adds and for programmatic launch of multiple agents - Refactors to support reentrancy and resetting - Fixes tac packages to work with ERC1155 contract - Multiple refactoring to improve public and private access patterns - Multiple docs updates - Multiple test stability fixes
Release History,0.4.0 (2020-06-08). - Updates message handling in skills - Replaces serialiser implementation; all serialization is now performed framework side - Updates all skills for compatibility with new message handling - Updates all protocols and protocol generator - Updates package loading mechanism - Adds connection - Fixes CLI bugs and refactors CLI - Adds eject command to CLI - Exposes identity and connection cryptos to all connections - Updates connection loading mechanism - Updates all connections for compatibility with new loading mechanism - Extracts multiplexer into its own module - Implements list all CLI command - Updates wallet to split into several crypto stores - Refactors component registry and resources - Extends soef connection functionality - Implements reentrancy - Updates connection - Adds support for configurable runtime - Refactors documentation - Multiple docs updates - Multiple test stability fixes
Release History,"0.3.3 (2020-05-24). - Adds option to pass ledger APIs to - Refactors decision maker: separates interface and implementation; adds loading mechanisms so framework users can provide their own implementation - Adds asynchronous and synchronous agent loop implementations; agent can be run in both and mode - Completes transition to atomic CLI commands (fetch, generate, scaffold) - Refactors dialogue API: adds much simplified API; updates generator accordingly; updates skills - Adds support for crypto module extensions: framework users can register their own crypto module - Adds crypto module and ledger support for cosmos - Adds simple-oef (soef) connection - Adds connection for true P2P connectivity - Adds PyPI dependency consistency checks for AEA projects - Refactors CLI for improved programmatic usage of components - Adds skill exception handling policies and configuration options - Adds comprehensive documentation of configuration files - Multiple docs updates - Multiple test stability fixes"
Release History,0.3.2 (2020-05-07). - Adds dialogue generation functionality to protocol generator - Fixes add CLI commands to be atomic - Adds Windows platform support - Stability improvements to test pipeline - Improves test coverage of CLI - Implements missing doc tests - Implements end-to-end tests for all skills - Adds missing agent projects to registry - Improves class for programmatic usage - Exposes missing AEA configurations on agent configuration file - Extends Aries demo - Adds method to check stdout for test cases - Adds code of conduct and security guidelines to repo - Multiple docs updates - Multiple additional unit tests - Multiple additional minor fixes and changes
Release History,"0.3.1 (2020-04-27). - Adds connection - Adds connection - Adds webhook connection - Upgrades error handling for error skill - Fixes default timeout on main agent loop and provides setter in - Adds multithreading support for launch command - Provides support for keyword arguments to AEA constructor to be set on skill context - Renames with for consistency - Provides a new class for improved testing - Adds execution time limits for act/react calls - TAC skills refactoring and contract integration - Supports contract dependencies being added automatically - Adds HTTP example skill - Allows for skill inactivation during initialisation - Improves error messages on skill loading errors - Improves files, particularly for PyPI - Adds support for Location based queries and descriptions - Refactors skills tests to use - Adds fingerprint and scaffold CLI command for contract - Adds multiple additional docs tests - Makes task manager initialize pool lazily - Multiple docs updates - Multiple additional unit tests - Multiple additional minor fixes and changes"
Release History,"0.3.0 (2020-04-02). - Introduces IPFS based hashing of files to detect changes, ensure consistency and allow for content addressing - Introduces command to CLI - Adds support for contract type packages which wrap smart contracts and their APIs - Introduces class for much improved programmatic usage of the framework - Moves protocol generator into alpha stage for light protocols - Switches CLI to use remote registry by default - Comprehensive documentation updates on new and existing features - Additional demos to introduce the contracts functionality - Protocol, Contract, Skill and Connection inherits from the same class, Component - Improved APIs for Configuration classes - All protocols now generated with protocol generator - Multiple additional unit tests - Multiple additional minor fixes and changes"
Release History,0.2.4 (2020-03-25). - Breaking change to all protocols as we transition to auto-generated protocols - Fixes to protocol generator to move it to alpha status - Updates to documentation on protocols and OEF search and communication nodes - Improvements and fixes to AEA launch command - Multiple docs updates and restructuring - Multiple additional minor fixes and changes
Release History,0.2.3 (2020-03-19). - Fixes stub connection file I/O - Fixes OEF connection teardown - Fixes CLI GUI subprocesses issues - Adds support for URI based routing of envelopes - Improves skill guide by adding a service provider agent - Protocol generator bug fixes - Add field to package YAML files for version management - Multiple docs updates and restructuring - Multiple additional minor fixes and changes
Release History,0.2.2 (2020-03-09). - Fixes registry to only load registered packages - Migrates default protocol to generator produced version - Adds http connection and http protocol - Adds CLI command for easier setting of author - Refactoring and behind the scenes improvements to CLI - Multiple docs updates - Protocol generator improvements and fixes - Adds CLI launch command to launch multiple agents - Increases test coverage for AEA package and tests package - Make project comply with PEP 518 - Multiple additional minor fixes and changes
Release History,0.2.1 (2020-02-21). - Add minimal - Updates finite state machine behaviour to use any simple behaviour in states - Adds example of programmatic and CLI based AEAs interacting - Exposes the logger on the skill context - Adds serialization (encoding/decoding) support to protocol generator - Adds additional docs and videos - Introduces test coverage to all code in docs - Increases test coverage for AEA package - Multiple additional minor fixes and changes
Release History,"0.2.0 (2020-02-07). - Skills can now programmatically register behaviours - Tasks are no longer a core component of the skill, the functor pattern is used - Refactors the task manager - Adds nonces to transaction data so transactions can be verified - Adds documentation for the protocol generator - Fixes several compatibility issues between CLI and registry - Adds skills to connect a thermometer to an AEA - Adds generic buyer and seller skills - Adds much more documentation on AEA vs MVC frameworks, core components, new guides and more - Removes the wallet from the agent constructor and moves it to the AEA constructor - Allows behaviours to be initialized from a skill - Adds multiple improvements to the protocol generator, including custom types and serialization - Removes the default crypto object - Replaces with taxonomy for easier transition for web developers - Adds bandit to CLI for security checks - Makes private key paths in configurations a dictionary so values can be set from CLI - Introduces Identity object - Increases test coverage - Multiple additional minor fixes and changes"
Release History,0.1.17 (2020-01-27). - Add programmatic mode flag to AEA - Introduces vendorised project structure - Adds further tests for decision maker - Upgrades sign transaction function for Ethereum API proxy - Adds black and bugbear to linters - Applies public id usage throughout AEA business logic - Adds guide on how to deploy an AEA on a raspberry pi - Addresses multiple issues in the protocol generator - Fixes - Adds CLI commands to create wealth and get wealth and address - Change default author and license - Adds guide on agent vs AEAs - Updates docs and improves guides - Adds support for inactivating skills programmatically - Makes decision maker run in separate thread - Multiple additional minor fixes and changes
Release History,0.1.16 (2020-01-12). - Completes tac skills implementation - Adds default ledger field to agent configuration - Converts ledger APIs to dictionary fields in agent configuration - Introduces public ids to CLI and deprecate usage of package names only - Adds local push and public commands to CLI - Introduces ledger API abstract class - Unifies import paths for static and dynamic imports - Disambiguates import paths by introducing pattern of - Adds agent directory to packages with some samples - Adds protocol generator and exposes on CLI - Removes unused configuration fields - Updates docs to align with recent changes - Adds additional tests on CLI - Multiple additional minor fixes and changes
Release History,0.1.15 (2019-12-19). - Moves non-default packages from AEA to packages directory - Supports get & set on package configurations - Changes skill configuration resource types from lists to dictionaries - Adds additional features to decision maker - Refactors most protocols and improves their API - Removes multiple unintended side-effects of the CLI - Improves dependency referencing in configuration files - Adds push and publish functionality to CLI - Introduces simple and composite behaviours and applies them in skills - Adds URI to envelopes - Adds guide for programmatic assembly of an AEA - Adds guide on agent-oriented development - Multiple minor doc updates - Adds additional tests - Multiple additional minor fixes and changes
Release History,0.1.14 (2019-11-29). - Removes dependency on OEF SDK's FIPA API - Replaces dialogue id with dialogue references - Improves CLI logging and list/search command output - Introduces multiplexer and removes mailbox - Adds much improved tac skills - Adds support for CLI integration with registry - Increases test coverage to 99% - Introduces integration tests for skills and examples - Adds support to run multiple connections from CLI - Updates the docs and adds UML diagrams - Multiple additional minor fixes and changes
Release History,0.1.13 (2019-11-08). - Adds envelope serialiser - Adds support for programmatically initializing an AEA - Adds some tests for the GUI and other components - Exposes connection status to skills - Updates OEF connection to re-establish dropped connections - Updates the car park agent - Multiple additional minor fixes and changes
Release History,0.1.12 (2019-11-01). - Adds TCP connection (server and client) - Fixes some examples and docs - Refactors crypto modules and adds additional tests - Multiple additional minor fixes and changes
Release History,0.1.11 (2019-10-30). - Adds Python 3.8 test coverage - Adds almost complete test coverage on AEA package - Adds filter concept for message routing - Adds ledger integrations for Fetch.ai and Ethereum - Adds car park examples and ledger examples - Multiple additional minor fixes and changes
Release History,0.1.10 (2019-10-19). - Compatibility fixes for Ubuntu and Windows platforms - Multiple additional minor fixes and changes
Release History,"0.1.9 (2019-10-18). - Stability improvements - Higher test coverage, including on Python 3.6 - Multiple additional minor fixes and changes"
Release History,0.1.8 (2019-10-18). - Multiple bug fixes and improvements to GUI of CLI - Adds full test coverage on CLI - Improves docs - Multiple additional minor fixes and changes
Release History,0.1.7 (2019-10-14). - Adds GUI to interact with CLI - Adds new connection stub to read from/write to file - Adds ledger entities (fetchai and Ethereum); creates wallet for ledger entities - Adds more documentation and fixes old one - Multiple additional minor fixes and changes
Release History,0.1.6 (2019-10-04). - Adds several new skills - Extended docs on framework and skills - Introduces core framework components like decision maker and shared classes - Multiple additional minor fixes and changes
Release History,0.1.5 (2019-09-26). - Adds scaffolding command to the CLI tool - Extended docs - Increased test coverage - Multiple additional minor fixes and changes
Release History,0.1.4 (2019-09-20). - Adds CLI functionality to add connections - Multiple additional minor fixes and changes
Release History,0.1.3 (2019-09-19). - Adds Jenkins for CI - Adds docker develop image - Parses dependencies of connections/protocols/skills on the fly - Adds validations of configuration files - Adds first two working skills and fixes gym examples - Adds docs - Multiple additional minor fixes and changes
Release History,"0.1.2 (2019-09-16). - Adds AEA CLI tool. - Adds AEA skills framework. - Introduces static typing checks across AEA, using . - Extends gym example"
Release History,0.1.1 (2019-09-04). - Provides examples and fixes.
Release History,0.1.0 (2019-08-21). - Initial release of the package.
Contribution Guidelines,"Contribution Guidelines. # Contribution Guidelines Contributions to the framework, plugins, packages and related tools are welcome. As a contributor, here are the guidelines we would like you to follow: - Code of Conduct at #coc - Question or Problem? at #question - Issues and Bugs at #issue - Feature Requests at #feature - Submission Guidelines at #submit - Coding Rules at #rules - Commit Message Guidelines at #commit"
Contribution Guidelines,"<a name=""coc""></a> Code of Conduct. Please read and follow our [Code of Conduct][coc]."
Contribution Guidelines,"<a name=""question""></a> Question or Problem?. Please use [GitHub Discussions][ghdiscussion] for support related questions and general discussions. Do NOT open issues as they are for bug reports and feature requests. This is because: - Questions and answers stay available for public viewing so your question/answer might help someone else. - GitHub Discussions voting system ensures the best answers are prominently visible."
Contribution Guidelines,"<a name=""issue""></a> Found a Bug?. If you find a bug in the source code submit a bug report issue at #submit-issue. Even better, you can submit a Pull Request at #submit-pr with a fix."
Contribution Guidelines,"<a name=""feature""></a> Missing a Feature?. You can *request* a new feature by submitting a feature request issue at #submit-issue. If you would like to *implement* a new feature: - For a **Major Feature**, first open an issue at #submit-issue and outline your proposal so that it can be discussed. - **Small Features** can be crafted and directly submitted as a Pull Request at #submit-pr."
Contribution Guidelines,"<a name=""submit""></a> Submission Guidelines. ,<a name=""submit-issue""></a> Submitting an Issue: Before you submit an issue, please search the [issue tracker][issues]. An issue for your problem might already exist and the discussion might inform you of workarounds readily available. For bug reports, it is important that we can reproduce and confirm it. For this, we need you to provide a minimal reproduction instruction (this is part of the bug report issue template). You can file new issues by selecting from our [new issue templates][new-issue] and filling out the issue template. ,<a name=""submit-pr""></a> Submitting a Pull Request (PR): Before you submit your Pull Request (PR) consider the following guidelines: 1. All Pull Requests should be based off of and opened against the branch. Do **not** open a Pull Request against ! 2. Search [Existing PRs][prs] for an open or closed PR that relates to your submission. You don't want to duplicate existing efforts. 3. Be sure that an issue exists describing the problem you're fixing, or the design for the feature you'd like to add. 4. Fork at https://docs.github.com/en/github/getting-started-with-github/fork-a-repo the [repository][github]. 5. In your forked repository, make your changes in a new git branch created from the branch. 6. Make your changes, **including test cases** and updating documentation where appropriate. 7. Follow our coding rules at #rules. 8. Run all tests and checks locally, as described in the [development guide][developing], and ensure they pass. This saves CI hours and ensures you only commit clean code. 9. Commit your changes using a descriptive commit message that follows our commit message conventions at #commit. 10. Push your branch to GitHub. 11. In GitHub, send a pull request to . > Where possible, try to take advantage of the modularity of the framework and add new functionality via a new module. Currently, ledger plugins are supported and packages (skills, connections, protocols, contracts) allow for extensibility. #### Reviewing a Pull Request The AEA team reserves the right not to accept pull requests from community members who haven't been good citizens of the community. Such behavior includes not following our [code of conduct][coc] and applies within or outside the managed channels. When you contribute a new feature, the maintenance burden is transferred to the core team. This means that the benefit of the contribution must be compared against the cost of maintaining the feature. #### Addressing review feedback If we ask for changes via code reviews then: 1. Make the required updates to the code. 2. Re-run the tests and checks to ensure they are still passing. 3. Create a new commit and push to your GitHub repository (this will update your Pull Request). #### After your pull request is merged After your pull request is merged, you can safely delete your branch and pull the changes from the (upstream) repository."
Contribution Guidelines,"<a name=""rules""></a> Coding Rules. To ensure consistency throughout the source code, keep these rules in mind as you are working: - All code must pass our code quality checks (linters, formatters, etc). See the [development guide][developing] section for more detail. - All features or bug fixes **must be tested** via unit-tests and if applicable integration-tests. These help to, a. prove that your code works correctly, and b. guard against future breaking changes and lower the maintenance cost. - All public features **must be documented**. - All files must include a license header."
Contribution Guidelines,"<a name=""commit""></a> Commit Message Convention. Please follow the [Conventional Commits v1.0.0][convcommit]. The commit types must be one of the following: - **build**: Changes that affect the build system or external dependencies - **ci**: Changes to our CI configuration files and scripts - **docs**: Documentation only changes - **feat**: A new feature - **fix**: A bug fix - **nfunc**: Code that improves some non-functional characteristic, such as performance, security, ... - **refactor**: A code change that neither fixes a bug nor adds a feature - **test**: Adding missing tests or correcting existing tests [coc]: https://github.com/fetchai/agents-aea/blob/main/CODE_OF_CONDUCT.md [developing]: https://github.com/fetchai/agents-aea/blob/main/DEVELOPING.md [ghdiscussion]: https://github.com/fetchai/agents-aea/discussions [issues]: https://github.com/fetchai/agents-aea/issues [new-issue]: https://github.com/fetchai/agents-aea/issues/new/choose [prs]: https://github.com/fetchai/agents-aea/pulls [convcommit]: https://www.conventionalcommits.org/en/v1.0.0/ [github]: https://github.com/fetchai/agents-aea"
Security Policy,Security Policy. # Security Policy This document outlines security procedures and general policies for the project.
Security Policy,Supported Versions. The following table shows which versions of are currently being supported with security updates. | Version | Supported | |-----------|--------------------| | | :white_check_mark: | | | :x: |
Security Policy,"Reporting a Vulnerability. The team and community take all security bugs in seriously. Thank you for improving the security of . We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. Report security bugs by emailing . The lead maintainer will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the security team will endeavour to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. Report security bugs in third-party modules to the person or team maintaining the module."
Security Policy,"Disclosure Policy. When the security team receives a security bug report, they will assign it to a primary handler. This person will coordinate the fix and release process, involving the following steps: - Confirm the problem and determine the affected versions. - Audit code to find any potential similar problems. - Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible to PyPI."
Security Policy,Comments on this Policy. If you have suggestions on how this process could be improved please submit a pull request.
Prometheus Monitoring,"Prometheus Monitoring. # Prometheus Monitoring AEAs can create and update prometheus metrics for remote monitoring by sending messages to the prometheus connection . To see this working in an agent, fetch and run the agent and check to see the latest values of the metrics and : You can then instruct a prometheus server running on the same computing cluster as a deployed agent to scrape these metrics for remote monitoring and visualisation with the Prometheus/Grafana toolset. To use this connection, add a model to your skill to handle the metrics configuration and messages to the prometheus connection. ??? note ""Click here for example:"" Then configure your metrics in the file. For example (from the skill): Add a metric of type {, , ...} and description by sending a message with performative to the prometheus connection: where should be imported to your skill as follows: Update metric with update function {, , , ...} and value by sending a message with performative to the prometheus connection: Initialize the metrics from the configuration file in the behaviour setup: Then call the function from the appropriate places. For example, the following code in for the skill updates the number of http requests served: Finally, you can add a to your skill to process response messages from the prometheus connection. ??? note ""Click here for example:"""
Ways to Build an AEA,"Ways to Build an AEA. # Ways to Build an AEA There are a number of ways to build an AEA: - To start with, we recommended you build an AEA project step-by-step with the CLI tool as demonstrated in the <a href=""../quickstart/"" target=""_blank"">quick start</a> guide and described <a href=""../build-aea-step-by-step/"" target=""_blank"">here</a>. - Using the CLI command, pull in an already built project and run as is or extend it to your needs. - The last option is to build an AEA programmatically as described <a href=""../build-aea-programmatically/"" target=""_blank"">here</a>. Sometimes, an AEA is more than is required for the task at hand. In particular, an AEA is much more than just an agent. In those cases, we suggest you have a look at the following two guides: - the <a href=""../agent-vs-aea/"" target=""_blank"">AEA vs Agents</a> guide shows the difference between an agent and an AEA in code, - the <a href=""../multiplexer-standalone/"" target=""_blank"">Use multiplexer standalone</a> guide shows how to use the multiplexer on its own to receive and send envelopes."
HTTP Connection,HTTP Connection. # HTTP Connection
HTTP Connection,"Description. The HTTP client and HTTP server connections enable an AEA to communicate with external servers, respectively clients, via HTTP. The HTTP client connection receives request envelops from an agent's skill, translates each into an HTTP request and sends it to a server external to the agent. If it receives an HTTP response from the server within a timeout window, it translates it into a response envelope, and sends this back to the relevant skill inside the agent. The HTTP server connection allows you to run a server inside the connection itself which accepts requests from clients external to the agent. The HTTP server connection validates requests it receives against a provided OpenAPI file. It translates each valid request into an envelope and sends it to the skill specified in the configuration. If it receives a valid response envelope from the skill within a timeout window, the connection translates the response envelope into an HTTP response and serves it to the client."
HTTP Connection,"HTTP Client. connection. The in periodically sends HTTP envelops to the HTTP client connection. Its method, periodically called, simply calls which contains the logic for enqueueing an HTTP request envelop. The in is a basic handler for dealing with HTTP response envelops received from the HTTP client connection. In the method, the responses are dealt with by the private method which essentially logs the response and adds the body of the response into the skill's shared state."
HTTP Connection,"HTTP Server. Create a new AEA: Add the http server connection package: Update the default connection: Modify the : Ensure the file exists under the specified path! Create and add a private key: Install the dependencies: Write and add your skill: You can implement a simple http echo skill (modelled after the standard echo skill) which prints out the content of received messages and responds with success. First, delete the and files (in ). The server will be purely reactive, so you only need the file, and the to record the state of the dialogues. Update accordingly, so set and . Next implement a basic handler which prints the received envelopes and responds. Then, replace the content of with the following code snippet, after having replaced the placeholder with the author username (i.e. the output of ): Moreover, add a file with the following code: Then, update the accordingly: Run the fingerprinter (note, you will have to replace the author name with your author handle): Moreover, we need to tell to the connection to what skill the HTTP requests should be forwarded. In our case, this is the that you have just scaffolded. Its public id will be . You can now run the AEA: In a separate terminal, you can create a client and communicate with the server:"
TAC Skills Ledger-Based,TAC Skills Ledger-Based. # TAC Skills Ledger-Based The AEA TAC - trading agent competition - skills demonstrate an interaction between multiple AEAs in a game. There are two types of AEAs: - The which coordinates the game. - The AEAs which compete in the game. The AEAs trade tokens with each other to maximize their utility.
TAC Skills Ledger-Based,"Discussion. This demo shows how agents negotiate autonomously with each other while they pursue their goals by participating in the Trading Agents Competition (TAC). The demo can be run against Fetchai or Ethereum ledger. Transactions are validated on an ERC1155 smart contract on the Fetchai Dorado or a local Ganache Ethereum testnet. In the following video we discuss the framework and TAC in more detail: <iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/gvzYX7CYk-A"" frameborder=""0"" allow=""accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>"
TAC Skills Ledger-Based,"Communication. This diagram shows the communication between two AEAs and a controller. In this case, we have a which is set up as a seller (and registers itself as such with the controller during the registration phase). We also have the which is set up to search for sellers. In the above case, the proposal received contains a set of goods to sell and an associated price. The buyer AEA needs to determine if this is a good deal for them, and if so, it accepts. There is an equivalent diagram for seller AEAs set up to search for buyers and their interaction with AEAs which are registered as buyers. In that scenario, the proposal will instead be a list of goods that the buyer wishes to buy and the price it is willing to pay for them."
TAC Skills Ledger-Based,"Preparation Instructions. ,Dependencies: Follow the <a href=""../quickstart/#preliminaries"">Preliminaries</a> and <a href=""../quickstart/#installation"">Installation</a> sections from the AEA quick start."
TAC Skills Ledger-Based,"Demo Instructions (Fetchai). ,Fetch TAC Controller AEA: In the root directory, fetch the controller AEA: ??? note ""Alternatively, create from scratch:"" The following steps create the controller from scratch: ,Fetch the TAC Participant AEAs: In separate terminals, in the root directory, fetch at least two participants: ??? note ""Alternatively, create from scratch:"" In a separate terminal, in the root directory, create at least two tac participant AEAs: Build participant one: Then, build participant two: ,Add Keys for All AEAs: For every AEA in the competition (controller and participants): First generate and add a private key: Then create and add a separate private key for secure communication: Finally, certify the key for use by the connections that request that: ,Update the Game Parameters in the Controller: In the tac controller project, get and set the registration start time (set it to at least 5 minutes in the future): To set the registration time, you may find handy the following command: ,Update the Connection Parameters: Update the connection parameters of the TAC participants to allow them to connect to the same local agent communication network as the TAC controller. First, retrieve controller's local ACN address by running the following in the controller agent's project terminal: Then, in participant one, run this command (replace with the value you retrieved above): Do the same in participant two (beware of the different port numbers):"
TAC Skills Ledger-Based,"Fund Agents' Accounts. ,Run the AEAs: First, launch the then the participants by executing the following from their respective terminals: The CLI tool supports launching several agents at once. For example, assuming you followed the tutorial, you can launch both TAC participant agents as follows from the root directory (ensure you run the controller agent first as above): You may want to try option in order to run the agents in the same process. ,Cleaning up: When you're finished, delete your AEAs:"
TAC Skills Ledger-Based,Demo Instructions (Ethereum). 
Q&A,"Q&A. # Q&A ??? question ""What is an AEA?"" AEA stands for ""Autonomous Economic Agent"". An AEA can represent an individual, organisation or object and looks after its owner's interests. AEAs act independently of constant user input and autonomously execute actions to achieve their prescribed goals. Their purpose is to create economic value for their owners. ??? question ""How do AEAs talk to each other when they do not know each other?"" For an Autonomous Economic Agent (AEA) to talk to other AEAs, it first needs to find them. Once it does, it should ensure that they both use the same protocol for communication, and if so, they then have to send messages to each other. The AEA framework, together with some of the services it provides, address all three problems. You can read more about search and discovery <a href=""../ecosystem/"">here</a>, protocols <a href=""../core-components-1/"">here</a>, and the Agent Communication Network (ACN) <a href=""../acn/"">here</a>. ??? question ""How does an AEA use blockchain?"" The AEA framework enables agents to interact with blockchains to settle transactions. Currently, the framework has native support for three different networks: _Fetch.ai_, _Ethereum_ and _Cosmos_. You can read more about the framework's integration with the different blockchains <a href=""../ledger-integration/"">here</a> and gain a high level overview <a href=""../ecosystem/"">here</a>. ??? question ""How does one install third party libraries?"" The framework supports the use of third-party libraries hosted on <a href=""https://pypi.org"" target=""_blank"">PyPI</a>. You can directly reference the external dependencies of an AEA package (e.g. skill) in its configuration file. From inside an AEA's project directory, the command can be used to install all the dependencies of the AEA which are listed in the configuration files belonging to any of its packages. ??? question ""How does one connect to a database?"" You have two options to connect to a database: using the built-in storage solution or using a custom ORM (object-relational mapping) library and backend. The use of the built-in storage is explained <a href=""../generic-storage/"">here</a>. For a detailed example of how to use an ORM, follow the <a href=""../orm-integration/"">ORM guide</a>. ??? question ""How does one connect a frontend?"" There are multiple options. The most obvious is using an HTTP server connection and creating a client that communicates with this connection. You can find a more detailed discussion <a href=""../connect-a-frontend/"">here</a>. ??? question ""Is the AEA framework ideal for agent-based modelling?"" The goal of agent-based modelling (ABM) is to study the unknown (often complex) behaviour of systems comprised of agents with known (much simpler) behaviour. ABM is a popular technique for studying biological and social systems. Despite some similarities between ABM and the AEA framework, the two have fundamentally different goals. ABM's goal is not the design of agents or solving specific practical or engineering problems. Although it would be potentially possible, it would likely be inefficient to use the AEA framework for that kind of problems. You can find more details on the application areas of the AEA framework <a href=""../application/"">here</a>. ??? question ""When a new AEA is created, is the folder populated with some default packages?"" All AEA projects by default hold the , and protocols. These (as all other packages installed from the registry) are placed in the folder. You can find more details about the file structure <a href=""../package-imports/"">here</a>. ??? question ""Is there a standardization for private key files?"" Currently, the private keys are stored in files. This is temporary and will be improved soon. ??? question ""How to use the same protocol in different skills?"" The details of envelope/message routing by the AEA framework are discussed in <a href=""../message-routing/"">this guide</a>. ??? question ""Why does the AEA framework use its own package registry?"" AEA packages could be described as personalized plugins for the AEA runtime. They are not like a library - they have no direct use outside the context of the framework - and therefore are not suitable for distribution via <a href=""https://pypi.org/"" target=""_blank"">PyPI</a>."
