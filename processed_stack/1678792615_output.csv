title,text
aea.protocols.dialogue.base,"aea.protocols.dialogue.base. <a id=""aea.protocols.dialogue.base""></a> # aea.protocols.dialogue.base This module contains the classes required for dialogue management. - DialogueLabel: The dialogue label class acts as an identifier for dialogues. - Dialogue: The dialogue class maintains state of a dialogue and manages it. - Dialogues: The dialogues class keeps track of all dialogues. <a id=""aea.protocols.dialogue.base.InvalidDialogueMessage""></a>"
aea.protocols.dialogue.base,"InvalidDialogueMessage Objects. Exception for adding invalid message to a dialogue. <a id=""aea.protocols.dialogue.base.DialogueLabel""></a>"
aea.protocols.dialogue.base,"DialogueLabel Objects. The dialogue label class acts as an identifier for dialogues. <a id=""aea.protocols.dialogue.base.DialogueLabel.__init__""></a> #### init Initialize a dialogue label. **Arguments**: - : the reference of the dialogue. - : the addr of the agent with which the dialogue is kept. - : the addr of the agent which started the dialogue. <a id=""aea.protocols.dialogue.base.DialogueLabel.dialogue_reference""></a> #### dialoguereference Get the dialogue reference. <a id=""aea.protocols.dialogue.base.DialogueLabel.dialogue_starter_reference""></a> #### dialoguestarterreference Get the dialogue starter reference. <a id=""aea.protocols.dialogue.base.DialogueLabel.dialogue_responder_reference""></a> #### dialogueresponderreference Get the dialogue responder reference. <a id=""aea.protocols.dialogue.base.DialogueLabel.dialogue_opponent_addr""></a> #### dialogueopponentaddr Get the address of the dialogue opponent. <a id=""aea.protocols.dialogue.base.DialogueLabel.dialogue_starter_addr""></a> #### dialoguestarteraddr Get the address of the dialogue starter. <a id=""aea.protocols.dialogue.base.DialogueLabel.__eq__""></a> #### eq Check for equality between two DialogueLabel objects. <a id=""aea.protocols.dialogue.base.DialogueLabel.__hash__""></a> #### hash Turn object into hash. <a id=""aea.protocols.dialogue.base.DialogueLabel.json""></a> #### json Return the JSON representation. <a id=""aea.protocols.dialogue.base.DialogueLabel.from_json""></a> #### fromjson Get dialogue label from json. <a id=""aea.protocols.dialogue.base.DialogueLabel.get_incomplete_version""></a> #### getincompleteversion Get the incomplete version of the label. <a id=""aea.protocols.dialogue.base.DialogueLabel.__str__""></a> #### str Get the string representation. <a id=""aea.protocols.dialogue.base.DialogueLabel.from_str""></a> #### fromstr Get the dialogue label from string representation. <a id=""aea.protocols.dialogue.base._DialogueMeta""></a>"
aea.protocols.dialogue.base,"DialogueMeta Objects. Metaclass for Dialogue. Creates class level Rules instance to share among instances <a id=""aea.protocols.dialogue.base._DialogueMeta.__new__""></a> #### new Construct a new type. <a id=""aea.protocols.dialogue.base.Dialogue""></a>"
aea.protocols.dialogue.base,"Dialogue Objects. The dialogue class maintains state of a dialogue and manages it. <a id=""aea.protocols.dialogue.base.Dialogue.Rules""></a>"
aea.protocols.dialogue.base,"Rules Objects. This class defines the rules for the dialogue. <a id=""aea.protocols.dialogue.base.Dialogue.Rules.__init__""></a> #### init Initialize a dialogue. **Arguments**: - : the set of all initial performatives. - : the set of all terminal performatives. - : the reply structure of speech-acts. <a id=""aea.protocols.dialogue.base.Dialogue.Rules.initial_performatives""></a> #### initialperformatives Get the performatives one of which the terminal message in the dialogue must have. **Returns**: the valid performatives of an terminal message <a id=""aea.protocols.dialogue.base.Dialogue.Rules.terminal_performatives""></a> #### terminalperformatives Get the performatives one of which the terminal message in the dialogue must have. **Returns**: the valid performatives of an terminal message <a id=""aea.protocols.dialogue.base.Dialogue.Rules.valid_replies""></a> #### validreplies Get all the valid performatives which are a valid replies to performatives. **Returns**: the full valid reply structure. <a id=""aea.protocols.dialogue.base.Dialogue.Rules.get_valid_replies""></a> #### getvalidreplies Given a , return the list of performatives which are its valid replies in a dialogue. **Arguments**: - : the performative in a message **Returns**: list of valid performative replies <a id=""aea.protocols.dialogue.base.Dialogue.Role""></a>"
aea.protocols.dialogue.base,"Role Objects. This class defines the agent's role in a dialogue. <a id=""aea.protocols.dialogue.base.Dialogue.Role.__str__""></a> #### str Get the string representation. <a id=""aea.protocols.dialogue.base.Dialogue.EndState""></a>"
aea.protocols.dialogue.base,"EndState Objects. This class defines the end states of a dialogue. <a id=""aea.protocols.dialogue.base.Dialogue.EndState.__str__""></a> #### str Get the string representation. <a id=""aea.protocols.dialogue.base.Dialogue.__init__""></a> #### init Initialize a dialogue. **Arguments**: - : the identifier of the dialogue - : the message class used - : the address of the entity for whom this dialogue is maintained - : the role of the agent this dialogue is maintained for <a id=""aea.protocols.dialogue.base.Dialogue.add_terminal_state_callback""></a> #### addterminalstatecallback Add callback to be called on dialogue reach terminal state. **Arguments**: - : callable to be called with one argument: Dialogue <a id=""aea.protocols.dialogue.base.Dialogue.__eq__""></a> #### eq Compare two dialogues. <a id=""aea.protocols.dialogue.base.Dialogue.json""></a> #### json Get json representation of the dialogue. <a id=""aea.protocols.dialogue.base.Dialogue.from_json""></a> #### fromjson Create a dialogue instance with all messages from json data. **Arguments**: - : type of message used with this dialogue - : dict with data exported with Dialogue.to_json() method **Returns**: Dialogue instance <a id=""aea.protocols.dialogue.base.Dialogue.dialogue_label""></a> #### dialoguelabel Get the dialogue label. **Returns**: The dialogue label <a id=""aea.protocols.dialogue.base.Dialogue.incomplete_dialogue_label""></a> #### incompletedialoguelabel Get the dialogue label. **Returns**: The incomplete dialogue label <a id=""aea.protocols.dialogue.base.Dialogue.dialogue_labels""></a> #### dialoguelabels Get the dialogue labels (incomplete and complete, if it exists). **Returns**: the dialogue labels <a id=""aea.protocols.dialogue.base.Dialogue.self_address""></a> #### selfaddress Get the address of the entity for whom this dialogues is maintained. **Returns**: the address of this entity <a id=""aea.protocols.dialogue.base.Dialogue.role""></a> #### role Get the agent's role in the dialogue. **Returns**: the agent's role <a id=""aea.protocols.dialogue.base.Dialogue.rules""></a> #### rules Get the dialogue rules. **Returns**: the rules <a id=""aea.protocols.dialogue.base.Dialogue.message_class""></a> #### messageclass Get the message class. **Returns**: the message class <a id=""aea.protocols.dialogue.base.Dialogue.is_self_initiated""></a> #### isselfinitiated Check whether the agent initiated the dialogue. **Returns**: True if the agent initiated the dialogue, False otherwise <a id=""aea.protocols.dialogue.base.Dialogue.last_incoming_message""></a> #### lastincomingmessage Get the last incoming message. **Returns**: the last incoming message if it exists, None otherwise <a id=""aea.protocols.dialogue.base.Dialogue.last_outgoing_message""></a> #### lastoutgoingmessage Get the last outgoing message. **Returns**: the last outgoing message if it exists, None otherwise <a id=""aea.protocols.dialogue.base.Dialogue.last_message""></a> #### lastmessage Get the last message. **Returns**: the last message if it exists, None otherwise <a id=""aea.protocols.dialogue.base.Dialogue.is_empty""></a> #### isempty Check whether the dialogue is empty. **Returns**: True if empty, False otherwise <a id=""aea.protocols.dialogue.base.Dialogue.reply""></a> #### reply Reply to the 'target_message' in this dialogue with a message with 'performative', and contents from kwargs. Note if no target_message is provided, the last message in the dialogue will be replied to. **Arguments**: - : the message to reply to. - : the id of the message to reply to. - : the performative of the reply message. - : the content of the reply message. **Returns**: the reply message if it was successfully added as a reply, None otherwise. <a id=""aea.protocols.dialogue.base.Dialogue.get_message_by_id""></a> #### getmessagebyid Get message by id, if not presents return None. <a id=""aea.protocols.dialogue.base.Dialogue.get_outgoing_next_message_id""></a> #### getoutgoingnextmessageid Get next outgoing message id. <a id=""aea.protocols.dialogue.base.Dialogue.get_incoming_next_message_id""></a> #### getincomingnextmessageid Get next incoming message id. <a id=""aea.protocols.dialogue.base.Dialogue.__str__""></a> #### str Get the string representation. **Returns**: The string representation of the dialogue <a id=""aea.protocols.dialogue.base.DialogueStats""></a>"
aea.protocols.dialogue.base,"DialogueStats Objects. Class to handle statistics on default dialogues. <a id=""aea.protocols.dialogue.base.DialogueStats.__init__""></a> #### init Initialize a StatsManager. **Arguments**: - : the list of dialogue endstates <a id=""aea.protocols.dialogue.base.DialogueStats.self_initiated""></a> #### selfinitiated Get the stats dictionary on self initiated dialogues. <a id=""aea.protocols.dialogue.base.DialogueStats.other_initiated""></a> #### otherinitiated Get the stats dictionary on other initiated dialogues. <a id=""aea.protocols.dialogue.base.DialogueStats.add_dialogue_endstate""></a> #### adddialogueendstate Add dialogue endstate stats. **Arguments**: - : the end state of the dialogue - : whether the dialogue is initiated by the agent or the opponent <a id=""aea.protocols.dialogue.base.find_caller_object""></a> #### findcallerobject Find caller object of certain type in the call stack. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage""></a>"
aea.protocols.dialogue.base,"BasicDialoguesStorage Objects. Dialogues state storage. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.__init__""></a> #### init Init dialogues storage. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.dialogues_in_terminal_state""></a> #### dialoguesinterminalstate Get all dialogues in terminal state. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.dialogues_in_active_state""></a> #### dialoguesinactivestate Get all dialogues in active state. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.is_terminal_dialogues_kept""></a> #### isterminaldialogueskept Return True if dialogues should stay after terminal state. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.dialogue_terminal_state_callback""></a> #### dialogueterminalstatecallback Method to be called on dialogue terminal state reached. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.setup""></a> #### setup Set up dialogue storage. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.teardown""></a> #### teardown Tear down dialogue storage. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.add""></a> #### add Add dialogue to storage. **Arguments**: - : dialogue to add. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.remove""></a> #### remove Remove dialogue from storage by it's label. **Arguments**: - : label of the dialogue to remove <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.get""></a> #### get Get dialogue stored by it's label. **Arguments**: - : label of the dialogue **Returns**: dialogue if presents or None <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.get_dialogues_with_counterparty""></a> #### getdialogueswithcounterparty Get the dialogues by address. **Arguments**: - : the counterparty **Returns**: The dialogues with the counterparty. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.is_in_incomplete""></a> #### isinincomplete Check dialogue label presents in list of incomplete. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.set_incomplete_dialogue""></a> #### setincompletedialogue Set incomplete dialogue label. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.is_dialogue_present""></a> #### isdialoguepresent Check dialogue with label specified presents in storage. <a id=""aea.protocols.dialogue.base.BasicDialoguesStorage.get_latest_label""></a> #### getlatestlabel Get latest label for dialogue. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorage""></a>"
aea.protocols.dialogue.base,"PersistDialoguesStorage Objects. Persist dialogues storage. Uses generic storage to load/save dialogues data on setup/teardown. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorage.__init__""></a> #### init Init dialogues storage. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorage.get_skill_component""></a> #### getskillcomponent Get skill component dialogues storage constructed for. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorage.setup""></a> #### setup Set up dialogue storage. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorage.teardown""></a> #### teardown Tear down dialogue storage. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorage.remove""></a> #### remove Remove dialogue from memory and persistent storage. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorageWithOffloading""></a>"
aea.protocols.dialogue.base,"PersistDialoguesStorageWithOffloading Objects. Dialogue Storage with dialogues offloading. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorageWithOffloading.dialogue_terminal_state_callback""></a> #### dialogueterminalstatecallback Call on dialogue reaches terminal state. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorageWithOffloading.get""></a> #### get Try to get dialogue by label from memory or persists storage. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorageWithOffloading.get_dialogues_with_counterparty""></a> #### getdialogueswithcounterparty Get the dialogues by address. **Arguments**: - : the counterparty **Returns**: The dialogues with the counterparty. <a id=""aea.protocols.dialogue.base.PersistDialoguesStorageWithOffloading.dialogues_in_terminal_state""></a> #### dialoguesinterminalstate Get all dialogues in terminal state. <a id=""aea.protocols.dialogue.base.Dialogues""></a>"
aea.protocols.dialogue.base,"Dialogues Objects. The dialogues class keeps track of all dialogues for an agent. <a id=""aea.protocols.dialogue.base.Dialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the list of dialogue endstates - : the message class used - : the dialogue class used - : the callable determining role from first message - : specify do dialogues in terminal state should stay or not <a id=""aea.protocols.dialogue.base.Dialogues.is_keep_dialogues_in_terminal_state""></a> #### iskeepdialoguesinterminalstate Is required to keep dialogues in terminal state. <a id=""aea.protocols.dialogue.base.Dialogues.self_address""></a> #### selfaddress Get the address of the agent for whom dialogues are maintained. <a id=""aea.protocols.dialogue.base.Dialogues.dialogue_stats""></a> #### dialoguestats Get the dialogue statistics. **Returns**: dialogue stats object <a id=""aea.protocols.dialogue.base.Dialogues.message_class""></a> #### messageclass Get the message class. **Returns**: the message class <a id=""aea.protocols.dialogue.base.Dialogues.dialogue_class""></a> #### dialogueclass Get the dialogue class. **Returns**: the dialogue class <a id=""aea.protocols.dialogue.base.Dialogues.get_dialogues_with_counterparty""></a> #### getdialogueswithcounterparty Get the dialogues by address. **Arguments**: - : the counterparty **Returns**: The dialogues with the counterparty. <a id=""aea.protocols.dialogue.base.Dialogues.new_self_initiated_dialogue_reference""></a> #### newselfinitiateddialoguereference Return a dialogue label for a new self initiated dialogue. **Returns**: the next nonce <a id=""aea.protocols.dialogue.base.Dialogues.create""></a> #### create Create a dialogue with 'counterparty', with an initial message whose performative is 'performative' and contents are from 'kwargs'. **Arguments**: - : the counterparty of the dialogue. - : the performative of the initial message. - : the content of the initial message. **Returns**: the initial message and the dialogue. <a id=""aea.protocols.dialogue.base.Dialogues.create_with_message""></a> #### createwithmessage Create a dialogue with 'counterparty', with an initial message provided. **Arguments**: - : the counterparty of the dialogue. - : the initial_message. **Returns**: the initial message and the dialogue. <a id=""aea.protocols.dialogue.base.Dialogues.update""></a> #### update Update the state of dialogues with a new incoming message. If the message is for a new dialogue, a new dialogue is created with 'message' as its first message, and returned. If the message is addressed to an existing dialogue, the dialogue is retrieved, extended with this message and returned. If there are any errors, e.g. the message dialogue reference does not exists or the message is invalid w.r.t. the dialogue, return None. **Arguments**: - : a new incoming message **Returns**: the new or existing dialogue the message is intended for, or None in case of any errors. <a id=""aea.protocols.dialogue.base.Dialogues.get_dialogue""></a> #### getdialogue Retrieve the dialogue 'message' belongs to. **Arguments**: - : a message **Returns**: the dialogue, or None in case such a dialogue does not exist <a id=""aea.protocols.dialogue.base.Dialogues.get_dialogue_from_label""></a> #### getdialoguefromlabel Retrieve a dialogue based on its label. **Arguments**: - : the dialogue label **Returns**: the dialogue if present <a id=""aea.protocols.dialogue.base.Dialogues.setup""></a> #### setup Set up. <a id=""aea.protocols.dialogue.base.Dialogues.teardown""></a> #### teardown Tear down."
packages.fetchai.protocols.default.customtypes,"packages.fetchai.protocols.default.customtypes. <a id=""packages.fetchai.protocols.default.custom_types""></a> # packages.fetchai.protocols.default.customtypes This module contains class representations corresponding to every custom type in the protocol specification. <a id=""packages.fetchai.protocols.default.custom_types.ErrorCode""></a>"
packages.fetchai.protocols.default.customtypes,"ErrorCode Objects. This class represents an instance of ErrorCode. <a id=""packages.fetchai.protocols.default.custom_types.ErrorCode.encode""></a> #### encode Encode an instance of this class into the protocol buffer object. The protocol buffer object in the error_code_protobuf_object argument is matched with the instance of this class in the 'error_code_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. - : an instance of this class to be encoded in the protocol buffer object. <a id=""packages.fetchai.protocols.default.custom_types.ErrorCode.decode""></a> #### decode Decode a protocol buffer object that corresponds with this class into an instance of this class. A new instance of this class is created that matches the protocol buffer object in the 'error_code_protobuf_object' argument. **Arguments**: - : the protocol buffer object whose type corresponds with this class. **Returns**: A new instance of this class that matches the protocol buffer object in the 'error_code_protobuf_object' argument."
packages.fetchai.protocols.default.dialogues,"packages.fetchai.protocols.default.dialogues. <a id=""packages.fetchai.protocols.default.dialogues""></a> # packages.fetchai.protocols.default.dialogues This module contains the classes required for default dialogue management. - DefaultDialogue: The dialogue class maintains state of a dialogue and manages it. - DefaultDialogues: The dialogues class keeps track of all dialogues. <a id=""packages.fetchai.protocols.default.dialogues.DefaultDialogue""></a>"
packages.fetchai.protocols.default.dialogues,"DefaultDialogue Objects. The default dialogue class maintains state of a dialogue and manages it. <a id=""packages.fetchai.protocols.default.dialogues.DefaultDialogue.Role""></a>"
packages.fetchai.protocols.default.dialogues,"Role Objects. This class defines the agent's role in a default dialogue. <a id=""packages.fetchai.protocols.default.dialogues.DefaultDialogue.EndState""></a>"
packages.fetchai.protocols.default.dialogues,"EndState Objects. This class defines the end states of a default dialogue. <a id=""packages.fetchai.protocols.default.dialogues.DefaultDialogue.__init__""></a> #### init Initialize a dialogue. **Arguments**: - : the identifier of the dialogue - : the address of the entity for whom this dialogue is maintained - : the role of the agent this dialogue is maintained for - : the message class used <a id=""packages.fetchai.protocols.default.dialogues.DefaultDialogues""></a>"
packages.fetchai.protocols.default.dialogues,"DefaultDialogues Objects. This class keeps track of all default dialogues. <a id=""packages.fetchai.protocols.default.dialogues.DefaultDialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the dialogue class used - : the callable determining role from first message"
packages.fetchai.protocols.default.serialization,"packages.fetchai.protocols.default.serialization. <a id=""packages.fetchai.protocols.default.serialization""></a> # packages.fetchai.protocols.default.serialization Serialization module for default protocol. <a id=""packages.fetchai.protocols.default.serialization.DefaultSerializer""></a>"
packages.fetchai.protocols.default.serialization,"DefaultSerializer Objects. Serialization for the 'default' protocol. <a id=""packages.fetchai.protocols.default.serialization.DefaultSerializer.encode""></a> #### encode Encode a 'Default' message into bytes. **Arguments**: - : the message object. **Returns**: the bytes. <a id=""packages.fetchai.protocols.default.serialization.DefaultSerializer.decode""></a> #### decode Decode bytes into a 'Default' message. **Arguments**: - : the bytes object. **Returns**: the 'Default' message."
packages.fetchai.protocols.default.message,"packages.fetchai.protocols.default.message. <a id=""packages.fetchai.protocols.default.message""></a> # packages.fetchai.protocols.default.message This module contains default's message definition. <a id=""packages.fetchai.protocols.default.message.DefaultMessage""></a>"
packages.fetchai.protocols.default.message,"DefaultMessage Objects. A protocol for exchanging any bytes message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.Performative""></a>"
packages.fetchai.protocols.default.message,"Performative Objects. Performatives for the default protocol. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.Performative.__str__""></a> #### str Get the string representation. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.__init__""></a> #### init Initialise an instance of DefaultMessage. **Arguments**: - : the message id. - : the dialogue reference. - : the message target. - : the message performative. - : extra options. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.valid_performatives""></a> #### validperformatives Get valid performatives. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.dialogue_reference""></a> #### dialoguereference Get the dialogue_reference of the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.message_id""></a> #### messageid Get the message_id of the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.performative""></a> #### performative Get the performative of the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.target""></a> #### target Get the target of the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.content""></a> #### content Get the 'content' content from the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.error_code""></a> #### errorcode Get the 'error_code' content from the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.error_data""></a> #### errordata Get the 'error_data' content from the message. <a id=""packages.fetchai.protocols.default.message.DefaultMessage.error_msg""></a> #### errormsg Get the 'error_msg' content from the message."
base,base. 
aea.protocols.generator.validate,"aea.protocols.generator.validate. <a id=""aea.protocols.generator.validate""></a> # aea.protocols.generator.validate This module validates a protocol specification. <a id=""aea.protocols.generator.validate.validate""></a> #### validate Evaluate whether a protocol specification is valid. **Arguments**: - : a protocol specification. **Returns**: Boolean result, and associated message."
aea.protocols.generator.common,"aea.protocols.generator.common. <a id=""aea.protocols.generator.common""></a> # aea.protocols.generator.common This module contains utility code for generator modules. <a id=""aea.protocols.generator.common.is_installed""></a> #### isinstalled Check whether a programme is installed on the system. **Arguments**: - : the name of the programme. **Returns**: True if installed, False otherwise <a id=""aea.protocols.generator.common.base_protolint_command""></a> #### baseprotolintcommand Return the base protolint command. **Returns**: The base protolint command <a id=""aea.protocols.generator.common.check_prerequisites""></a> #### checkprerequisites Check whether a programme is installed on the system. <a id=""aea.protocols.generator.common.get_protoc_version""></a> #### getprotocversion Get the protoc version used. <a id=""aea.protocols.generator.common.load_protocol_specification""></a> #### loadprotocolspecification Load a protocol specification. **Arguments**: - : path to the protocol specification yaml file. **Returns**: A ProtocolSpecification object <a id=""aea.protocols.generator.common.try_run_black_formatting""></a> #### tryrunblackformatting Run Black code formatting via subprocess. **Arguments**: - : a path where formatting should be applied. <a id=""aea.protocols.generator.common.try_run_isort_formatting""></a> #### tryrunisortformatting Run Isort code formatting via subprocess. **Arguments**: - : a path where formatting should be applied. <a id=""aea.protocols.generator.common.try_run_protoc""></a> #### tryrunprotoc Run 'protoc' protocol buffer compiler via subprocess. **Arguments**: - : path to the protocol buffer schema file. - : name of the protocol buffer schema file. - : the target language in which to compile the protobuf schema file <a id=""aea.protocols.generator.common.try_run_protolint""></a> #### tryrunprotolint Run 'protolint' linter via subprocess. **Arguments**: - : path to the protocol buffer schema file. - : name of the protocol buffer schema file. <a id=""aea.protocols.generator.common.check_protobuf_using_protoc""></a> #### checkprotobufusingprotoc Check whether a protocol buffer schema file is valid. Validation is via trying to compile the schema file. If successfully compiled it is valid, otherwise invalid. If valid, return True and a 'protobuf file is valid' message, otherwise return False and the error thrown by the compiler. **Arguments**: - : path to the protocol buffer schema file. - : name of the protocol buffer schema file. **Returns**: Boolean result and an accompanying message <a id=""aea.protocols.generator.common.compile_protobuf_using_protoc""></a> #### compileprotobufusingprotoc Compile a protocol buffer schema file using protoc. If successfully compiled, return True and a success message, otherwise return False and the error thrown by the compiler. **Arguments**: - : path to the protocol buffer schema file. - : name of the protocol buffer schema file. - : the target language in which to compile the protobuf schema file **Returns**: Boolean result and an accompanying message <a id=""aea.protocols.generator.common.apply_protolint""></a> #### applyprotolint Apply protolint linter to a protocol buffer schema file. If no output, return True and a success message, otherwise return False and the output shown by the linter (minus the indentation suggestions which are automatically fixed by protolint). **Arguments**: - : path to the protocol buffer schema file. - : name of the protocol buffer schema file. **Returns**: Boolean result and an accompanying message"
aea.protocols.generator.extractspecification,"aea.protocols.generator.extractspecification. <a id=""aea.protocols.generator.extract_specification""></a> # aea.protocols.generator.extractspecification This module extracts a valid protocol specification into pythonic objects. <a id=""aea.protocols.generator.extract_specification.PythonicProtocolSpecification""></a>"
aea.protocols.generator.extractspecification,"PythonicProtocolSpecification Objects. This class represents a protocol specification in python. <a id=""aea.protocols.generator.extract_specification.PythonicProtocolSpecification.__init__""></a> #### init Instantiate a Pythonic protocol specification. <a id=""aea.protocols.generator.extract_specification.extract""></a> #### extract Converts a protocol specification into a Pythonic protocol specification. **Arguments**: - : a protocol specification **Returns**: a Pythonic protocol specification"
packages.fetchai.protocols.stateupdate.dialogues,"packages.fetchai.protocols.stateupdate.dialogues. <a id=""packages.fetchai.protocols.state_update.dialogues""></a> # packages.fetchai.protocols.stateupdate.dialogues This module contains the classes required for state_update dialogue management. - StateUpdateDialogue: The dialogue class maintains state of a dialogue and manages it. - StateUpdateDialogues: The dialogues class keeps track of all dialogues. <a id=""packages.fetchai.protocols.state_update.dialogues.StateUpdateDialogue""></a>"
packages.fetchai.protocols.stateupdate.dialogues,"StateUpdateDialogue Objects. The state_update dialogue class maintains state of a dialogue and manages it. <a id=""packages.fetchai.protocols.state_update.dialogues.StateUpdateDialogue.Role""></a>"
packages.fetchai.protocols.stateupdate.dialogues,"Role Objects. This class defines the agent's role in a state_update dialogue. <a id=""packages.fetchai.protocols.state_update.dialogues.StateUpdateDialogue.EndState""></a>"
packages.fetchai.protocols.stateupdate.dialogues,"EndState Objects. This class defines the end states of a state_update dialogue. <a id=""packages.fetchai.protocols.state_update.dialogues.StateUpdateDialogue.__init__""></a> #### init Initialize a dialogue. **Arguments**: - : the identifier of the dialogue - : the address of the entity for whom this dialogue is maintained - : the role of the agent this dialogue is maintained for - : the message class used <a id=""packages.fetchai.protocols.state_update.dialogues.StateUpdateDialogues""></a>"
packages.fetchai.protocols.stateupdate.dialogues,"StateUpdateDialogues Objects. This class keeps track of all state_update dialogues. <a id=""packages.fetchai.protocols.state_update.dialogues.StateUpdateDialogues.__init__""></a> #### init Initialize dialogues. **Arguments**: - : the address of the entity for whom dialogues are maintained - : the dialogue class used - : the callable determining role from first message"
