title,text
aea.helpers.logging,"aea.helpers.logging. <a id=""aea.helpers.logging""></a> # aea.helpers.logging Logging helpers. <a id=""aea.helpers.logging.get_logger""></a> #### getlogger Get the logger based on a module path and agent name. <a id=""aea.helpers.logging.AgentLoggerAdapter""></a>"
aea.helpers.logging,"AgentLoggerAdapter Objects. This class is a logger adapter that prepends the agent name to log messages. <a id=""aea.helpers.logging.AgentLoggerAdapter.__init__""></a> #### init Initialize the logger adapter. **Arguments**: - : the logger. - : the agent name. <a id=""aea.helpers.logging.AgentLoggerAdapter.process""></a> #### process Prepend the agent name to every log message. <a id=""aea.helpers.logging.WithLogger""></a>"
aea.helpers.logging,"WithLogger Objects. Interface to endow subclasses with a logger. <a id=""aea.helpers.logging.WithLogger.__init__""></a> #### init Initialize the logger. **Arguments**: - : the logger object. - : the default logger name, if a logger is not provided. <a id=""aea.helpers.logging.WithLogger.logger""></a> #### logger Get the component logger. <a id=""aea.helpers.logging.WithLogger.logger""></a> #### logger Set the logger."
aea.helpers.yamlutils,"aea.helpers.yamlutils. <a id=""aea.helpers.yaml_utils""></a> # aea.helpers.yamlutils Helper functions related to YAML loading/dumping. <a id=""aea.helpers.yaml_utils._AEAYamlLoader""></a>"
aea.helpers.yamlutils,"AEAYamlLoader Objects. Custom yaml.SafeLoader for the AEA framework. It extends the default SafeLoader in two ways: - loads YAML configurations while *remembering the order of the fields*; - resolves the environment variables at loading time. This class is for internal usage only; please use the public functions of the module 'yaml_load' and 'yaml_load_all'. <a id=""aea.helpers.yaml_utils._AEAYamlLoader.__init__""></a> #### init Initialize the AEAYamlLoader. It adds a YAML Loader constructor to use 'OderedDict' to load the files. **Arguments**: - : the positional arguments. - : the keyword arguments. <a id=""aea.helpers.yaml_utils._AEAYamlDumper""></a>"
aea.helpers.yamlutils,"AEAYamlDumper Objects. Custom yaml.SafeDumper for the AEA framework. It extends the default SafeDumper so to dump YAML configurations while *following the order of the fields*. This class is for internal usage only; please use the public functions of the module 'yaml_dump' and 'yaml_dump_all'. <a id=""aea.helpers.yaml_utils._AEAYamlDumper.__init__""></a> #### init Initialize the AEAYamlDumper. It adds a YAML Dumper representer to use 'OderedDict' to dump the files. **Arguments**: - : the positional arguments. - : the keyword arguments. <a id=""aea.helpers.yaml_utils.yaml_load""></a> #### yamlload Load a yaml from a file pointer in an ordered way. **Arguments**: - : file pointer to the input file. **Returns**: the dictionary object with the YAML file content. <a id=""aea.helpers.yaml_utils.yaml_load_all""></a> #### yamlloadall Load a multi-paged yaml from a file pointer in an ordered way. **Arguments**: - : file pointer to the input file. **Returns**: the list of dictionary objects with the (multi-paged) YAML file content. <a id=""aea.helpers.yaml_utils.yaml_dump""></a> #### yamldump Dump YAML data to a yaml file in an ordered way. **Arguments**: - : the data to write. - : (optional) the file to write on. <a id=""aea.helpers.yaml_utils.yaml_dump_all""></a> #### yamldumpall Dump YAML data to a yaml file in an ordered way. **Arguments**: - : the data to write. - : (optional) the file to write on."
aea.helpers.pipe,"aea.helpers.pipe. <a id=""aea.helpers.pipe""></a> # aea.helpers.pipe Portable pipe implementation for Linux, MacOS, and Windows. <a id=""aea.helpers.pipe.IPCChannelClient""></a>"
aea.helpers.pipe,"IPCChannelClient Objects. Multi-platform interprocess communication channel for the client side. <a id=""aea.helpers.pipe.IPCChannelClient.connect""></a> #### connect Connect to communication channel **Arguments**: - : timeout for other end to connect **Returns**: connection status <a id=""aea.helpers.pipe.IPCChannelClient.write""></a> #### write Write bytes to the other end of the channel Will first write the size than the actual data **Arguments**: - : bytes to write <a id=""aea.helpers.pipe.IPCChannelClient.read""></a> #### read Read bytes from the other end of the channel Will first read the size than the actual data **Returns**: read bytes <a id=""aea.helpers.pipe.IPCChannelClient.close""></a> #### close Close the communication channel. <a id=""aea.helpers.pipe.IPCChannel""></a>"
aea.helpers.pipe,"IPCChannel Objects. Multi-platform interprocess communication channel. <a id=""aea.helpers.pipe.IPCChannel.in_path""></a> #### inpath Rendezvous point for incoming communication. **Returns**: path <a id=""aea.helpers.pipe.IPCChannel.out_path""></a> #### outpath Rendezvous point for outgoing communication. **Returns**: path <a id=""aea.helpers.pipe.PosixNamedPipeProtocol""></a>"
aea.helpers.pipe,"PosixNamedPipeProtocol Objects. Posix named pipes async wrapper communication protocol. <a id=""aea.helpers.pipe.PosixNamedPipeProtocol.__init__""></a> #### init Initialize a new posix named pipe. **Arguments**: - : rendezvous point for incoming data - : rendezvous point for outgoing data - : the logger - : the event loop <a id=""aea.helpers.pipe.PosixNamedPipeProtocol.connect""></a> #### connect Connect to the other end of the pipe **Arguments**: - : timeout before failing **Returns**: connection success <a id=""aea.helpers.pipe.PosixNamedPipeProtocol.write""></a> #### write Write to pipe. **Arguments**: - : bytes to write to pipe <a id=""aea.helpers.pipe.PosixNamedPipeProtocol.read""></a> #### read Read from pipe. **Returns**: read bytes <a id=""aea.helpers.pipe.PosixNamedPipeProtocol.close""></a> #### close Disconnect pipe. <a id=""aea.helpers.pipe.TCPSocketProtocol""></a>"
aea.helpers.pipe,"TCPSocketProtocol Objects. TCP socket communication protocol. <a id=""aea.helpers.pipe.TCPSocketProtocol.__init__""></a> #### init Initialize the tcp socket protocol. **Arguments**: - : established asyncio reader - : established asyncio writer - : the logger - : the event loop <a id=""aea.helpers.pipe.TCPSocketProtocol.writer""></a> #### writer Get a writer associated with protocol. <a id=""aea.helpers.pipe.TCPSocketProtocol.write""></a> #### write Write to socket. **Arguments**: - : bytes to write <a id=""aea.helpers.pipe.TCPSocketProtocol.read""></a> #### read Read from socket. **Returns**: read bytes <a id=""aea.helpers.pipe.TCPSocketProtocol.close""></a> #### close Disconnect socket. <a id=""aea.helpers.pipe.TCPSocketChannel""></a>"
aea.helpers.pipe,"TCPSocketChannel Objects. Interprocess communication channel implementation using tcp sockets. <a id=""aea.helpers.pipe.TCPSocketChannel.__init__""></a> #### init Initialize tcp socket interprocess communication channel. <a id=""aea.helpers.pipe.TCPSocketChannel.connect""></a> #### connect Setup communication channel and wait for other end to connect. **Arguments**: - : timeout for the connection to be established **Returns**: connection status <a id=""aea.helpers.pipe.TCPSocketChannel.write""></a> #### write Write to channel. **Arguments**: - : bytes to write <a id=""aea.helpers.pipe.TCPSocketChannel.read""></a> #### read Read from channel. **Returns**: read bytes <a id=""aea.helpers.pipe.TCPSocketChannel.close""></a> #### close Disconnect from channel and clean it up. <a id=""aea.helpers.pipe.TCPSocketChannel.in_path""></a> #### inpath Rendezvous point for incoming communication. <a id=""aea.helpers.pipe.TCPSocketChannel.out_path""></a> #### outpath Rendezvous point for outgoing communication. <a id=""aea.helpers.pipe.PosixNamedPipeChannel""></a>"
aea.helpers.pipe,"PosixNamedPipeChannel Objects. Interprocess communication channel implementation using Posix named pipes. <a id=""aea.helpers.pipe.PosixNamedPipeChannel.__init__""></a> #### init Initialize posix named pipe interprocess communication channel. <a id=""aea.helpers.pipe.PosixNamedPipeChannel.connect""></a> #### connect Setup communication channel and wait for other end to connect. **Arguments**: - : timeout for connection to be established **Returns**: bool, indicating success <a id=""aea.helpers.pipe.PosixNamedPipeChannel.write""></a> #### write Write to the channel. **Arguments**: - : data to write to channel <a id=""aea.helpers.pipe.PosixNamedPipeChannel.read""></a> #### read Read from the channel. **Returns**: read bytes <a id=""aea.helpers.pipe.PosixNamedPipeChannel.close""></a> #### close Close the channel and clean it up. <a id=""aea.helpers.pipe.PosixNamedPipeChannel.in_path""></a> #### inpath Rendezvous point for incoming communication. <a id=""aea.helpers.pipe.PosixNamedPipeChannel.out_path""></a> #### outpath Rendezvous point for outgoing communication. <a id=""aea.helpers.pipe.TCPSocketChannelClient""></a>"
aea.helpers.pipe,"TCPSocketChannelClient Objects. Interprocess communication channel client using tcp sockets. <a id=""aea.helpers.pipe.TCPSocketChannelClient.__init__""></a> #### init Initialize a tcp socket communication channel client. **Arguments**: - : rendezvous point for incoming data - : rendezvous point for outgoing data - : the logger - : the event loop <a id=""aea.helpers.pipe.TCPSocketChannelClient.connect""></a> #### connect Connect to the other end of the communication channel. **Arguments**: - : timeout for connection to be established **Returns**: connection status <a id=""aea.helpers.pipe.TCPSocketChannelClient.write""></a> #### write Write data to channel. **Arguments**: - : bytes to write <a id=""aea.helpers.pipe.TCPSocketChannelClient.read""></a> #### read Read data from channel. **Returns**: read bytes <a id=""aea.helpers.pipe.TCPSocketChannelClient.close""></a> #### close Disconnect from communication channel. <a id=""aea.helpers.pipe.PosixNamedPipeChannelClient""></a>"
aea.helpers.pipe,"PosixNamedPipeChannelClient Objects. Interprocess communication channel client using Posix named pipes. <a id=""aea.helpers.pipe.PosixNamedPipeChannelClient.__init__""></a> #### init Initialize a posix named pipe communication channel client. **Arguments**: - : rendezvous point for incoming data - : rendezvous point for outgoing data - : the logger - : the event loop <a id=""aea.helpers.pipe.PosixNamedPipeChannelClient.connect""></a> #### connect Connect to the other end of the communication channel. **Arguments**: - : timeout for connection to be established **Returns**: connection status <a id=""aea.helpers.pipe.PosixNamedPipeChannelClient.write""></a> #### write Write data to channel. **Arguments**: - : bytes to write <a id=""aea.helpers.pipe.PosixNamedPipeChannelClient.read""></a> #### read Read data from channel. **Returns**: read bytes <a id=""aea.helpers.pipe.PosixNamedPipeChannelClient.close""></a> #### close Disconnect from communication channel. <a id=""aea.helpers.pipe.make_ipc_channel""></a> #### makeipcchannel Build a portable bidirectional InterProcess Communication channel **Arguments**: - : the logger - : the loop **Returns**: IPCChannel <a id=""aea.helpers.pipe.make_ipc_channel_client""></a> #### makeipcchannelclient Build a portable bidirectional InterProcess Communication client channel **Arguments**: - : rendezvous point for incoming communication - : rendezvous point for outgoing outgoing - : the logger - : the loop **Returns**: IPCChannel"
aea.helpers.constants,"aea.helpers.constants. <a id=""aea.helpers.constants""></a> # aea.helpers.constants Module with helpers constants."
aea.helpers.symlink,"aea.helpers.symlink. <a id=""aea.helpers.sym_link""></a> # aea.helpers.symlink Sym link implementation for Linux, MacOS, and Windows. <a id=""aea.helpers.sym_link.make_symlink""></a> #### makesymlink Make a symbolic link, cross platform. **Arguments**: - : the link name. - : the target. <a id=""aea.helpers.sym_link.cd""></a> #### cd Change directory with context manager. <a id=""aea.helpers.sym_link.create_symlink""></a> #### createsymlink Change directory and call the cross-platform script. The working directory must be the parent of the symbolic link name when executing 'create_symlink_crossplatform.sh'. Hence, we need to translate target_path into the relative path from the symbolic link directory to the target directory. So: 1) from link_path, extract the number of jumps to the parent directory in order to reach the repository root directory, and chain many ""../"" paths. 2) from target_path, compute the relative path to the root 3) relative_target_path is just the concatenation of the results from step (1) and (2). For instance, given - link_path: './directory_1//symbolic_link - target_path: './directory_2/target_path we want to compute: - link_path: 'symbolic_link' (just the last bit) - relative_target_path: '../../directory_1/target_path' The resulting command on UNIX systems will be: cd directory_1 && ln -s ../../directory_1/target_path symbolic_link **Arguments**: - : the source path - : the target path - : the root path **Returns**: exit code"
aea.helpers.envvars,"aea.helpers.envvars. <a id=""aea.helpers.env_vars""></a> # aea.helpers.envvars Implementation of the environment variables support. <a id=""aea.helpers.env_vars.is_env_variable""></a> #### isenvvariable Check is variable string with env variable pattern. <a id=""aea.helpers.env_vars.replace_with_env_var""></a> #### replacewithenvvar Replace env var with value. <a id=""aea.helpers.env_vars.apply_env_variables""></a> #### applyenvvariables Create new resulting dict with env variables applied. <a id=""aea.helpers.env_vars.convert_value_str_to_type""></a> #### convertvaluestrtotype Convert value by type name to native python type."
aea.helpers.exceptionpolicy,"aea.helpers.exceptionpolicy. <a id=""aea.helpers.exception_policy""></a> # aea.helpers.exceptionpolicy This module contains enum of aea exception policies. <a id=""aea.helpers.exception_policy.ExceptionPolicyEnum""></a>"
aea.helpers.exceptionpolicy,ExceptionPolicyEnum Objects. AEA Exception policies.
aea.helpers.asyncutils,"aea.helpers.asyncutils. <a id=""aea.helpers.async_utils""></a> # aea.helpers.asyncutils This module contains the misc utils for async code. <a id=""aea.helpers.async_utils.ensure_list""></a> #### ensurelist Return [value] or list(value) if value is a sequence. <a id=""aea.helpers.async_utils.AsyncState""></a>"
aea.helpers.asyncutils,"AsyncState Objects. Awaitable state. <a id=""aea.helpers.async_utils.AsyncState.__init__""></a> #### init Init async state. **Arguments**: - : state to set on start. - : container of valid states if not provided state not checked on set. <a id=""aea.helpers.async_utils.AsyncState.set""></a> #### set Set state. <a id=""aea.helpers.async_utils.AsyncState.add_callback""></a> #### addcallback Add callback to track state changes. **Arguments**: - : callable object to be called on state changed. <a id=""aea.helpers.async_utils.AsyncState.get""></a> #### get Get state. <a id=""aea.helpers.async_utils.AsyncState.wait""></a> #### wait Wait state to be set. **Arguments**: - : state or list of states. **Returns**: tuple of previous state and new state. <a id=""aea.helpers.async_utils.AsyncState.transit""></a> #### transit Change state context according to success or not. **Arguments**: - : set state on context enter, not_set by default - : set state on context block done, not_set by default - : set state on context block raises exception, not_set by default **Returns**: generator <a id=""aea.helpers.async_utils.PeriodicCaller""></a>"
aea.helpers.asyncutils,"PeriodicCaller Objects. Schedule a periodic call of callable using event loop. Used for periodic function run using asyncio. <a id=""aea.helpers.async_utils.PeriodicCaller.__init__""></a> #### init Init periodic caller. **Arguments**: - : function to call periodically - : period in seconds. - : optional first call datetime - : optional handler to call on exception raised. - : optional asyncio event loop <a id=""aea.helpers.async_utils.PeriodicCaller.start""></a> #### start Activate period calls. <a id=""aea.helpers.async_utils.PeriodicCaller.stop""></a> #### stop Remove from schedule. <a id=""aea.helpers.async_utils.AnotherThreadTask""></a>"
aea.helpers.asyncutils,"AnotherThreadTask Objects. Schedule a task to run on the loop in another thread. Provides better cancel behaviour: on cancel it will wait till cancelled completely. <a id=""aea.helpers.async_utils.AnotherThreadTask.__init__""></a> #### init Init the task. **Arguments**: - : coroutine to schedule - : an event loop to schedule on. <a id=""aea.helpers.async_utils.AnotherThreadTask.result""></a> #### result Wait for coroutine execution result. **Arguments**: - : optional timeout to wait in seconds. **Returns**: result <a id=""aea.helpers.async_utils.AnotherThreadTask.cancel""></a> #### cancel Cancel coroutine task execution in a target loop. <a id=""aea.helpers.async_utils.AnotherThreadTask.done""></a> #### done Check task is done. <a id=""aea.helpers.async_utils.ThreadedAsyncRunner""></a>"
aea.helpers.asyncutils,"ThreadedAsyncRunner Objects. Util to run thread with event loop and execute coroutines inside. <a id=""aea.helpers.async_utils.ThreadedAsyncRunner.__init__""></a> #### init Init threaded runner. **Arguments**: - : optional event loop. is it's running loop, threaded runner will use it. <a id=""aea.helpers.async_utils.ThreadedAsyncRunner.start""></a> #### start Start event loop in dedicated thread. <a id=""aea.helpers.async_utils.ThreadedAsyncRunner.run""></a> #### run Run code inside thread. <a id=""aea.helpers.async_utils.ThreadedAsyncRunner.call""></a> #### call Run a coroutine inside the event loop. **Arguments**: - : a coroutine to run. **Returns**: task <a id=""aea.helpers.async_utils.ThreadedAsyncRunner.stop""></a> #### stop Stop event loop in thread. <a id=""aea.helpers.async_utils.Runnable""></a>"
aea.helpers.asyncutils,"Runnable Objects. Abstract Runnable class. Use to run async task in same event loop or in dedicated thread. Provides: start, stop sync methods to start and stop task Use wait_completed to await task was completed. <a id=""aea.helpers.async_utils.Runnable.__init__""></a> #### init Init runnable. **Arguments**: - : asyncio event loop to use. - : bool. start in thread if True. <a id=""aea.helpers.async_utils.Runnable.start""></a> #### start Start runnable. **Returns**: bool started or not. <a id=""aea.helpers.async_utils.Runnable.is_running""></a> #### isrunning Get running state. <a id=""aea.helpers.async_utils.Runnable.run""></a> #### run Implement run logic respectful to CancelError on termination. <a id=""aea.helpers.async_utils.Runnable.wait_completed""></a> #### waitcompleted Wait runnable execution completed. **Arguments**: - : bool. blocking wait - : float seconds - : check result even it was waited. **Returns**: awaitable if sync is False, otherwise None <a id=""aea.helpers.async_utils.Runnable.stop""></a> #### stop Stop runnable. <a id=""aea.helpers.async_utils.Runnable.start_and_wait_completed""></a> #### startandwaitcompleted Alias for start and wait methods."
aea.helpers.base,"aea.helpers.base. <a id=""aea.helpers.base""></a> # aea.helpers.base Miscellaneous helpers. <a id=""aea.helpers.base.locate""></a> #### locate Locate an object by name or dotted save_path, importing as necessary. <a id=""aea.helpers.base.load_module""></a> #### loadmodule Load a module. **Arguments**: - : the dotted save_path of the package/module. - : the file to the package/module. **Raises**: - : if the filepath provided is not a module. # noqa: DAR402 - : if the execution of the module raises exception. # noqa: DAR402 **Returns**: module type <a id=""aea.helpers.base.load_env_file""></a> #### loadenvfile Load the content of the environment file into the process environment. **Arguments**: - : save_path to the env file. <a id=""aea.helpers.base.sigint_crossplatform""></a> #### sigintcrossplatform Send a SIGINT, cross-platform. The reason is because the subprocess module doesn't have an API to send a SIGINT-like signal both on Posix and Windows with a single method. However, a subprocess.Popen class has the method 'send_signal' that gives more flexibility in this terms. **Arguments**: - : the process to send the signal to. <a id=""aea.helpers.base.win_popen_kwargs""></a> #### winpopenkwargs Return kwargs to start a process in windows with new process group. Help to handle ctrl c properly. Return empty dict if platform is not win32 **Returns**: windows popen kwargs <a id=""aea.helpers.base.send_control_c""></a> #### sendcontrolc Send ctrl-C cross-platform to terminate a subprocess. **Arguments**: - : the process to send the signal to. - : whether or not to kill group <a id=""aea.helpers.base.RegexConstrainedString""></a>"
aea.helpers.base,"RegexConstrainedString Objects. A string that is constrained by a regex. The default behaviour is to match anything. Subclass this class and change the 'REGEX' class attribute to implement a different behaviour. <a id=""aea.helpers.base.RegexConstrainedString.__init__""></a> #### init Initialize a regex constrained string. <a id=""aea.helpers.base.SimpleId""></a>"
aea.helpers.base,"SimpleId Objects. A simple identifier. The allowed strings are all the strings that: - have at least length 1 - have at most length 128 - the first character must be between a-z,A-Z or underscore - the other characters must be either the above or digits. Examples of allowed strings: >>> SimpleId(""an_identifier"") 'an_identifier' Examples of not allowed strings: >>> SimpleId(""0an_identifier"") Traceback (most recent call last): ... ValueError: Value 0an_identifier does not match the regular expression re.compile('[a-zA-Z_][a-zA-Z0-9_]{0,127}') >>> SimpleId(""an identifier"") Traceback (most recent call last): ... ValueError: Value an identifier does not match the regular expression re.compile('[a-zA-Z_][a-zA-Z0-9_]{0,127}') >>> SimpleId("""") Traceback (most recent call last): ... ValueError: Value does not match the regular expression re.compile('[a-zA-Z_][a-zA-Z0-9_]{0,127}') <a id=""aea.helpers.base.cd""></a> #### cd Change working directory temporarily. <a id=""aea.helpers.base.get_logger_method""></a> #### getloggermethod Get logger method for function. Get logger in definition module or creates logger is module.__name__. Or return logger_method if it's callable. **Arguments**: - : function to get logger for. - : logger name or callable. **Returns**: callable to write log with <a id=""aea.helpers.base.try_decorator""></a> #### trydecorator Run function, log and return default value on exception. Does not support async or coroutines! **Arguments**: - : message template with one for exception - : value to return on exception, by default None - : name of the logger method or callable to print logs **Returns**: the callable <a id=""aea.helpers.base.MaxRetriesError""></a>"
aea.helpers.base,"MaxRetriesError Objects. Exception for retry decorator. <a id=""aea.helpers.base.retry_decorator""></a> #### retrydecorator Run function with several attempts. Does not support async or coroutines! **Arguments**: - : amount of attempts - : message template with one for exception - : number of seconds to sleep between retries. default 0 - : name of the logger method or callable to print logs **Returns**: the callable <a id=""aea.helpers.base.exception_log_and_reraise""></a> #### exceptionlogandreraise Run code in context to log and re raise exception. **Arguments**: - : function to print log - : message template to add error text. **Returns**: the generator <a id=""aea.helpers.base.recursive_update""></a> #### recursiveupdate Update a dictionary by replacing conflicts with the new values. It does side-effects to the first dictionary. >>> to_update = dict(a=1, b=2, subdict=dict(subfield1=1)) >>> new_values = dict(b=3, subdict=dict(subfield1=2)) >>> recursive_update(to_update, new_values) >>> to_update {'a': 1, 'b': 3, 'subdict': {'subfield1': 2}} **Arguments**: - : the dictionary to update. - : the dictionary of new values to replace. - : whether or not to allow new values. <a id=""aea.helpers.base.find_topological_order""></a> #### findtopologicalorder Compute the topological order of a graph (using Kahn's algorithm). **Arguments**: - : the adjacency list of the graph. **Raises**: - : if the graph contains a cycle. **Returns**: the topological order for the graph (as a sequence of nodes) <a id=""aea.helpers.base.reachable_nodes""></a> #### reachablenodes Find the reachable subgraph induced by a set of starting nodes. **Arguments**: - : the adjacency list of the full graph. - : the starting nodes of the new graph. **Returns**: the adjacency list of the subgraph. <a id=""aea.helpers.base.cached_property""></a>"
aea.helpers.base,"cachedproperty Objects. Cached property from python3.8 functools. <a id=""aea.helpers.base.cached_property.__init__""></a> #### init Init cached property. <a id=""aea.helpers.base.cached_property.__set_name__""></a> #### setname Set name. <a id=""aea.helpers.base.cached_property.__get__""></a> #### get Get instance. <a id=""aea.helpers.base.ensure_dir""></a> #### ensuredir Check if dir_path is a directory or create it. <a id=""aea.helpers.base.dict_to_path_value""></a> #### dicttopathvalue Convert dict to sequence of terminal path build of keys and value. <a id=""aea.helpers.base.parse_datetime_from_str""></a> #### parsedatetimefromstr Parse datetime from string. <a id=""aea.helpers.base.CertRequest""></a>"
aea.helpers.base,"CertRequest Objects. Certificate request for proof of representation. <a id=""aea.helpers.base.CertRequest.__init__""></a> #### init Initialize the certificate request. **Arguments**: - : the public key, or the key id. - : certificate identifier. - : ledger identifier the request is referring to. - : specify the lower bound for certificate validity. If it is a string, it must follow the format: 'YYYY-MM-DD'. It will be interpreted as timezone UTC-0. - : specify the lower bound for certificate validity. If it is a string, it must follow the format: 'YYYY-MM-DD'. It will be interpreted as timezone UTC-0. - : message format used for signing - : the save_path where to save the certificate. <a id=""aea.helpers.base.CertRequest.public_key""></a> #### publickey Get the public key. <a id=""aea.helpers.base.CertRequest.ledger_id""></a> #### ledgerid Get the ledger id. <a id=""aea.helpers.base.CertRequest.key_identifier""></a> #### keyidentifier Get the key identifier. <a id=""aea.helpers.base.CertRequest.identifier""></a> #### identifier Get the identifier. <a id=""aea.helpers.base.CertRequest.not_before_string""></a> #### notbeforestring Get the not_before field as string. <a id=""aea.helpers.base.CertRequest.not_after_string""></a> #### notafterstring Get the not_after field as string. <a id=""aea.helpers.base.CertRequest.not_before""></a> #### notbefore Get the not_before field. <a id=""aea.helpers.base.CertRequest.not_after""></a> #### notafter Get the not_after field. <a id=""aea.helpers.base.CertRequest.message_format""></a> #### messageformat Get the message format. <a id=""aea.helpers.base.CertRequest.save_path""></a> #### savepath Get the save path for the certificate. Note: if the path is *not* absolute, then the actual save path might depend on the context. **Returns**: the save path <a id=""aea.helpers.base.CertRequest.get_absolute_save_path""></a> #### getabsolutesavepath Get the absolute save path. If save_path is an absolute path, then the prefix is ignored. Otherwise, the path prefix is prepended. **Arguments**: - : the (absolute) path to prepend to the save path. **Returns**: the actual save path. <a id=""aea.helpers.base.CertRequest.public_key_or_identifier""></a> #### publickeyoridentifier Get the public key or identifier. <a id=""aea.helpers.base.CertRequest.get_message""></a> #### getmessage Get the message to sign. <a id=""aea.helpers.base.CertRequest.construct_message""></a> #### constructmessage Construct message for singning. **Arguments**: - : the public key - : identifier to be signed - : signature not valid before - : signature not valid after - : message format used for signing **Returns**: the message <a id=""aea.helpers.base.CertRequest.get_signature""></a> #### getsignature Get signature from save_path. **Arguments**: - : the path prefix to be prepended to save_path. Defaults to cwd. **Returns**: the signature. <a id=""aea.helpers.base.CertRequest.json""></a> #### json Compute the JSON representation. <a id=""aea.helpers.base.CertRequest.from_json""></a> #### fromjson Compute the JSON representation. <a id=""aea.helpers.base.CertRequest.__eq__""></a> #### eq Check equality. <a id=""aea.helpers.base.compute_specifier_from_version""></a> #### computespecifierfromversion Compute the specifier set from a version. version specifier is: >=major.minor.0, <next_major.0.0 **Arguments**: - : the version **Returns**: the specifier set <a id=""aea.helpers.base.decorator_with_optional_params""></a> #### decoratorwithoptionalparams Make a decorator usable either with or without parameters. In other words, if a decorator ""mydecorator"" is decorated with this decorator, It can be used both as: @mydecorator def myfunction(): ... or as: @mydecorator(arg1, kwarg1=""value"") def myfunction(): ... **Arguments**: - : a decorator callable **Returns**: a decorator callable <a id=""aea.helpers.base.delete_directory_contents""></a> #### deletedirectorycontents Delete the content of a directory, without deleting it. <a id=""aea.helpers.base.prepend_if_not_absolute""></a> #### prependifnotabsolute Prepend a path with a prefix, but only if not absolute **Arguments**: - : the path to process. - : the path prefix. **Returns**: the same path if absolute, else the prepended path."
aea.helpers.serializers,"aea.helpers.serializers. <a id=""aea.helpers.serializers""></a> # aea.helpers.serializers This module contains Serializers that can be used for custom types. <a id=""aea.helpers.serializers.DictProtobufStructSerializer""></a>"
aea.helpers.serializers,"DictProtobufStructSerializer Objects. Serialize python dictionaries of type DictType = Dict[str, ValueType] recursively conserving their dynamic type, using google.protobuf.Struct ValueType = PrimitiveType | DictType | List[ValueType]] PrimitiveType = bool | int | float | str | bytes <a id=""aea.helpers.serializers.DictProtobufStructSerializer.encode""></a> #### encode Serialize compatible dictionary to bytes. Copies entire dictionary in the process. **Arguments**: - : the dictionary to serialize **Returns**: serialized bytes string <a id=""aea.helpers.serializers.DictProtobufStructSerializer.decode""></a> #### decode Deserialize a compatible dictionary"
