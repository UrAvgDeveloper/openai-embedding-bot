title,text
Logging,"Logging. # Logging The AEA framework supports flexible logging capabilities with the standard <a href=""https://docs.python.org/3/library/logging.html"" target=""_blank"">Python logging library</a>. In this tutorial, we configure logging for an AEA. First, create your AEA. The file should look like this. By updating the section, you can configure the loggers of your application. The format of this section is specified in the <a href=""https://docs.python.org/3/library/logging.config.html"" target=""_blank""></a> module. At <a href=""https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema"" target=""_blank"">this section</a> you'll find the definition of the configuration dictionary schema. Below is an example of the value. This configuration will set up a logger with name . It prints both on console and on file with a format specified by the formatter."
Logging,"Streaming to Browser. It is possible to configure the AEA to stream logs to a browser. First, add the following configuration to your AEA: Second, create a log server: Save the script in a file called , install flask with and run the server with . Third, run your AEA and visit in your browser."
Generating Wealth,"Generating Wealth. # Generating Wealth To fund an AEA for testing on a test-net you need to request some test tokens from a faucet. First, make sure you have installed the crypto plugin of the target test-net. E.g. for Fetch.AI: And for Ethereum: Add a private key to the agent or !!! note If you already have keys in your project, the commands prompt you to confirm whether to replace the existing keys."
Generating Wealth,"Using a Faucet Website. First, print the address: or This will print the address to the console. Copy the address into the clipboard and request test tokens from the faucet <a href=""https://explore-dorado.fetch.ai"" target=""_blank"">here for Fetch.ai</a> or <a href=""https://faucet.metamask.io/"" target=""_blank"">here for Ethereum</a>. It will take a while for the tokens to become available. Second, after some time, check the wealth associated with the address: or"
Generating Wealth,Using the CLI. Simply generate wealth via the CLI: or !!! note This approach can be unreliable for non-fetchai test nets.
Language Agnostic Definition,"Language Agnostic Definition. # Language Agnostic Definition Currently, there is an implementation of the AEA framework in Python which enables the development of AEAs in Python, and allows AEAs which are built with it to run. However, AEAs can be developed in different programming languages. This is further backed by the idea that agent-based solutions are suited for multi-stakeholder environments where the different AEAs may be developed independently of one another, resulting in heterogeneous systems. This means that in principle, there could be different implementations of the AEA framework, in various programming languages and for different platforms. However, to ensure that AEAs under any implementation are compatible with one another and able to interact, they must satisfy specific definitions. In this page, we compile a set of definitions which any AEA independent of its implementation must satisfy in order to be able to interact with other AEAs. An AEA, in technical terms, must satisfy the following requirements: - It MUST be capable of receiving and sending which satisfy the following <a href=""https://developers.google.com/protocol-buffers"" target=""_blank"">protobuf</a> schema: The format for the above fields are as follows: - and : an address derived from the private key of a <a href=""https://en.bitcoin.it/wiki/Secp256k1"" target=""_blank"">secp256k1</a>-compatible elliptic curve - : this must match a defined <a href=""https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference"" target=""_blank"">regular expression</a> (see below) - : a bytes string representing a serialized message in the specified <a href=""../protocol"">protocol</a> - : follows <a href=""https://datatracker.ietf.org/doc/html/rfc3986"" target=""_blank"">this syntax</a> - It MUST implement each protocol's with the required meta-fields: where is replaced with the protocol specific content (see <a href=""../protocol-generator"">here</a> for details). - It MUST implement protocols according to their specification (see <a href=""../protocol-generator/#full-mode-vs-protobuf-only-mode"">here</a> for details). - It SHOULD implement the protocol which satisfies the following protobuf schema: - The protocol id MUST match the following regular expression: - It is recommended that it processes asynchronously. Note, the specification regarding the processing of messages does not impose any particular implementation, and the AEA can be designed to process envelopes either synchronously and asynchronously. However, asynchronous message handling enables the agent to be more responsive and scalable in maintaining many concurrent dialogues with its peers. - It MUST have an identity in the form of, at a minimum, an address derived from a public key and its associated private key (where the elliptic curve must be of type <a href=""https://en.bitcoin.it/wiki/Secp256k1"" target=""_blank"">SECP256k1</a>). - It SHOULD implement handling of errors using the protocol. The protobuf schema is given above. - It MUST implement the following principles when handling messages: - It MUST ALWAYS handle incoming envelopes/messages and NEVER raise an exception when decoding and validating the message. This ensures another AEA cannot cause the agent to fail by sending a malicious envelope/message. - It MUST NEVER handle outgoing messages and ALWAYS raise an exception when validating the message. An exception implies that the handler is resolving a bug in the implementation. !!! note Additional constraints will be added soon!"
Weather Skills,Weather Skills. # Weather Skills The AEA weather skills demonstrate an interaction between two AEAs. - The provider of weather data (the ). - The buyer of weather data (the ).
Weather Skills,"Discussion. The scope of the specific demo is to demonstrate how to create a simple AEA with the usage of the AEA framework and a database. The AEA will read data from the database, that is populated with readings from a weather station, based on the requested dates and will deliver the data to the client upon payment. This demo does not utilize a smart contract. As a result, we interact with a ledger only to complete a transaction. You can use this AEA as an example of how to read data from a database and advertise these to possible clients."
Weather Skills,Communication. This diagram shows the communication between the various entities as data is successfully sold by the weather station AEA to the client.
Weather Skills,"Option 1: AEA Manager Approach. ,Preparation Instructions: Install the <a href=""https://aea-manager.fetch.ai"" target=""_blank"">AEA Manager</a>. ,Demo Instructions: The following steps assume you have launched the AEA Manager Desktop app. 1. Add a new AEA called with public id . 2. Add another new AEA called with public id . 3. Copy the address from the into your clip board. Then go to the <a href=""https://explore-dorado.fetch.ai"" target=""_blank"">Dorado block explorer</a> and request some test tokens via . 4. Run the AEA. Navigate to its logs and copy the multiaddress displayed. 5. Navigate to the settings of the and under update as follows (make sure to replace the placeholder with the multiaddress): 6. Run the . In the AEA's logs, you should see the agent trading successfully."
Weather Skills,"Option 2: CLI Approach. ,Preparation Instructions: #### Dependencies Follow the <a href=""../quickstart/#preliminaries"">Preliminaries</a> and <a href=""../quickstart/#installation"">Installation</a> sections from the AEA quick start. ,Demo Instructions: A demo to run the same scenario but with a true ledger transaction on Fetch.ai or Ethereum network. This demo assumes the buyer trusts the seller AEA to send the data upon successful payment. #### Create the Weather Station First, fetch the AEA that will provide weather measurements: ??? note ""Alternatively, create from scratch:"" The following steps create the weather station from scratch: #### Create the Weather Client In another terminal, fetch the AEA that will query the weather station: ??? note ""Alternatively, create from scratch:"" The following steps create the weather client from scratch: #### Add Keys for the Weather Station AEA First, create the private key for the weather station AEA based on the network you want to transact. To generate and add a private-public key pair for Fetch.ai use: Next, create a private key used to secure the AEA's communications: Finally, certify the key for use by the connections that request that: #### Add Keys and Generate Wealth for the Weather Client AEA The weather client needs to have some wealth to purchase the service from the weather station. First, create the private key for the weather client AEA based on the network you want to transact. To generate and add a private-public key pair for Fetch.ai use: Then, create some wealth for your weather client based on the network you want to transact with. On the Fetch.ai network: Next, create a private key used to secure the AEA's communications: Finally, certify the key for use by the connections that request that: #### Run the AEAs Run both AEAs from their respective terminals. First, run the weather station AEA: Once you see a message of the form take note of the address. (Alternatively, use to retrieve the address.) This is the entry peer address for the local <a href=""../acn"">agent communication network</a> created by the weather station. Then, in the weather client, run this command (replace with the correct value as described above): This allows the weather client to connect to the same local agent communication network as the weather station. Then run the weather client AEA: You will see that the AEAs negotiate and then transact using the selected ledger. #### Cleaning up When you're done, go up a level and delete the AEAs."
Identity,"Identity. # Identity !!! note This section is incomplete and will soon be updated. The AEAs currently use the addresses associated with their private-public key pairs to identify themselves. <img src=""../assets/keys.jpg"" alt=""Keys of an AEA"" class=""center"" style=""display: block; margin-left: auto; margin-right: auto;width:80%;""> To learn how to generate a private-public key pair check out the relevant <a href=""../cli-commands""> CLI commands </a>. To learn more about public-key cryptography check out <a href=""https://simple.wikipedia.org/wiki/Public-key_cryptography"" target=""_blank"">Wikipedia</a>. An AEA can provide evidence of its identity using third-party solutions. We have implemented a demo using <a href=""https://github.com/hyperledger/aries-cloudagent-python"" target=""_blank"">Aries Hyperledger Cloud Agent</a> which is available <a href=""../aries-cloud-agent-demo"">here</a> and another demo using <a href=""https://developers.yoti.com/yoti"" target=""_blank"">Yoti</a> which is available <a href=""https://github.com/fetchai/agents-yoti"" target=""_blank"">here</a>."
Build an AEA Programmatically,"Build an AEA Programmatically. # Build an AEA Programmatically These instructions detail the Python code you need for running an AEA outside the tool, using the code interface."
Build an AEA Programmatically,"Preparation. Get the directory from the AEA repository: Also, install plug-in:"
Build an AEA Programmatically,"Imports. First, import the necessary common Python libraries and classes. Then, import the application specific libraries. Set up a variable pointing to where the directory is located - this should be our current directory - and where the input and output files are located."
Build an AEA Programmatically,Create a Private Key. We need a private key to populate the AEA's wallet.
Build an AEA Programmatically,Clearing the Input and Output Files. We will use the stub connection to pass envelopes in and out of the AEA. Ensure that any input and output text files are removed before we start.
Build an AEA Programmatically,"Initialise the AEA. We use the <a href=""../api/aea_builder#aeabuilder-objects""></a> to readily build an AEA. By default, the adds the , and protocols. We set the name, add the private key for the AEA to use and set the ledger configurations for the AEA to use. Next, we add the connection which will read/write messages from file: Next, we add the echo skill which will bounce our messages back to us. We first need to place the echo skill into a relevant directory (see path), either by downloading the directory from the AEA repo or by getting the package from the registry. Also, we can add a component that was instantiated programmatically. : Finally, we can build our AEA:"
Build an AEA Programmatically,Start the AEA. We run the AEA from a different thread so that we can still use the main thread to pass it messages.
Build an AEA Programmatically,Send and Receive an Envelope. We use the input and output text files to send an envelope to our AEA and receive a response (from the echo skill)
Build an AEA Programmatically,"Shutdown. Finally, stop our AEA and wait for it to finish"
Build an AEA Programmatically,"Running the AEA. If you now run this python script file, you should see this output:"
Build an AEA Programmatically,"Entire Code Listing. If you just want to copy and past the entire script in you can find it here: ??? note ""Click here to see full listing:"""
Deployment,"Deployment. # Deployment The easiest way to run an AEA is using your development environment. If you would like to run an AEA from a browser you can use <a href=""https://colab.research.google.com"" target=""_blank"">Google Colab</a>. <a href=""https://gist.github.com/DavidMinarsch/2eeb1541508a61e828b497ab161e1834"" target=""_blank"">This gist</a> can be opened in <a href=""https://colab.research.google.com"" target=""_blank"">Colab</a> and implements the <a href=""../quickstart"">quick start</a>. For deployment, we recommend you use <a href=""https://www.docker.com/"" target=""_blank"">Docker</a>."
Deployment,"Deployment using a Docker Image. First, we fetch a directory containing a Dockerfile and some dependencies: Then follow the contained in the folder."
Deployment,"Deployment using Kubernetes. For an example of how to use <a href=""https://kubernetes.io"" target=""_blank"">Kubernetes</a> navigate to our <a href=""https://github.com/fetchai/agents-aea/tree/main/examples/tac_deploy"" target=""_blank"">TAC deployment example</a>."
CLI vs Programmatic AEAs,CLI vs Programmatic AEAs. # CLI vs Programmatic AEAs The AEA framework enables us to create agents either from the CLI tool or programmatically. The following demo demonstrates an interaction between two AEAs. The provider of weather data (managed with the CLI). The buyer of weather data (managed programmatically).
CLI vs Programmatic AEAs,Discussion. The scope of the specific demo is to demonstrate how a CLI based AEA can interact with a programmatically managed AEA. In order to achieve this we are going to use the weather station skills. This demo does not utilize a smart contract or a ledger interaction.
CLI vs Programmatic AEAs,"Get Required Packages. Copy the directory into your local working directory: Also, install plug-in:"
CLI vs Programmatic AEAs,"Demo Instructions. ,Create the Weather Station AEA: Fetch the weather station AEA with the following command : ,Update the AEA Configurations: In the terminal change the configuration: The will prevent the AEA to communicate with a ledger. ,Add Keys: Add a private key for the weather station. Next, create a private key used to secure the AEA's communications: Finally, certify the key for use by the connections that request that: ,Run the Weather Station AEA: Once you see a message of the form take note of the address. ,Create the Weather Client AEA: Since we want to show the interaction between a programmatically created AEA with a CLI based AEA we are going to write some code for the client. Create a new python file and name it and add the following code ??? note ""Weather client full code:"" Now replace with the peer address () noted above. For more details on how to create an agent programmatically follow this guide <a href='/build-aea-programmatically/'>here</a>. ,Run the Weather Client AEA: In a new terminal window, navigate to the folder that you created the script and run: You should see both AEAs interacting now."
Scaffolding Packages,Scaffolding Packages. # Scaffolding Packages
Scaffolding Packages,"Scaffold Generator. ,Scaffold a Skill: ,Scaffold a Protocol: ,Scaffold a Contract: ,Scaffold a Connection: After running the above commands, you are able to develop your own skill, protocol, contract and connection. Once you have made changes to your scaffolded packages, make sure you update the fingerprint of the package: Then you are ready to run the AEA."
Proof of Representation,"Proof of Representation. # Proof of Representation An AEA can use several key pairs. In particular, it can use different keys for securing its communication and for engaging in exchange. In the ACN we make use of this fact. To be able to signal to other agents that the address derived from one key pair is allowed to represent the agent controlling the other key pair, the key pair which is being represented must sign a message to prove that the other key pair is allowed to represent it. The command allows to create this association. The proof of representation feature is used in the context of the and connection. In the former connection, the configuration YAML specifies a field: The refers to the environment for which the signature is generated, here . The refers to the key pair to be used from the specified in for signing. The and fields specify constraints on the validity of the signature. The can specify either the identifier of the key pair in , of which the public key is signed, or it can contain the to be signed public key in plain text. The specifies the path where the certificate is to be saved at. In the above example, the connection requests a certificate which is a signature of the public key in with the key pair in . The validity of the signature will be constrained to the year for the environment ."
