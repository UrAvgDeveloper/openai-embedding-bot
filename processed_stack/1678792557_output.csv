title,text
aea.helpers.storage.genericstorage,"aea.helpers.storage.genericstorage. <a id=""aea.helpers.storage.generic_storage""></a> # aea.helpers.storage.genericstorage This module contains the storage implementation. <a id=""aea.helpers.storage.generic_storage.AsyncCollection""></a>"
aea.helpers.storage.genericstorage,"AsyncCollection Objects. Async collection. <a id=""aea.helpers.storage.generic_storage.AsyncCollection.__init__""></a> #### init Init collection object. **Arguments**: - : storage backed to use. - : str <a id=""aea.helpers.storage.generic_storage.AsyncCollection.put""></a> #### put Put object into collection. **Arguments**: - : str object id - : python dict, json compatible. **Returns**: None <a id=""aea.helpers.storage.generic_storage.AsyncCollection.get""></a> #### get Get object from the collection. **Arguments**: - : str object id **Returns**: dict if object exists in collection otherwise None <a id=""aea.helpers.storage.generic_storage.AsyncCollection.remove""></a> #### remove Remove object from the collection. **Arguments**: - : str object id **Returns**: None <a id=""aea.helpers.storage.generic_storage.AsyncCollection.find""></a> #### find Get objects from the collection by filtering by field value. **Arguments**: - : field name to search: example ""parent.field"" - : value field should be equal to **Returns**: None <a id=""aea.helpers.storage.generic_storage.AsyncCollection.list""></a> #### list List all objects with keys from the collection. **Returns**: Tuple of objects keys, bodies. <a id=""aea.helpers.storage.generic_storage.SyncCollection""></a>"
aea.helpers.storage.genericstorage,"SyncCollection Objects. Async collection. <a id=""aea.helpers.storage.generic_storage.SyncCollection.__init__""></a> #### init Init collection object. **Arguments**: - : coroutine returns async collection. - : abstract event loop where storage is running. <a id=""aea.helpers.storage.generic_storage.SyncCollection.put""></a> #### put Put object into collection. **Arguments**: - : str object id - : python dict, json compatible. **Returns**: None <a id=""aea.helpers.storage.generic_storage.SyncCollection.get""></a> #### get Get object from the collection. **Arguments**: - : str object id **Returns**: dict if object exists in collection otherwise None <a id=""aea.helpers.storage.generic_storage.SyncCollection.remove""></a> #### remove Remove object from the collection. **Arguments**: - : str object id **Returns**: None <a id=""aea.helpers.storage.generic_storage.SyncCollection.find""></a> #### find Get objects from the collection by filtering by field value. **Arguments**: - : field name to search: example ""parent.field"" - : value field should be equal to **Returns**: List of object bodies <a id=""aea.helpers.storage.generic_storage.SyncCollection.list""></a> #### list List all objects with keys from the collection. **Returns**: Tuple of objects keys, bodies. <a id=""aea.helpers.storage.generic_storage.Storage""></a>"
aea.helpers.storage.genericstorage,"Storage Objects. Generic storage. <a id=""aea.helpers.storage.generic_storage.Storage.__init__""></a> #### init Init storage. **Arguments**: - : configuration string for storage. - : asyncio event loop to use. - : bool. start in thread if True. <a id=""aea.helpers.storage.generic_storage.Storage.wait_connected""></a> #### waitconnected Wait generic storage is connected. <a id=""aea.helpers.storage.generic_storage.Storage.is_connected""></a> #### isconnected Get running state of the storage. <a id=""aea.helpers.storage.generic_storage.Storage.run""></a> #### run Connect storage. <a id=""aea.helpers.storage.generic_storage.Storage.get_collection""></a> #### getcollection Get async collection. <a id=""aea.helpers.storage.generic_storage.Storage.get_sync_collection""></a> #### getsynccollection Get sync collection. <a id=""aea.helpers.storage.generic_storage.Storage.__repr__""></a> #### repr Get string representation of the storage."
aea.helpers.storage.backends.sqlite,"aea.helpers.storage.backends.sqlite. <a id=""aea.helpers.storage.backends.sqlite""></a> # aea.helpers.storage.backends.sqlite This module contains sqlite storage backend implementation. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend""></a>"
aea.helpers.storage.backends.sqlite,"SqliteStorageBackend Objects. Sqlite storage backend. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.__init__""></a> #### init Init backend. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.connect""></a> #### connect Connect to backend. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.disconnect""></a> #### disconnect Disconnect the backend. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.ensure_collection""></a> #### ensurecollection Create collection if not exits. **Arguments**: - : name of the collection. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.put""></a> #### put Put object into collection. **Arguments**: - : str. - : str object id - : python dict, json compatible. <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.get""></a> #### get Get object from the collection. **Arguments**: - : str. - : str object id **Returns**: dict if object exists in collection otherwise None <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.remove""></a> #### remove Remove object from the collection. **Arguments**: - : str. - : str object id <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.find""></a> #### find Get objects from the collection by filtering by field value. **Arguments**: - : str. - : field name to search: example ""parent.field"" - : value field should be equal to **Returns**: list of object ids and body <a id=""aea.helpers.storage.backends.sqlite.SqliteStorageBackend.list""></a> #### list List all objects with keys from the collection. **Arguments**: - : str. **Returns**: Tuple of objects keys, bodies."
aea.helpers.storage.backends.base,"aea.helpers.storage.backends.base. <a id=""aea.helpers.storage.backends.base""></a> # aea.helpers.storage.backends.base This module contains storage abstract backend class. <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend""></a>"
aea.helpers.storage.backends.base,"AbstractStorageBackend Objects. Abstract base class for storage backend. <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.__init__""></a> #### init Init backend. <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.connect""></a> #### connect Connect to backend. <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.disconnect""></a> #### disconnect Disconnect the backend. <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.ensure_collection""></a> #### ensurecollection Create collection if not exits. **Arguments**: - : str. **Returns**: None <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.put""></a> #### put Put object into collection. **Arguments**: - : str. - : str object id - : python dict, json compatible. **Returns**: None <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.get""></a> #### get Get object from the collection. **Arguments**: - : str. - : str object id **Returns**: dict if object exists in collection otherwise None <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.remove""></a> #### remove Remove object from the collection. **Arguments**: - : str. - : str object id **Returns**: None <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.find""></a> #### find Get objects from the collection by filtering by field value. **Arguments**: - : str. - : field name to search: example ""parent.field"" - : value field should be equal to **Returns**: list of objects bodies <a id=""aea.helpers.storage.backends.base.AbstractStorageBackend.list""></a> #### list List all objects with keys from the collection. **Arguments**: - : str. **Returns**: Tuple of objects keys, bodies."
aea.helpers.acn.agentrecord,"aea.helpers.acn.agentrecord. <a id=""aea.helpers.acn.agent_record""></a> # aea.helpers.acn.agentrecord This module contains types and helpers for ACN Proof-of-Representation. <a id=""aea.helpers.acn.agent_record.AgentRecord""></a>"
aea.helpers.acn.agentrecord,"AgentRecord Objects. Agent Proof-of-Representation to representative. <a id=""aea.helpers.acn.agent_record.AgentRecord.__init__""></a> #### init Initialize the AgentRecord **Arguments**: - : agent address - : representative's public key - : certificate identifier. - : ledger identifier the request is referring to. - : specify the lower bound for certificate validity. If it is a string, it must follow the format: 'YYYY-MM-DD'. It will be interpreted as timezone UTC-0. - : specify the lower bound for certificate validity. If it is a string, it must follow the format: 'YYYY-MM-DD'. It will be interpreted as timezone UTC-0. - : message format used for signing - : proof-of-representation of this AgentRecord <a id=""aea.helpers.acn.agent_record.AgentRecord.address""></a> #### address Get agent address <a id=""aea.helpers.acn.agent_record.AgentRecord.public_key""></a> #### publickey Get agent public key <a id=""aea.helpers.acn.agent_record.AgentRecord.representative_public_key""></a> #### representativepublickey Get agent representative's public key <a id=""aea.helpers.acn.agent_record.AgentRecord.signature""></a> #### signature Get record signature <a id=""aea.helpers.acn.agent_record.AgentRecord.message""></a> #### message Get the message. <a id=""aea.helpers.acn.agent_record.AgentRecord.identifier""></a> #### identifier Get the identifier. <a id=""aea.helpers.acn.agent_record.AgentRecord.ledger_id""></a> #### ledgerid Get ledger id. <a id=""aea.helpers.acn.agent_record.AgentRecord.not_before""></a> #### notbefore Get the not_before field. <a id=""aea.helpers.acn.agent_record.AgentRecord.not_after""></a> #### notafter Get the not_after field. <a id=""aea.helpers.acn.agent_record.AgentRecord.message_format""></a> #### messageformat Get the message format. <a id=""aea.helpers.acn.agent_record.AgentRecord.__str__""></a> #### str Get string representation. <a id=""aea.helpers.acn.agent_record.AgentRecord.from_cert_request""></a> #### fromcertrequest Get agent record from cert request."
aea.helpers.acn.uri,"aea.helpers.acn.uri. <a id=""aea.helpers.acn.uri""></a> # aea.helpers.acn.uri This module contains types and helpers for libp2p connections Uris. <a id=""aea.helpers.acn.uri.Uri""></a>"
aea.helpers.acn.uri,"Uri Objects. Holds a node address in format ""host:port"". <a id=""aea.helpers.acn.uri.Uri.__init__""></a> #### init Initialise Uri. <a id=""aea.helpers.acn.uri.Uri.__str__""></a> #### str Get string representation. <a id=""aea.helpers.acn.uri.Uri.__repr__""></a> #### repr Get object representation. <a id=""aea.helpers.acn.uri.Uri.host""></a> #### host Get host. <a id=""aea.helpers.acn.uri.Uri.port""></a> #### port Get port."
aea.skills.base,"aea.skills.base. <a id=""aea.skills.base""></a> # aea.skills.base This module contains the base classes for the skills. <a id=""aea.skills.base.SkillContext""></a>"
aea.skills.base,"SkillContext Objects. This class implements the context of a skill. <a id=""aea.skills.base.SkillContext.__init__""></a> #### init Initialize a skill context. **Arguments**: - : the agent context. - : the skill. <a id=""aea.skills.base.SkillContext.logger""></a> #### logger Get the logger. <a id=""aea.skills.base.SkillContext.logger""></a> #### logger Set the logger. <a id=""aea.skills.base.SkillContext.set_agent_context""></a> #### setagentcontext Set the agent context. <a id=""aea.skills.base.SkillContext.shared_state""></a> #### sharedstate Get the shared state dictionary. <a id=""aea.skills.base.SkillContext.agent_name""></a> #### agentname Get agent name. <a id=""aea.skills.base.SkillContext.skill_id""></a> #### skillid Get the skill id of the skill context. <a id=""aea.skills.base.SkillContext.is_active""></a> #### isactive Get the status of the skill (active/not active). <a id=""aea.skills.base.SkillContext.is_active""></a> #### isactive Set the status of the skill (active/not active). <a id=""aea.skills.base.SkillContext.new_behaviours""></a> #### newbehaviours Queue for the new behaviours. This queue can be used to send messages to the framework to request the registration of a behaviour. **Returns**: the queue of new behaviours. <a id=""aea.skills.base.SkillContext.new_handlers""></a> #### newhandlers Queue for the new handlers. This queue can be used to send messages to the framework to request the registration of a handler. **Returns**: the queue of new handlers. <a id=""aea.skills.base.SkillContext.agent_addresses""></a> #### agentaddresses Get addresses. <a id=""aea.skills.base.SkillContext.agent_address""></a> #### agentaddress Get address. <a id=""aea.skills.base.SkillContext.public_key""></a> #### publickey Get public key. <a id=""aea.skills.base.SkillContext.public_keys""></a> #### publickeys Get public keys. <a id=""aea.skills.base.SkillContext.connection_status""></a> #### connectionstatus Get connection status. <a id=""aea.skills.base.SkillContext.outbox""></a> #### outbox Get outbox. <a id=""aea.skills.base.SkillContext.storage""></a> #### storage Get optional storage for agent. <a id=""aea.skills.base.SkillContext.message_in_queue""></a> #### messageinqueue Get message in queue. <a id=""aea.skills.base.SkillContext.decision_maker_message_queue""></a> #### decisionmakermessagequeue Get message queue of decision maker. <a id=""aea.skills.base.SkillContext.decision_maker_handler_context""></a> #### decisionmakerhandlercontext Get decision maker handler context. <a id=""aea.skills.base.SkillContext.task_manager""></a> #### taskmanager Get behaviours of the skill. <a id=""aea.skills.base.SkillContext.default_ledger_id""></a> #### defaultledgerid Get the default ledger id. <a id=""aea.skills.base.SkillContext.currency_denominations""></a> #### currencydenominations Get a dictionary mapping ledger ids to currency denominations. <a id=""aea.skills.base.SkillContext.search_service_address""></a> #### searchserviceaddress Get the address of the search service. <a id=""aea.skills.base.SkillContext.decision_maker_address""></a> #### decisionmakeraddress Get the address of the decision maker. <a id=""aea.skills.base.SkillContext.handlers""></a> #### handlers Get handlers of the skill. <a id=""aea.skills.base.SkillContext.behaviours""></a> #### behaviours Get behaviours of the skill. <a id=""aea.skills.base.SkillContext.namespace""></a> #### namespace Get the agent context namespace. <a id=""aea.skills.base.SkillContext.__getattr__""></a> #### getattr Get attribute. <a id=""aea.skills.base.SkillContext.send_to_skill""></a> #### sendtoskill Send message or envelope to another skill. If message passed it will be wrapped into envelope with optional envelope context. **Arguments**: - : envelope to send to another skill. - : the optional envelope context <a id=""aea.skills.base.SkillComponent""></a>"
aea.skills.base,"SkillComponent Objects. This class defines an abstract interface for skill component classes. <a id=""aea.skills.base.SkillComponent.__init__""></a> #### init Initialize a skill component. **Arguments**: - : the name of the component. - : the configuration for the component. - : the skill context. - : the keyword arguments. <a id=""aea.skills.base.SkillComponent.name""></a> #### name Get the name of the skill component. <a id=""aea.skills.base.SkillComponent.context""></a> #### context Get the context of the skill component. <a id=""aea.skills.base.SkillComponent.skill_id""></a> #### skillid Get the skill id of the skill component. <a id=""aea.skills.base.SkillComponent.configuration""></a> #### configuration Get the skill component configuration. <a id=""aea.skills.base.SkillComponent.config""></a> #### config Get the config of the skill component. <a id=""aea.skills.base.SkillComponent.setup""></a> #### setup Implement the setup. <a id=""aea.skills.base.SkillComponent.teardown""></a> #### teardown Implement the teardown. <a id=""aea.skills.base.SkillComponent.parse_module""></a> #### parsemodule Parse the component module. <a id=""aea.skills.base.AbstractBehaviour""></a>"
aea.skills.base,AbstractBehaviour Objects. 
aea.skills.base,"Behaviour Objects. This class implements an abstract behaviour. In a subclass of Behaviour, the flag 'is_programmatically_defined' can be used by the developer to signal to the framework that the class is meant to be used programmatically; hence, in case the class is not declared in the configuration file but it is present in a skill module, the framework will just ignore this class instead of printing a warning message. <a id=""aea.skills.base.Behaviour.act""></a> #### act Implement the behaviour. **Returns**: None <a id=""aea.skills.base.Behaviour.is_done""></a> #### isdone Return True if the behaviour is terminated, False otherwise. <a id=""aea.skills.base.Behaviour.act_wrapper""></a> #### actwrapper Wrap the call of the action. This method must be called only by the framework. <a id=""aea.skills.base.Behaviour.parse_module""></a> #### parsemodule Parse the behaviours module. **Arguments**: - : path to the Python module containing the Behaviour classes. - : a list of behaviour configurations. - : the skill context **Returns**: a list of Behaviour. <a id=""aea.skills.base.Handler""></a>"
aea.skills.base,"Handler Objects. This class implements an abstract behaviour. In a subclass of Handler, the flag 'is_programmatically_defined' can be used by the developer to signal to the framework that the component is meant to be used programmatically; hence, in case the class is not declared in the configuration file but it is present in a skill module, the framework will just ignore this class instead of printing a warning message. SUPPORTED_PROTOCOL is read by the framework when the handlers are loaded to register them as 'listeners' to the protocol identified by the specified public id. Whenever a message of protocol 'SUPPORTED_PROTOCOL' is sent to the agent, the framework will call the 'handle' method. <a id=""aea.skills.base.Handler.handle""></a> #### handle Implement the reaction to a message. **Arguments**: - : the message **Returns**: None <a id=""aea.skills.base.Handler.handle_wrapper""></a> #### handlewrapper Wrap the call of the handler. This method must be called only by the framework. <a id=""aea.skills.base.Handler.parse_module""></a> #### parsemodule Parse the handler module. **Arguments**: - : path to the Python module containing the Handler class. - : the list of handler configurations. - : the skill context **Returns**: an handler, or None if the parsing fails. <a id=""aea.skills.base.Model""></a>"
aea.skills.base,"Model Objects. This class implements an abstract model. <a id=""aea.skills.base.Model.__init__""></a> #### init Initialize a model. **Arguments**: - : the name of the component. - : the configuration for the component. - : the skill context. - : specify do dialogues in terminal state should stay or not - : the keyword arguments. <a id=""aea.skills.base.Model.setup""></a> #### setup Set the class up. <a id=""aea.skills.base.Model.teardown""></a> #### teardown Tear the class down. <a id=""aea.skills.base.Model.parse_module""></a> #### parsemodule Parse the model module. **Arguments**: - : path to the Python skill module. - : a list of model configurations. - : the skill context **Returns**: a list of Model. <a id=""aea.skills.base.Skill""></a>"
aea.skills.base,"Skill Objects. This class implements a skill. <a id=""aea.skills.base.Skill.__init__""></a> #### init Initialize a skill. **Arguments**: - : the skill configuration. - : the skill context. - : dictionary of handlers. - : dictionary of behaviours. - : dictionary of models. - : the keyword arguments. <a id=""aea.skills.base.Skill.skill_context""></a> #### skillcontext Get the skill context. <a id=""aea.skills.base.Skill.handlers""></a> #### handlers Get the handlers. <a id=""aea.skills.base.Skill.behaviours""></a> #### behaviours Get the handlers. <a id=""aea.skills.base.Skill.models""></a> #### models Get the handlers. <a id=""aea.skills.base.Skill.from_dir""></a> #### fromdir Load the skill from a directory. **Arguments**: - : the directory to the skill package. - : the skill context. - : the keyword arguments. **Returns**: the skill object. <a id=""aea.skills.base.Skill.logger""></a> #### logger Get the logger. In the case of a skill, return the logger provided by the skill context. **Returns**: the logger <a id=""aea.skills.base.Skill.logger""></a> #### logger Set the logger. <a id=""aea.skills.base.Skill.from_config""></a> #### fromconfig Load the skill from configuration. **Arguments**: - : a skill configuration. Must be associated with a directory. - : the agent context. - : the keyword arguments. **Returns**: the skill. <a id=""aea.skills.base._SkillComponentLoadingItem""></a>"
aea.skills.base,"SkillComponentLoadingItem Objects. Class to represent a triple (component name, component configuration, component class). <a id=""aea.skills.base._SkillComponentLoadingItem.__init__""></a> #### init Initialize the item. <a id=""aea.skills.base._SkillComponentLoader""></a>"
aea.skills.base,"SkillComponentLoader Objects. This class implements the loading policy for skill components. <a id=""aea.skills.base._SkillComponentLoader.__init__""></a> #### init Initialize the helper class. <a id=""aea.skills.base._SkillComponentLoader.load_skill""></a> #### loadskill Load the skill."
aea.skills.behaviours,"aea.skills.behaviours. <a id=""aea.skills.behaviours""></a> # aea.skills.behaviours This module contains the classes for specific behaviours. <a id=""aea.skills.behaviours.SimpleBehaviour""></a>"
aea.skills.behaviours,"SimpleBehaviour Objects. This class implements a simple behaviour. <a id=""aea.skills.behaviours.SimpleBehaviour.__init__""></a> #### init Initialize a simple behaviour. **Arguments**: - : the act callable. - : the keyword arguments to be passed to the parent class. <a id=""aea.skills.behaviours.SimpleBehaviour.setup""></a> #### setup Set the behaviour up. <a id=""aea.skills.behaviours.SimpleBehaviour.act""></a> #### act Do the action. <a id=""aea.skills.behaviours.SimpleBehaviour.teardown""></a> #### teardown Tear the behaviour down. <a id=""aea.skills.behaviours.CompositeBehaviour""></a>"
aea.skills.behaviours,"CompositeBehaviour Objects. This class implements a composite behaviour. <a id=""aea.skills.behaviours.CyclicBehaviour""></a>"
aea.skills.behaviours,"CyclicBehaviour Objects. This behaviour is executed until the agent is stopped. <a id=""aea.skills.behaviours.CyclicBehaviour.__init__""></a> #### init Initialize the cyclic behaviour. <a id=""aea.skills.behaviours.CyclicBehaviour.number_of_executions""></a> #### numberofexecutions Get the number of executions. <a id=""aea.skills.behaviours.CyclicBehaviour.act_wrapper""></a> #### actwrapper Wrap the call of the action. This method must be called only by the framework. <a id=""aea.skills.behaviours.CyclicBehaviour.is_done""></a> #### isdone Return True if the behaviour is terminated, False otherwise. The user should implement it properly to determine the stopping condition. **Returns**: bool indicating status <a id=""aea.skills.behaviours.OneShotBehaviour""></a>"
aea.skills.behaviours,"OneShotBehaviour Objects. This behaviour is executed only once. <a id=""aea.skills.behaviours.OneShotBehaviour.__init__""></a> #### init Initialize the cyclic behaviour. <a id=""aea.skills.behaviours.OneShotBehaviour.is_done""></a> #### isdone Return True if the behaviour is terminated, False otherwise. <a id=""aea.skills.behaviours.OneShotBehaviour.act_wrapper""></a> #### actwrapper Wrap the call of the action. This method must be called only by the framework. <a id=""aea.skills.behaviours.TickerBehaviour""></a>"
aea.skills.behaviours,"TickerBehaviour Objects. This behaviour is executed periodically with an interval. <a id=""aea.skills.behaviours.TickerBehaviour.__init__""></a> #### init Initialize the ticker behaviour. **Arguments**: - : interval of the behaviour in seconds. - : whether to start the behaviour with an offset. - : the keyword arguments. <a id=""aea.skills.behaviours.TickerBehaviour.tick_interval""></a> #### tickinterval Get the tick_interval in seconds. <a id=""aea.skills.behaviours.TickerBehaviour.start_at""></a> #### startat Get the start time. <a id=""aea.skills.behaviours.TickerBehaviour.last_act_time""></a> #### lastacttime Get the last time the act method has been called. <a id=""aea.skills.behaviours.TickerBehaviour.act_wrapper""></a> #### actwrapper Wrap the call of the action. This method must be called only by the framework. <a id=""aea.skills.behaviours.TickerBehaviour.is_time_to_act""></a> #### istimetoact Check whether it is time to act, according to the tick_interval constraint and the 'start at' constraint. **Returns**: True if it is time to act, false otherwise. <a id=""aea.skills.behaviours.SequenceBehaviour""></a>"
aea.skills.behaviours,"SequenceBehaviour Objects. This behaviour executes sub-behaviour serially. <a id=""aea.skills.behaviours.SequenceBehaviour.__init__""></a> #### init Initialize the sequence behaviour. **Arguments**: - : the sequence of behaviour. - : the keyword arguments <a id=""aea.skills.behaviours.SequenceBehaviour.current_behaviour""></a> #### currentbehaviour Get the current behaviour. If None, the sequence behaviour can be considered done. **Returns**: current behaviour or None <a id=""aea.skills.behaviours.SequenceBehaviour.act""></a> #### act Implement the behaviour. <a id=""aea.skills.behaviours.SequenceBehaviour.is_done""></a> #### isdone Return True if the behaviour is terminated, False otherwise. <a id=""aea.skills.behaviours.State""></a>"
aea.skills.behaviours,"State Objects. A state of a FSMBehaviour. A State behaviour is a simple behaviour with a special property 'event' that is opportunely set by the implementer. The event is read by the framework when the behaviour is done in order to pick the transition to trigger. <a id=""aea.skills.behaviours.State.__init__""></a> #### init Initialize a state of the state machine. <a id=""aea.skills.behaviours.State.event""></a> #### event Get the event to be triggered at the end of the behaviour. <a id=""aea.skills.behaviours.State.is_done""></a> #### isdone Return True if the behaviour is terminated, False otherwise. <a id=""aea.skills.behaviours.State.reset""></a> #### reset Reset initial conditions. <a id=""aea.skills.behaviours.FSMBehaviour""></a>"
aea.skills.behaviours,"FSMBehaviour Objects. This class implements a finite-state machine behaviour. <a id=""aea.skills.behaviours.FSMBehaviour.__init__""></a> #### init Initialize the finite-state machine behaviour. <a id=""aea.skills.behaviours.FSMBehaviour.is_started""></a> #### isstarted Check if the behaviour is started. <a id=""aea.skills.behaviours.FSMBehaviour.register_state""></a> #### registerstate Register a state. **Arguments**: - : the name of the state. - : the behaviour in that state. - : whether the state is an initial state. **Raises**: - : if a state with the provided name already exists. <a id=""aea.skills.behaviours.FSMBehaviour.register_final_state""></a> #### registerfinalstate Register a final state. **Arguments**: - : the name of the state. - : the state. **Raises**: - : if a state with the provided name already exists. <a id=""aea.skills.behaviours.FSMBehaviour.unregister_state""></a> #### unregisterstate Unregister a state. **Arguments**: - : the state name to unregister. **Raises**: - : if the state is not registered. <a id=""aea.skills.behaviours.FSMBehaviour.states""></a> #### states Get all the state names. <a id=""aea.skills.behaviours.FSMBehaviour.initial_state""></a> #### initialstate Get the initial state name. <a id=""aea.skills.behaviours.FSMBehaviour.initial_state""></a> #### initialstate Set the initial state. <a id=""aea.skills.behaviours.FSMBehaviour.final_states""></a> #### finalstates Get the final state names. <a id=""aea.skills.behaviours.FSMBehaviour.get_state""></a> #### getstate Get a state from its name. <a id=""aea.skills.behaviours.FSMBehaviour.act""></a> #### act Implement the behaviour. <a id=""aea.skills.behaviours.FSMBehaviour.is_done""></a> #### isdone Return True if the behaviour is terminated, False otherwise. <a id=""aea.skills.behaviours.FSMBehaviour.register_transition""></a> #### registertransition Register a transition. No sanity check is done. **Arguments**: - : the source state name. - : the destination state name. - : the event. **Raises**: - : if a transition from source with event is already present. <a id=""aea.skills.behaviours.FSMBehaviour.unregister_transition""></a> #### unregistertransition Unregister a transition. **Arguments**: - : the source state name. - : the destination state name. - : the event. **Raises**: - : if a transition from source with event is not present."
aea.skills.tasks,"aea.skills.tasks. <a id=""aea.skills.tasks""></a> # aea.skills.tasks This module contains the classes for tasks. <a id=""aea.skills.tasks.Task""></a>"
aea.skills.tasks,"Task Objects. This class implements an abstract task. <a id=""aea.skills.tasks.Task.__init__""></a> #### init Initialize a task. <a id=""aea.skills.tasks.Task.__call__""></a> #### call Execute the task. **Arguments**: - : positional arguments forwarded to the 'execute' method. - : keyword arguments forwarded to the 'execute' method. **Raises**: - : if the task has already been executed. **Returns**: the task instance <a id=""aea.skills.tasks.Task.is_executed""></a> #### isexecuted Check if the task has already been executed. <a id=""aea.skills.tasks.Task.result""></a> #### result Get the result. **Raises**: - : if the task has not been executed yet. **Returns**: the result from the execute method. <a id=""aea.skills.tasks.Task.setup""></a> #### setup Implement the task setup. <a id=""aea.skills.tasks.Task.execute""></a> #### execute Run the task logic. **Arguments**: - : the positional arguments - : the keyword arguments **Returns**: any <a id=""aea.skills.tasks.Task.teardown""></a> #### teardown Implement the task teardown. <a id=""aea.skills.tasks.init_worker""></a> #### initworker Initialize a worker. Disable the SIGINT handler of process pool is using. Related to a well-known bug: https://bugs.python.org/issue8296 <a id=""aea.skills.tasks.TaskManager""></a>"
aea.skills.tasks,TaskManager Objects. 
aea.skills.tasks,"ThreadedTaskManager Objects. A threaded task manager. <a id=""aea.skills.tasks.ThreadedTaskManager.__init__""></a> #### init Initialize the task manager. **Arguments**: - : the number of worker processes. - : option to postpone pool creation till the first enqueue_task called. - : the logger. <a id=""aea.skills.tasks.ProcessTaskManager""></a>"
aea.skills.tasks,"ProcessTaskManager Objects. A multiprocess task manager. <a id=""aea.skills.tasks.ProcessTaskManager.__init__""></a> #### init Initialize the task manager. **Arguments**: - : the number of worker processes. - : option to postpone pool creation till the first enqueue_task called. - : the logger."
aea.manager.manager,"aea.manager.manager. <a id=""aea.manager.manager""></a> # aea.manager.manager This module contains the implementation of AEA agents manager. <a id=""aea.manager.manager.ProjectNotFoundError""></a>"
aea.manager.manager,"ProjectNotFoundError Objects. Project not found exception. <a id=""aea.manager.manager.ProjectCheckError""></a>"
aea.manager.manager,"ProjectCheckError Objects. Project check error exception. <a id=""aea.manager.manager.ProjectCheckError.__init__""></a> #### init Init exception. <a id=""aea.manager.manager.ProjectPackageConsistencyCheckError""></a>"
aea.manager.manager,"ProjectPackageConsistencyCheckError Objects. Check consistency of package versions against already added project. <a id=""aea.manager.manager.ProjectPackageConsistencyCheckError.__init__""></a> #### init Initialize the exception. **Arguments**: - : the agent project id whose addition has failed. - : the conflicting packages. <a id=""aea.manager.manager.BaseAgentRunTask""></a>"
aea.manager.manager,"BaseAgentRunTask Objects. Base abstract class for agent run tasks. <a id=""aea.manager.manager.BaseAgentRunTask.start""></a> #### start Start task. <a id=""aea.manager.manager.BaseAgentRunTask.wait""></a> #### wait Return future to wait task completed. <a id=""aea.manager.manager.BaseAgentRunTask.stop""></a> #### stop Stop task. <a id=""aea.manager.manager.BaseAgentRunTask.is_running""></a> #### isrunning Return is task running. <a id=""aea.manager.manager.AgentRunAsyncTask""></a>"
aea.manager.manager,"AgentRunAsyncTask Objects. Async task wrapper for agent. <a id=""aea.manager.manager.AgentRunAsyncTask.__init__""></a> #### init Init task with agent alias and loop. <a id=""aea.manager.manager.AgentRunAsyncTask.create_run_loop""></a> #### createrunloop Create run loop. <a id=""aea.manager.manager.AgentRunAsyncTask.start""></a> #### start Start task. <a id=""aea.manager.manager.AgentRunAsyncTask.wait""></a> #### wait Return future to wait task completed. <a id=""aea.manager.manager.AgentRunAsyncTask.stop""></a> #### stop Stop task. <a id=""aea.manager.manager.AgentRunAsyncTask.run""></a> #### run Run task body. <a id=""aea.manager.manager.AgentRunAsyncTask.is_running""></a> #### isrunning Return is task running. <a id=""aea.manager.manager.AgentRunThreadTask""></a>"
aea.manager.manager,"AgentRunThreadTask Objects. Threaded wrapper to run agent. <a id=""aea.manager.manager.AgentRunThreadTask.__init__""></a> #### init Init task with agent alias and loop. <a id=""aea.manager.manager.AgentRunThreadTask.create_run_loop""></a> #### createrunloop Create run loop. <a id=""aea.manager.manager.AgentRunThreadTask.start""></a> #### start Run task in a dedicated thread. <a id=""aea.manager.manager.AgentRunThreadTask.stop""></a> #### stop Stop the task. <a id=""aea.manager.manager.AgentRunProcessTask""></a>"
aea.manager.manager,"AgentRunProcessTask Objects. Subprocess wrapper to run agent. <a id=""aea.manager.manager.AgentRunProcessTask.__init__""></a> #### init Init task with agent alias and loop. <a id=""aea.manager.manager.AgentRunProcessTask.start""></a> #### start Run task in a dedicated process. <a id=""aea.manager.manager.AgentRunProcessTask.wait""></a> #### wait Return future to wait task completed. <a id=""aea.manager.manager.AgentRunProcessTask.stop""></a> #### stop Stop the task. <a id=""aea.manager.manager.AgentRunProcessTask.is_running""></a> #### isrunning Is agent running. <a id=""aea.manager.manager.MultiAgentManager""></a>"
aea.manager.manager,"MultiAgentManager Objects. Multi agents manager. <a id=""aea.manager.manager.MultiAgentManager.__init__""></a> #### init Initialize manager. **Arguments**: - : directory to store base agents. - : str. async or threaded - : str. path to the local packages registry - : bool. add/remove project on the first agent add/last agent remove - : the password to encrypt/decrypt the private key. <a id=""aea.manager.manager.MultiAgentManager.data_dir""></a> #### datadir Get the certs directory. <a id=""aea.manager.manager.MultiAgentManager.get_data_dir_of_agent""></a> #### getdatadirofagent Get the data directory of a specific agent. <a id=""aea.manager.manager.MultiAgentManager.is_running""></a> #### isrunning Is manager running. <a id=""aea.manager.manager.MultiAgentManager.dict_state""></a> #### dictstate Create MultiAgentManager dist state. <a id=""aea.manager.manager.MultiAgentManager.projects""></a> #### projects Get all projects. <a id=""aea.manager.manager.MultiAgentManager.add_error_callback""></a> #### adderrorcallback Add error callback to call on error raised. <a id=""aea.manager.manager.MultiAgentManager.start_manager""></a> #### startmanager Start manager. If local = False and remote = False, then the packages are fetched in mixed mode (i.e. first try from local registry, and then from remote registry in case of failure). **Arguments**: - : whether or not to fetch from local registry. - : whether or not to fetch from remote registry. **Returns**: the MultiAgentManager instance. <a id=""aea.manager.manager.MultiAgentManager.last_start_status""></a> #### laststartstatus Get status of the last agents start loading state. <a id=""aea.manager.manager.MultiAgentManager.stop_manager""></a> #### stopmanager Stop manager. Stops all running agents and stop agent. **Arguments**: - : bool is cleanup on stop. - : bool is save state to file on stop. **Returns**: None <a id=""aea.manager.manager.MultiAgentManager.add_project""></a> #### addproject Fetch agent project and all dependencies to working_dir. If local = False and remote = False, then the packages are fetched in mixed mode (i.e. first try from local registry, and then from remote registry in case of failure). **Arguments**: - : the public if of the agent project. - : whether or not to fetch from local registry. - : whether or not to fetch from remote registry. - : bool flag for restoring already fetched agent. **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.remove_project""></a> #### removeproject Remove agent project. <a id=""aea.manager.manager.MultiAgentManager.list_projects""></a> #### listprojects List all agents projects added. **Returns**: list of public ids of projects <a id=""aea.manager.manager.MultiAgentManager.add_agent""></a> #### addagent Create new agent configuration based on project with config overrides applied. Alias is stored in memory only! **Arguments**: - : base agent project public id - : unique name for the agent - : overrides for agent config. - : overrides for component section. - : whether or not to fetch from local registry. - : whether or not to fetch from remote registry. - : bool flag for restoring already fetched agent. **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.add_agent_with_config""></a> #### addagentwithconfig Create new agent configuration based on project with config provided. Alias is stored in memory only! **Arguments**: - : base agent project public id - : unique name for the agent - : agent config (used for agent re-creation). **Returns**: manager <a id=""aea.manager.manager.MultiAgentManager.get_agent_overridables""></a> #### getagentoverridables Get agent config overridables. **Arguments**: - : str **Returns**: Tuple of agent overridables dict and and list of component overridables dict. <a id=""aea.manager.manager.MultiAgentManager.set_agent_overrides""></a> #### setagentoverrides Set agent overrides. **Arguments**: - : str - : optional dict of agent config overrides - : optional list of dict of components overrides **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.list_agents_info""></a> #### listagentsinfo List agents detailed info. **Returns**: list of dicts that represents agent info: public_id, name, is_running. <a id=""aea.manager.manager.MultiAgentManager.list_agents""></a> #### listagents List all agents. **Arguments**: - : returns only running if set to True **Returns**: list of agents names <a id=""aea.manager.manager.MultiAgentManager.remove_agent""></a> #### removeagent Remove agent alias definition from registry. **Arguments**: - : agent name to remove - : disable auto project remove on last agent removed. **Returns**: None <a id=""aea.manager.manager.MultiAgentManager.start_agent""></a> #### startagent Start selected agent. **Arguments**: - : agent name to start **Returns**: None <a id=""aea.manager.manager.MultiAgentManager.start_all_agents""></a> #### startallagents Start all not started agents. **Returns**: None <a id=""aea.manager.manager.MultiAgentManager.stop_agent""></a> #### stopagent Stop running agent. **Arguments**: - : agent name to stop **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.stop_all_agents""></a> #### stopallagents Stop all agents running. **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.stop_agents""></a> #### stopagents Stop specified agents. **Arguments**: - : names of agents **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.start_agents""></a> #### startagents Stop specified agents. **Arguments**: - : names of agents **Returns**: self <a id=""aea.manager.manager.MultiAgentManager.get_agent_alias""></a> #### getagentalias Return details about agent alias definition. **Arguments**: - : name of agent **Returns**: AgentAlias"
aea.manager.project,"aea.manager.project. <a id=""aea.manager.project""></a> # aea.manager.project This module contains the implementation of AEA agents project configuration. <a id=""aea.manager.project._Base""></a>"
aea.manager.project,"Base Objects. Base class to share some methods. <a id=""aea.manager.project._Base.builder""></a> #### builder Get AEABuilder instance. <a id=""aea.manager.project._Base.install_pypi_dependencies""></a> #### installpypidependencies Install python dependencies for the project. <a id=""aea.manager.project.Project""></a>"
aea.manager.project,"Project Objects. Agent project representation. <a id=""aea.manager.project.Project.__init__""></a> #### init Init project with public_id and project's path. <a id=""aea.manager.project.Project.build""></a> #### build Call all build entry points. <a id=""aea.manager.project.Project.load""></a> #### load Load project with given public_id to working_dir. If local = False and remote = False, then the packages are fetched in mixed mode (i.e. first try from local registry, and then from remote registry in case of failure). **Arguments**: - : the working directory - : the public id - : whether to fetch from local - : whether to fetch from remote - : whether to restore or not - : the logging verbosity of the CLI - : the path to the registry locally - : consistency checks flag - : aea validation flag **Returns**: project <a id=""aea.manager.project.Project.remove""></a> #### remove Remove project, do cleanup. <a id=""aea.manager.project.Project.agent_config""></a> #### agentconfig Get the agent configuration. <a id=""aea.manager.project.Project.builder""></a> #### builder Get builder instance. <a id=""aea.manager.project.Project.check""></a> #### check Check we can still construct an AEA from the project with builder.build. <a id=""aea.manager.project.AgentAlias""></a>"
aea.manager.project,"AgentAlias Objects. Agent alias representation. <a id=""aea.manager.project.AgentAlias.__init__""></a> #### init Init agent alias with project, config, name, agent, builder. <a id=""aea.manager.project.AgentAlias.set_agent_config_from_data""></a> #### setagentconfigfromdata Set agent config instance constructed from json data. **Arguments**: - : agent config json data <a id=""aea.manager.project.AgentAlias.builder""></a> #### builder Get builder instance. <a id=""aea.manager.project.AgentAlias.agent_config""></a> #### agentconfig Get agent config. <a id=""aea.manager.project.AgentAlias.remove_from_project""></a> #### removefromproject Remove agent alias from project. <a id=""aea.manager.project.AgentAlias.dict""></a> #### dict Convert AgentAlias to dict. <a id=""aea.manager.project.AgentAlias.config_json""></a> #### configjson Get agent config json data. <a id=""aea.manager.project.AgentAlias.get_aea_instance""></a> #### getaeainstance Build new aea instance. <a id=""aea.manager.project.AgentAlias.issue_certificates""></a> #### issuecertificates Issue the certificates for this agent. <a id=""aea.manager.project.AgentAlias.set_overrides""></a> #### setoverrides Set override for this agent alias's config. <a id=""aea.manager.project.AgentAlias.agent_config_manager""></a> #### agentconfigmanager Get agent configuration manager instance for the config. <a id=""aea.manager.project.AgentAlias.get_overridables""></a> #### getoverridables Get all overridables for this agent alias's config. <a id=""aea.manager.project.AgentAlias.get_addresses""></a> #### getaddresses Get addresses from private keys. **Returns**: dict with crypto id str as key and address str as value <a id=""aea.manager.project.AgentAlias.get_connections_addresses""></a> #### getconnectionsaddresses Get connections addresses from connections private keys. **Returns**: dict with crypto id str as key and address str as value"
