title,text
feature_request,feature_request. --- name: Feature request about: Suggest an idea for this project title: '' labels: '' assignees: '' --- Thanks for taking the time to let us know about a feature that you would like! Please try to fill in as much as possible of this form so that we can help. **Is your feature request related to a problem? Please describe.** A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] **Describe the solution you'd like** A clear and concise description of what you want to happen. **Describe alternatives you've considered** A clear and concise description of any alternative solutions or features you've considered. **Additional context** Add any other context or screenshots about the feature request here.
Authors,Authors. # Authors This is the official list of Fetch.ai authors for copyright purposes. * Ali Hosseini <ali.hosseini@fetch.ai> 5A11 at https://github.com/5A11 * Ed Fitzgerald <ed.fitzgerald@fetch.ai> ejfitzgerald at https://github.com/ejfitzgerald * Jiri Vestfal <jiri.vestfal@fetch.ai> MissingNO57 at https://github.com/MissingNO57 * Lokman Rahmani <lokman.rahmani@fetch.ai> lrahmani at https://github.com/lrahmani * Oleg Panasevych <oleg.panasevych@n-cube.co.uk> Panasevychol at https://github.com/panasevychol * Peter Bukva <peter.bukva@fetch.ai> pbukva at https://github.com/pbukva * Yuri Turchenkov <yuri.turchenkov@fetch.ai> solarw at https://github.com/solarw
Authors,Other Contributors. See the GitHub commit log for a list of recent contributors. We would like to thank everyone who has contributed to the project in any way.
DEVELOPING,"DEVELOPING. [comment]: <> ( <a href="""">) [comment]: <> ( <img alt=""Codecov"" src=""https://img.shields.io/codecov/c/github/fetchai/cosmpy"">) [comment]: <> ( </a>) <a href=""https://img.shields.io/badge/lint-flake8-blueviolet""> <img alt=""flake8"" src=""https://img.shields.io/badge/lint-flake8-yellow"" > </a> <a href=""https://github.com/python/mypy""> <img alt=""mypy"" src=""https://img.shields.io/badge/static%20check-mypy-blue""> </a> <a href=""https://github.com/psf/black""> <img alt=""Black"" src=""https://img.shields.io/badge/code%20style-black-black""> </a> <a href=""https://github.com/PyCQA/bandit""> <img alt=""mypy"" src=""https://img.shields.io/badge/security-bandit-lightgrey""> </a>"
DEVELOPING,"Development setup. The easiest way to get set up for development is to install Python and , then run the following:"
DEVELOPING,"Development commands. There are various makefile commands that help the development. Some of them are: - For linting: - For static analysis: - To run tests: Before committing and opening a PR, use the above commands to run the checks locally. This saves CI hours and ensures you only commit clean code."
DEVELOPING,"Generating python types from Cosmos SDK protobuf schemas. This library uses python types which are generated (using Google's Protocol Buffers at https://developers.google.com/protocol-buffers/ compiler) from protocol buffer schemas in the Cosmos SDK at https://github.com/cosmos/cosmos-sdk and WasmD at https://github.com/CosmWasm/wasmd. When updating the Cosmos-SDK version that is supported by this library (see the version currently used under in Makefile at Makefile), you will need to fetch its corresponding protobuf schemas and generate their associated python types, replacing the existing ones. > Note: This process has to be done only once when the Cosmos-SDK version supported by this library is changed. > Note: To generate python types from Cosmos-SDK protobuf schemas, you will need Google Protocol Buffers at https://developers.google.com/protocol-buffers/ compiler. A guide on how to install it can be found here at https://fetchai.github.io/oef-sdk-python/user/install.html#protobuf-compiler. - To regenerate the protobuf schema files, run the following: >Note: For this library to be functional, only the python types generated from protobuf schemas are required, not the schema files themselves. > The schema files are fetched on-demand only to enable the generation of python types. > Therefore, the schema files are intentionally stored as **local** files and are **NOT** checked in to this repository to minimise its filesystem footprint."
DEVELOPING,"MakeFile Commands. The Makefile in this repo provides various useful commands that ease development. We will describe some of them here: - : - applies : code formatter - applies : sorts imports - runs : linter - runs : detects unused code - : - runs : finds common security issues in Python code - runs : checks installed dependencies for known security vulnerabilities - : runs , a static type checker for python - : runs , a static type checker and linter for python - tests: - : runs all tests - : runs unit tests - : runs integration tests - : produces the coverage report (you should run tests using one of the above commands first) - : removes temporary files and caches. - : creates a new environment (cleans and installs in _normal_ mode) - : creates a new development environment (cleans and installs in _development_ mode) - : checks dependencies and reports any license issues - : checks that files have the correct copyright headers - documentation: - : generates documentation from the source code - : creates a live-reloading docs server on localhost."
DEVELOPING,To set up a local Fetchai node. refer to this guide at https://docs.fetch.ai/ledger_v2/single-node-network/.
DEVELOPING,"To run a local Fetchai node in docker. ,Preliminaries: You require Docker at https://docs.docker.com/get-docker/ for your platform. ,Run the docker image: - Place the following entrypoint script somewhere in your system (e.g ): - Execute: where - is the name of the entrypoint script (e.g.) - is the path to the directory you placed the script (e.g.), - is the tag of the FetchD docker image you want to run (e.g. for Dorado)"
Release History,Release History. # Release History
Release History,0.6.2. * feat: add migration for wasm contracts in aerial * CI: fix release automation
Release History,0.6.1. * dependencies rearranged * better support for stacking queries * integration tests fixes * query timeouts options added * fixes for gas prices
Release History,0.6.0. * python 3.10 support * poetry dependency management tool now used * documentation and docstrings are updated * reference API added to the documentation * added contract schema and validate msgs if present * Tx.wait_to_complete: timeout and poll_period parameters are added * dependencies are updated and cleaned up * add pagination to TotalSupply * import PubKey type to prevent error on rest query
Release History,0.5.1. * dev dependency grpcio-tools updated to 1.47.0 * dev dependency protobuf pinned to 3.19.4 * cosmos sdk proto files regenerated with newer grpcio tool
Release History,0.5.0. * add BLS support * add ability to create wallet from mnemonic or unsafe seed * add integration tests * LedgerContract switches path to optional * add address prefix to wallet * Add fallback hashlib for Ubuntu 22.04 LTS * fix: send funds in contract methods * fix integration tests * fix: improve support for other chains * staking auto-compounder use-case * oracle example use-case * stake optimizer use-case * top-up wallet use-case * update documentation
Release History,0.4.1. * fix: mainnet chain_id and fee (#141)
Release History,0.4.0. * fixes for rest api support (#138) * configuration updates for dorado (#135) * dorado updates (#115) * upgrade module (#130) * add docs preview (#136) * ibc module (#118) * tendermint module (#128)
Release History,"0.3.1. * Aerial High Level API by @ejfitzgerald in #96 * Aerial: Initial offline table based gas strategy by @ejfitzgerald in #107 * gov module queries support by @solarw in #91 * Aerial: Simulation based Gas estimation by @ejfitzgerald in #108 * added darglint to make lint command by @solarw in #109 * unused darglint config removed from the setup.cfg by @solarw in #111 * chores: update protos, fix Makefile by @daeMOn63 in #113 * add slashing module API by @solarw in #116 * added evidence module API by @solarw in #117 * fix staking tests by @daeMOn63 in #119 * feat: add params rest client by @daeMOn63 in #120 * Add distribution module by @Galadrin in #92 * Mint module by @solarw in #122 * Initial documentation using MkDocs by @5A11 in #123 * Basic staking support by @ejfitzgerald in #125 * Minor docs edit by @5A11 in #129 * Feature/release 0.3.0 by @5A11 in #131 * Release 0.3.0 by @5A11 in #132"
Release History,"0.3.0 (2022-03-30). * Introduced high-level API. * Groundwork for a strategy engine for choosing tx gas fees * Simulation-based gas estimation * Support for queries, sending tokens, wallets, basic smart contract interactions * Support for staking-related logic * Added documentation using MkDocs * Added low-level support for Cosmos SDK's module * Added low-level support for Cosmos SDK's module * Added low-level support for Cosmos SDK's module * Added low-level support for Cosmos SDK's module * Added low-level support for Cosmos SDK's module * Improvement to linters (added to ). Resolved complains. * Various fixes and cleanups"
Release History,0.2.0 (2022-02-09). * Fixed some REST api bugs
Release History,0.2.0-rc1 (2022-02-03). * Added support for a Capricorn version of FetchD network
Release History,0.1.4 (2021-08-25). * Dependencies refactored and some dependencies will install only with --dev parameter
Release History,0.1.3 (2021-08-24). * Lowered required version of grpcio to 1.32.0 or greater
Release History,0.1.2 (2021-08-23). * First public release
Contributing,"Contributing. # Contributing Contributions to this library are welcome. - If you want to report a bug or ask for features, you can check the Issues page at https://github.com/fetchai/cosmpy/issues and raise an issue. - If you would like to contribute a bug fix or feature then submit a Pull request at https://github.com/fetchai/cosmpy/pulls. For other kinds of feedback, you can contact one of the authors at AUTHORS.md by email. Before reading on, please have a look at the code of conduct at CODE_OF_CONDUCT.md."
Contributing,"A few simple rules. - All Pull Requests should be opened against the branch. Do **not** open a Pull Request against ! - Before working on a feature, reach out to one of the core developers or discuss the feature in an issue. The framework caters a diverse audience and new features require upfront coordination. - Include unit tests for 100% coverage when you contribute new features, as they help to a) prove that your code works correctly, and b) guard against future breaking changes to lower the maintenance cost. - Bug fixes also generally require unit tests, because the presence of bugs usually indicates insufficient test coverage. - Keep API compatibility in mind when you change code in . Above version , breaking changes can happen across versions with different left digit. Below version , they can happen across versions with different middle digit. Reviewers of your pull request will comment on any API compatibility issues. - When you contribute a new feature to , the maintenance burden is transferred to the core team. This means that the benefit of the contribution must be compared against the cost of maintaining the feature. - Where possible, extend existing features instead of replacing one. - All files must include a license header. - Before committing and opening a PR, run all tests locally. This saves CI hours and ensures you only commit clean code."
Contributing,"Contributing code. If you have improvements, send us your pull requests! A team member will be assigned to review your pull requests. All tests are run as part of CI as well as various other checks (linters, static type checkers, security checkers, etc). If there are any problems, feedback is provided via GitHub. Once the pull requests is approved and passes continuous integration checks, you or a team member can merge it. If you want to contribute, start working through the codebase, navigate to the GitHub Issues page at https://github.com/fetchai/cosmpy/issues tab and start looking through interesting issues. If you decide to start on an issue, leave a comment so that other people know that you're working on it. If you want to help out, but not alone, use the issue comment thread to coordinate."
Contributing,"Commits and PRs. This project uses Conventional Commits to generate release notes and to determine versioning. Commit messages should adhere to this standard and be of the form: Further details on can be found here: <https://www.conventionalcommits.org/en/v1.0.0/> When merging a branch to , PRs should be squashed into one conventional commit by selecting the option. This ensures Release notes are useful and readable when releases are created. <!-- --> <img src=""https://docs.github.com/assets/images/help/pull_requests/select-squash-and-merge-from-drop-down-menu.png"" alt=""drawing"" style=""width:600px;""/>"
Security Policy,Security Policy. # Security Policy Security is very important for Fetch.ai and its community. This document outlines security procedures and general policies for the project.
Security Policy,Supported Versions. The following table shows which versions of are currently being supported with security updates. | Version | Supported | | --------- | ------------------ | | | :white_check_mark: |
Security Policy,"Reporting a Vulnerability. The team and community take all security bugs in seriously. We appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions. Report security bugs by emailing . The lead maintainer will acknowledge your email within 48 hours, and will send a more detailed response within 48 hours indicating the next steps in handling your report. After the initial reply to your report, the security team will endeavour to keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance. Report security bugs in third-party modules to the person or team maintaining the module."
Security Policy,"Disclosure Policy. When the security team receives a security bug report, they will assign it to a primary handler. This person will coordinate the fix and release process, involving the following steps: - Confirm the problem and determine the affected versions. - Audit code to find any potential similar problems. - Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible to PyPI."
Security Policy,Comments on this Policy. If you have suggestions on how this process could be improved please submit a pull request.
Security Policy,"Bug Bounty. We have a **bug bounty program** at https://docs.fetch.ai/bug_bounty/. Please report any security issues you find, or reach out to . Please try to be as explicit as possible, describing all the steps and example code to reproduce the security issue. Critical bug fixes will be backported to past major releases."
Security Policy,"Public Discussions. Please restrain from publicly discussing a potential security vulnerability. 🙊 It's better to discuss privately and try to find a solution first, to limit the potential impact as much as possible. --- Thanks for your help! The Fetch.ai community thank you for that. 🙇"
oracles,"oracles. **Oracles** are entities that can update state variables in smart contracts and whose goal is usually to accurately estimate or predict some real world quantity or quantities. These quantities can then be used in the logic of other smart contracts. This guide shows how to write a CosmPy script that deploys and updates an oracle contract with a coin price, and another script that deploys a contract that queries this coin price."
oracles,"Preliminaries. We will need the binaries for both contracts, which can be downloaded as follows: The scripts also require the following imports:"
oracles,"Oracle deployer and updater. We first choose a data source for the coin price, the update interval, and the decimal precision for the oracle value: Next, we create a wallet and ledger interface to interact with the latest stable testnet: Create the object: To deploy the oracle contract, add the fee amount to the instantiation message and call the function: Save the oracle contract address to use for the oracle client script below (). As the deployer of the contract, we have permission to grant the oracle to a particular address. In this case, we'll grant the oracle role to our own wallet: Finally, start updating the contract with the coin price retrieved from the : For the complete example script, see aerial_oracle.py at https://github.com/fetchai/cosmpy/blob/develop/examples/aerial_oracle.py."
oracles,"Oracle client. Now we'll write a script that deploys a contract that can request the oracle value in exchange for the required fee. We again start by creating a wallet and ledger interface in a new terminal session: Set to the address of the contract deployed in the previous script: Next, we define the contract object, set the oracle contract address in the instantiation message, and deploy the contract: Finally, define a request interval and start a loop that executes the function that requests the oracle value: For the complete example script, see aerial_oracle_client.py at https://github.com/fetchai/cosmpy/blob/develop/examples/aerial_oracle_client.py."
"Cosmpy is a Python library for interacting with Cosmos-based blockchains.

* A simplified command line tool for querying and sending transactions to Cosmos-SDK blockchains. 
* Features an easy interface for deploying and interacting with Cosmwasm smart contracts.
* Provides access to lower-level ledger APIs for advanced use-cases. 

",level_0. index
"Cosmpy is a Python library for interacting with Cosmos-based blockchains.

* A simplified command line tool for querying and sending transactions to Cosmos-SDK blockchains. 
* Features an easy interface for deploying and interacting with Cosmwasm smart contracts.
* Provides access to lower-level ledger APIs for advanced use-cases. 

",To install. 
"Cosmpy is a Python library for interacting with Cosmos-based blockchains.

* A simplified command line tool for querying and sending transactions to Cosmos-SDK blockchains. 
* Features an easy interface for deploying and interacting with Cosmwasm smart contracts.
* Provides access to lower-level ledger APIs for advanced use-cases. 

","Version. <a href=""https://img.shields.io/pypi/v/cosmpy"" target=""_blank""><img alt=""PyPI"" src=""https://img.shields.io/pypi/v/cosmpy"" /></a>."
"Cosmpy is a Python library for interacting with Cosmos-based blockchains.

* A simplified command line tool for querying and sending transactions to Cosmos-SDK blockchains. 
* Features an easy interface for deploying and interacting with Cosmwasm smart contracts.
* Provides access to lower-level ledger APIs for advanced use-cases. 

",Repository. 
"Cosmpy is a Python library for interacting with Cosmos-based blockchains.

* A simplified command line tool for querying and sending transactions to Cosmos-SDK blockchains. 
* Features an easy interface for deploying and interacting with Cosmwasm smart contracts.
* Provides access to lower-level ledger APIs for advanced use-cases. 

",To contribute. Clone the repo: Set up development environment: This creates a new virtual environment and installs the development dependencies. Enter the virtual environment:
stake-optimizer,"stake-optimizer. When you delegate tokens to a validator for a determined period, you can use the at https://github.com/fetchai/cosmpy/blob/develop/examples/aerial_compounder.py to get increasing rewards. You can maximize your rewards for a given staking period by selecting an optimal compounding period. To do this, you will need to follow these steps: *"
stake-optimizer,Set and Query Variables. 
stake-optimizer,Calculate Reward Rate. 
stake-optimizer,"Calculate Optimal Compounding Period. We can calculate the optimal compounding period that maximizes our staking rewards analytically by using the following formula. <img src=""../images/reward_equation.png"" width=""400""> Where: *M* = Total stake at time *D* *S*= Initial Stake \ *f* = Transaction Fee \ *k* = Reward Rate *m* = Number Of Compounding Transactions \ *n* = Compounding Period *D* = *m x n* = Total Staking Time We will now find the value that maximizes reward by taking the first derivative with respect to *n* and finding the root in the interval *(0,D]* You can make use of the value in the at https://github.com/fetchai/cosmpy/blob/develop/examples/aerial_compounder.py to maximize your rewards You can also plot the function along with the optimal period to observe the results <img src=""../images/maximizing_rewards.png"" width=""400""> Finally, we can compare the compounding staking rewards to a simple non-compounding strategy <img src=""../images/compounded_vs_simple.png"" width=""800""> You can view an abbreviated version of the code at at https://github.com/fetchai/cosmpy/blob/develop/examples/aerial_stake_optimizer.py"
staking,"staking. A big part of the cosmos networks is staking. Staking is the process where you delegate your tokens to the network's validators in order to secure the network. There are three main actions you can take when staking: * **Delegating**: This is the process where you send your tokens to a chosen validator. They are applied immediately and you start earning rewards as soon as this transaction completes. The more tokens you stake, the more rewards you will earn. * **Redelegating**: This is the process where you transfer your staked tokens from one validator to another. This can be for many reasons, such as better returns, more trustworthiness, etc. * **Undelegating**: While your tokens are staked, you cannot spend them or send them to other users. To regain access to them, you must undelegate them. When you initiate this process, the funds will be removed from the validator they were delegated to, and must be left to cool down for a period of time (for example 21 days). After this period, the funds are automatically released into the user's wallet."
staking,"Actions. ,Delegate: To stake tokens with the specific validator using a at wallets-and-keys.md: ,Redelegate: To redelegate tokens from an existing validator (with the address ) to another (with the address ): ,Undelegate: To undelegate tokens and start the cool down process: !!! note The cool down is tracked for each invocation of undelegate action. So for example if you trigger 3 undelegate actions on 3 consecutive days. The first batch of tokens will become available 3 days before the final batch. ,Claiming Rewards: While your funds are staked, you are earning rewards on them. Rewards can be collected at any time and unlike delegations, when collected they become immediately available. To claim rewards from a specific validator:"
staking,"Queries. ,Stake Summary: At any point you can query the stake information of any particular address. This can be done using the as shown in the example below:"
