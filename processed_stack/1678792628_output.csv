title,text
packages.fetchai.protocols.stateupdate.serialization,"packages.fetchai.protocols.stateupdate.serialization. <a id=""packages.fetchai.protocols.state_update.serialization""></a> # packages.fetchai.protocols.stateupdate.serialization Serialization module for state_update protocol. <a id=""packages.fetchai.protocols.state_update.serialization.StateUpdateSerializer""></a>"
packages.fetchai.protocols.stateupdate.serialization,"StateUpdateSerializer Objects. Serialization for the 'state_update' protocol. <a id=""packages.fetchai.protocols.state_update.serialization.StateUpdateSerializer.encode""></a> #### encode Encode a 'StateUpdate' message into bytes. **Arguments**: - : the message object. **Returns**: the bytes. <a id=""packages.fetchai.protocols.state_update.serialization.StateUpdateSerializer.decode""></a> #### decode Decode bytes into a 'StateUpdate' message. **Arguments**: - : the bytes object. **Returns**: the 'StateUpdate' message."
packages.fetchai.protocols.stateupdate.message,"packages.fetchai.protocols.stateupdate.message. <a id=""packages.fetchai.protocols.state_update.message""></a> # packages.fetchai.protocols.stateupdate.message This module contains state_update's message definition. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage""></a>"
packages.fetchai.protocols.stateupdate.message,"StateUpdateMessage Objects. A protocol for state updates to the decision maker state. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.Performative""></a>"
packages.fetchai.protocols.stateupdate.message,"Performative Objects. Performatives for the state_update protocol. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.Performative.__str__""></a> #### str Get the string representation. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.__init__""></a> #### init Initialise an instance of StateUpdateMessage. **Arguments**: - : the message id. - : the dialogue reference. - : the message target. - : the message performative. - : extra options. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.valid_performatives""></a> #### validperformatives Get valid performatives. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.dialogue_reference""></a> #### dialoguereference Get the dialogue_reference of the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.message_id""></a> #### messageid Get the message_id of the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.performative""></a> #### performative Get the performative of the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.target""></a> #### target Get the target of the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.amount_by_currency_id""></a> #### amountbycurrencyid Get the 'amount_by_currency_id' content from the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.exchange_params_by_currency_id""></a> #### exchangeparamsbycurrencyid Get the 'exchange_params_by_currency_id' content from the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.quantities_by_good_id""></a> #### quantitiesbygoodid Get the 'quantities_by_good_id' content from the message. <a id=""packages.fetchai.protocols.state_update.message.StateUpdateMessage.utility_params_by_good_id""></a> #### utilityparamsbygoodid Get the 'utility_params_by_good_id' content from the message."
aea.connections.base,"aea.connections.base. <a id=""aea.connections.base""></a> # aea.connections.base The base connection package. <a id=""aea.connections.base.ConnectionStates""></a>"
aea.connections.base,"ConnectionStates Objects. Connection states enum. <a id=""aea.connections.base.Connection""></a>"
aea.connections.base,Connection Objects. 
aea.connections.base,"BaseSyncConnection Objects. Base sync connection class to write connections with sync code. <a id=""aea.connections.base.BaseSyncConnection.__init__""></a> #### init Initialize the connection. The configuration must be specified if and only if the following parameters are None: connection_id, excluded_protocols or restricted_to_protocols. **Arguments**: - : the connection configuration. - : directory where to put local files. - : the identity object held by the agent. - : the crypto store for encrypted communication. - : the set of protocols ids of the only supported protocols for this connection. - : the set of protocols ids that we want to exclude for this connection. - : keyword arguments passed to connection base <a id=""aea.connections.base.BaseSyncConnection.put_envelope""></a> #### putenvelope Put envelope in to the incoming queue. <a id=""aea.connections.base.BaseSyncConnection.connect""></a> #### connect Connect connection. <a id=""aea.connections.base.BaseSyncConnection.disconnect""></a> #### disconnect Disconnect connection. <a id=""aea.connections.base.BaseSyncConnection.send""></a> #### send Send envelope to connection. <a id=""aea.connections.base.BaseSyncConnection.receive""></a> #### receive Get an envelope from the connection. <a id=""aea.connections.base.BaseSyncConnection.start_main""></a> #### startmain Start main function of the connection. <a id=""aea.connections.base.BaseSyncConnection.main""></a> #### main Run main body of the connection in dedicated thread. <a id=""aea.connections.base.BaseSyncConnection.on_connect""></a> #### onconnect Run on connect method called. <a id=""aea.connections.base.BaseSyncConnection.on_disconnect""></a> #### ondisconnect Run on disconnect method called. <a id=""aea.connections.base.BaseSyncConnection.on_send""></a> #### onsend Run on send method called."
aea.mail.base,"aea.mail.base. <a id=""aea.mail.base""></a> # aea.mail.base Mail module abstract base classes. <a id=""aea.mail.base.URI""></a>"
aea.mail.base,"URI Objects. URI following RFC3986. <a id=""aea.mail.base.URI.__init__""></a> #### init Initialize the URI. Must follow: https://tools.ietf.org/html/rfc3986.html **Arguments**: - : the raw form uri <a id=""aea.mail.base.URI.scheme""></a> #### scheme Get the scheme. <a id=""aea.mail.base.URI.netloc""></a> #### netloc Get the netloc. <a id=""aea.mail.base.URI.path""></a> #### path Get the path. <a id=""aea.mail.base.URI.params""></a> #### params Get the params. <a id=""aea.mail.base.URI.query""></a> #### query Get the query. <a id=""aea.mail.base.URI.fragment""></a> #### fragment Get the fragment. <a id=""aea.mail.base.URI.username""></a> #### username Get the username. <a id=""aea.mail.base.URI.password""></a> #### password Get the password. <a id=""aea.mail.base.URI.host""></a> #### host Get the host. <a id=""aea.mail.base.URI.port""></a> #### port Get the port. <a id=""aea.mail.base.URI.__str__""></a> #### str Get string representation. <a id=""aea.mail.base.URI.__eq__""></a> #### eq Compare with another object. <a id=""aea.mail.base.EnvelopeContext""></a>"
aea.mail.base,"EnvelopeContext Objects. Contains context information of an envelope. <a id=""aea.mail.base.EnvelopeContext.__init__""></a> #### init Initialize the envelope context. **Arguments**: - : the connection id used for routing the outgoing envelope in the multiplexer. - : the URI sent with the envelope. <a id=""aea.mail.base.EnvelopeContext.uri""></a> #### uri Get the URI. <a id=""aea.mail.base.EnvelopeContext.connection_id""></a> #### connectionid Get the connection id to route the envelope. <a id=""aea.mail.base.EnvelopeContext.connection_id""></a> #### connectionid Set the 'via' connection id. <a id=""aea.mail.base.EnvelopeContext.__str__""></a> #### str Get the string representation. <a id=""aea.mail.base.EnvelopeContext.__eq__""></a> #### eq Compare with another object. <a id=""aea.mail.base.AEAConnectionError""></a>"
aea.mail.base,"AEAConnectionError Objects. Exception class for connection errors. <a id=""aea.mail.base.Empty""></a>"
aea.mail.base,"Empty Objects. Exception for when the inbox is empty. <a id=""aea.mail.base.EnvelopeSerializer""></a>"
aea.mail.base,EnvelopeSerializer Objects. 
aea.mail.base,"ProtobufEnvelopeSerializer Objects. Envelope serializer using Protobuf. <a id=""aea.mail.base.ProtobufEnvelopeSerializer.encode""></a> #### encode Encode the envelope. **Arguments**: - : the envelope to encode **Returns**: the encoded envelope <a id=""aea.mail.base.ProtobufEnvelopeSerializer.decode""></a> #### decode Decode the envelope. The default serializer doesn't decode the message field. **Arguments**: - : the encoded envelope **Returns**: the envelope <a id=""aea.mail.base.Envelope""></a>"
aea.mail.base,"Envelope Objects. The top level message class for agent to agent communication. <a id=""aea.mail.base.Envelope.__init__""></a> #### init Initialize a Message object. **Arguments**: - : the address of the receiver. - : the address of the sender. - : the protocol-specific message. - : the optional envelope context. - : the protocol specification id (wire id). <a id=""aea.mail.base.Envelope.to""></a> #### to Get address of receiver. <a id=""aea.mail.base.Envelope.to""></a> #### to Set address of receiver. <a id=""aea.mail.base.Envelope.sender""></a> #### sender Get address of sender. <a id=""aea.mail.base.Envelope.sender""></a> #### sender Set address of sender. <a id=""aea.mail.base.Envelope.protocol_specification_id""></a> #### protocolspecificationid Get protocol_specification_id. <a id=""aea.mail.base.Envelope.message""></a> #### message Get the protocol-specific message. <a id=""aea.mail.base.Envelope.message""></a> #### message Set the protocol-specific message. <a id=""aea.mail.base.Envelope.message_bytes""></a> #### messagebytes Get the protocol-specific message. <a id=""aea.mail.base.Envelope.context""></a> #### context Get the envelope context. <a id=""aea.mail.base.Envelope.to_as_public_id""></a> #### toaspublicid Get to as public id. <a id=""aea.mail.base.Envelope.is_sender_public_id""></a> #### issenderpublicid Check if sender is a public id. <a id=""aea.mail.base.Envelope.is_to_public_id""></a> #### istopublicid Check if to is a public id. <a id=""aea.mail.base.Envelope.is_component_to_component_message""></a> #### iscomponenttocomponentmessage Whether or not the message contained is component to component. <a id=""aea.mail.base.Envelope.__eq__""></a> #### eq Compare with another object. <a id=""aea.mail.base.Envelope.encode""></a> #### encode Encode the envelope. **Arguments**: - : the serializer that implements the encoding procedure. **Returns**: the encoded envelope. <a id=""aea.mail.base.Envelope.decode""></a> #### decode Decode the envelope. **Arguments**: - : the bytes to be decoded. - : the serializer that implements the decoding procedure. **Returns**: the decoded envelope. <a id=""aea.mail.base.Envelope.__str__""></a> #### str Get the string representation of an envelope."
aea.errorhandler.base,"aea.errorhandler.base. <a id=""aea.error_handler.base""></a> # aea.errorhandler.base This module contains the abstract error handler class. <a id=""aea.error_handler.base.AbstractErrorHandler""></a>"
aea.errorhandler.base,"AbstractErrorHandler Objects. Error handler class for handling problematic envelopes. <a id=""aea.error_handler.base.AbstractErrorHandler.__init__""></a> #### init Instantiate error handler. <a id=""aea.error_handler.base.AbstractErrorHandler.config""></a> #### config Get handler config. <a id=""aea.error_handler.base.AbstractErrorHandler.send_unsupported_protocol""></a> #### sendunsupportedprotocol Handle the received envelope in case the protocol is not supported. **Arguments**: - : the envelope - : the logger **Returns**: None <a id=""aea.error_handler.base.AbstractErrorHandler.send_decoding_error""></a> #### senddecodingerror Handle a decoding error. **Arguments**: - : the envelope - : the exception raised during decoding - : the logger **Returns**: None <a id=""aea.error_handler.base.AbstractErrorHandler.send_no_active_handler""></a> #### sendnoactivehandler Handle the received envelope in case the handler is not supported. **Arguments**: - : the envelope - : the reason for the failure - : the logger **Returns**: None"
aea.errorhandler.default,"aea.errorhandler.default. <a id=""aea.error_handler.default""></a> # aea.errorhandler.default This module contains the default error handler class. <a id=""aea.error_handler.default.ErrorHandler""></a>"
aea.errorhandler.default,"ErrorHandler Objects. Error handler class for handling problematic envelopes. <a id=""aea.error_handler.default.ErrorHandler.__init__""></a> #### init Instantiate error handler. <a id=""aea.error_handler.default.ErrorHandler.send_unsupported_protocol""></a> #### sendunsupportedprotocol Handle the received envelope in case the protocol is not supported. **Arguments**: - : the envelope - : the logger <a id=""aea.error_handler.default.ErrorHandler.send_decoding_error""></a> #### senddecodingerror Handle a decoding error. **Arguments**: - : the envelope - : the exception raised during decoding - : the logger <a id=""aea.error_handler.default.ErrorHandler.send_no_active_handler""></a> #### sendnoactivehandler Handle the received envelope in case the handler is not supported. **Arguments**: - : the envelope - : the reason for the failure - : the logger"
aea.testtools.generic,"aea.testtools.generic. <a id=""aea.test_tools.generic""></a> # aea.testtools.generic This module contains generic tools for AEA end-to-end testing. <a id=""aea.test_tools.generic.write_envelope_to_file""></a> #### writeenvelopetofile Write an envelope to a file. **Arguments**: - : Envelope. - : the file path <a id=""aea.test_tools.generic.read_envelope_from_file""></a> #### readenvelopefromfile Read an envelope from a file. **Arguments**: - : the file path. **Returns**: envelope <a id=""aea.test_tools.generic.nested_set_config""></a> #### nestedsetconfig Set an AEA config with nested values. Run from agent's directory. Allowed dotted_path: 'agent.an_attribute_name' 'protocols.my_protocol.an_attribute_name' 'connections.my_connection.an_attribute_name' 'contracts.my_contract.an_attribute_name' 'skills.my_skill.an_attribute_name' 'vendor.author.[protocols|connections|skills].package_name.attribute_name **Arguments**: - : dotted path to a setting. - : a value to assign. Must be of yaml serializable type. - : the author name, used to parse the dotted path."
aea.testtools.constants,"aea.testtools.constants. <a id=""aea.test_tools.constants""></a> # aea.testtools.constants This is a module with constants for test tools."
aea.testtools.testcontract,"aea.testtools.testcontract. <a id=""aea.test_tools.test_contract""></a> # aea.testtools.testcontract This module contains test case classes based on pytest for AEA contract testing. <a id=""aea.test_tools.test_contract.BaseContractTestCase""></a>"
aea.testtools.testcontract,"BaseContractTestCase Objects. A class to test a contract. <a id=""aea.test_tools.test_contract.BaseContractTestCase.contract""></a> #### contract Get the contract. <a id=""aea.test_tools.test_contract.BaseContractTestCase.setup""></a> #### setup Set up the contract test case. <a id=""aea.test_tools.test_contract.BaseContractTestCase.finish_contract_deployment""></a> #### finishcontractdeployment Finish deploying contract. **Returns**: contract address <a id=""aea.test_tools.test_contract.BaseContractTestCase.refill_from_faucet""></a> #### refillfromfaucet Refill from faucet. <a id=""aea.test_tools.test_contract.BaseContractTestCase.sign_send_confirm_receipt_multisig_transaction""></a> #### signsendconfirmreceiptmultisigtransaction Sign, send and confirm settlement of a transaction with multiple signatures. **Arguments**: - : the transaction - : the ledger api - : Cryptos to sign transaction with - : the time to sleep between transaction submission and receipt request **Returns**: The transaction receipt <a id=""aea.test_tools.test_contract.BaseContractTestCase.sign_send_confirm_receipt_transaction""></a> #### signsendconfirmreceipttransaction Sign, send and confirm settlement of a transaction with multiple signatures. **Arguments**: - : the transaction - : the ledger api - : Crypto to sign transaction with - : the time to sleep between transaction submission and receipt request **Returns**: The transaction receipt"
aea.testtools.exceptions,"aea.testtools.exceptions. <a id=""aea.test_tools.exceptions""></a> # aea.testtools.exceptions Module with AEA testing exceptions. <a id=""aea.test_tools.exceptions.AEATestingException""></a>"
aea.testtools.exceptions,AEATestingException Objects. An exception to be raised on incorrect testing tools usage.
